1747865150700:vec <- c(12,13,5)
1749070209682:q
1749070212916:new
1749070985998:hello()
1749070994126:+ Shift + T'
1749070994126:hello <- function() {
1749070994126:print("Hello, world!")
1749070994126:}
1749070994127:hello()
1749071003739:hello
1749071007870:hello()
1749071015104:2+4
1749071020930:r = 4
1749071022885:r
1749071029473:new
1749071032978:news()
1749071038742:quit
1749071042167:hello()
1749071047450:hello()
1749071048774:hello()
1749071057890:function
1749071063480:hello <- function() {
1749071063480:print("Hello, world!")
1749071063481:}
1749071180450:hello <- function() {
1749071180450:print("Hello, world!")
1749071180450:}
1749071182352:hello <- function() {
1749071182352:print("Hello, world!")
1749071182352:}
1749071193513:-
1749071195200:+
1749071197373:+++++++
1749071201236:quit
1749071203678:quit()
1749071206203:renew
1749071214364:newClassRepresentation(
1749071214364:)
1749071229378:goodbye <- function(){}
1749071235221:quit
1749071236951:Q
1749071256374:newconsole
1749071275584:new
1749071294770:ready
1749071299008:3=4
1749071320942:2==3
1749071327108:3>4
1749071329320:3
1749071334431:r = 3
1749071339002:r += 4
1749071340207:r
1749071373361:r = 4
1749071373362:r+= 4
1749071373362:r
1749071376218:r = 4
1749071376218:r+= 4
1749071376218:r
1749071376842:r = 4
1749071376843:r+= 4
1749071376843:r
1749071377364:r = 4
1749071377364:r+= 4
1749071377364:r
1749071378375:r = 4
1749071378375:r+= 4
1749071378375:r
1749071378919:r = 4
1749071378919:r+= 4
1749071378919:r
1749071379120:r = 4
1749071379120:r+= 4
1749071379120:r
1749071379280:r = 4
1749071379281:r+= 4
1749071379281:r
1749071379460:r = 4
1749071379460:r+= 4
1749071379460:r
1749071379632:r = 4
1749071379632:r+= 4
1749071379632:r
1749071379808:r = 4
1749071379808:r+= 4
1749071379808:r
1749071379971:r = 4
1749071379971:r+= 4
1749071379971:r
1749071382825:r = 4
1749071382826:r+= 4
1749071382826:r
1749071385986:r
1749071390713:source("~/.active-rstudio-document")
1749071426298:newConsole()
1749071480035:factorial <- function(n) {
1749071480036:if (n == 0) {
1749071480036:return(1)
1749071480036:} else {
1749071480036:return(n * factorial(n - 1))
1749071480036:}
1749071480036:}
1749071480036:result <- factorial(5)
1749071480037:print(paste("Factorial of 5 is:", result))
1749071486499:source("~/r_code.r")
1749071487350:source("~/r_code.r")
1749071487786:source("~/r_code.r")
1749071490677:source("~/r_code.r", echo = TRUE)
1749071501528:factorial <- function(n) {
1749071501528:if (n == 0) {
1749071501528:return(1)
1749071501528:} else {
1749071501529:return(n * factorial(n - 1))
1749071501529:}
1749071501529:}
1749071501530:result <- factorial(5)
1749071501530:print(paste("Factorial of 5 is:", result))
1749071507646:result <- factorial(5)
1749071507647:print(paste("Factorial of 5 is:", result))
1749071511474:result <- factorial(5)
1749071511474:print(paste("Factorial of 5 is:", result))
1749071600215:}}}
1749071636215:3+4
1749071646039:factorial <- function(n) {
1749071646039:if (n == 0) {
1749071646040:return(1)
1749071646040:} else {
1749071646040:return(n * factorial(n - 1))
1749071646040:}
1749071646041:}
1749071646041:result <- factorial(5)
1749071646048:print(paste("Factorial of 5 is:", result))
1749071732080:4+5
1749073792098:library()
1749073854238:install.packages("roxygen2","devtools")
1749073881892:install.packages("roxygen2")
1749073905197:install.packages("devtools")
1749165933838:install.packages("roxygen2")
1749166072587:sphereToRec(3,4,2)
1749166180185:library('roxygen2')
1749166183972:library()
1749166224250:install.packages("CoordinateConversions")
1749166775499:recToPolar(3,4)
1749166965451:polarToRec(5, 0.9272952)
1749167006091:recToCyl(4,3,8)
1749167050220:cylToRec(5,.6435011, 8)
1749167104608:recToSphere(9,2,11)
1749167113012:recToSphere(9,2,11)
1749167182630:recToSphere(9,2,11)
1749167245965:sphereToRec(14.3527001,0.2186689,0.6539187)
1749167276417:recToSphere(3,4,5)
1749167297853:sphereToRec(7.0710678, 0.9272952, 0.6154797)
1749167333184:cylToSphere(5,2,7)
1749167375472:spheretoCyl(8.6023253,2,0.6202495)
1749167392399:sphereToCyl(8.6023253,2,0.6202495)
1749167439869:normalize(3)
1749167458082:normalize(7)
1749167531144:normalize(23)
1749167546225:normalize <- function(a)
1749167546225:{
1749167546225:if(a > 2 * pi || a < 0)
1749167546225:{
1749167546225:print("Please ensure that angle is in RADIANS. /n
1749167546225:If necessary, use yourAngleHere*pi/180 and run again.")
1749167546226:a = (a %% 2 * pi)
1749167546226:}
1749167546226:return (a)
1749167546226:}
1749167546228:normalize(33)
1749167585798:normalize <- function(a)
1749167585798:{
1749167585798:if(a > 2 * pi || a < 0)
1749167585798:{
1749167585798:print("Please ensure that angle is in RADIANS.")
1749167585798:print("If necessary, use:")
1749167585799:print("yourAngleHere*pi/180 and run again.")
1749167585799:a = (a %% 2 * pi)
1749167585799:}
1749167585799:return (a)
1749167585799:}
1749167585800:normalize(33)
1749167689637:normalize <- function(a)
1749167689637:{
1749167689637:if(a > 2 * pi || a < 0)
1749167689637:{
1749167689637:print("Please ensure that angle is in RADIANS.")
1749167689637:print("If necessary, run again using:")
1749167689637:print("    ( (degree measure) * pi / 180 )")
1749167689637:a = (a %% 2 * pi)
1749167689638:}
1749167689638:return (a)
1749167689638:}
1749167689639:normalize(7)
1749167836665:normalize <- function(a)
1749167836665:{
1749167836665:if(a > 2 * pi || a < 0)
1749167836665:{
1749167836665:print("Please ensure that angle is in RADIANS.")
1749167836665:print("If necessary, run again using:")
1749167836665:print("    ( (degree measure) * pi / 180 )")
1749167836665:a = (a %% (2 * pi))
1749167836666:}
1749167836666:return (a)
1749167836666:}
1749167836666:normalize(7)
1749323234324:install.packages('sqldf')
1749323247410:library(sqldf)
1749328081174:install.packages("sqldf")
1749328132489:nfl = read.csv(choose.file(), header = TRUE)
1749328163339:nfl = read.csv(file.choose(), header = TRUE)
1749328226132:Shipping = read.csv(file.choose(), header = TRUE)
1749328239000:Person = read.csv(file.choose(), header = TRUE)
1749328256008:Parent = read.csv(file.choose(), header = TRUE)
1749328271160:Spouse = read.csv(file.choose(), header = TRUE)
1749328283265:Large = read.csv(file.choose(), header = TRUE)
1749328294175:Government = read.csv(file.choose(), header = TRUE)
1749328312613:TicketToRide = read.csv(file.choose(), header = TRUE)
1749328443637:# nfl = read.csv(file.choose(), header = TRUE)
1749328443637:# Shipping = read.csv(file.choose(), header = TRUE)
1749328443637:# Person = read.csv(file.choose(), header = TRUE)
1749328443637:# Parent = read.csv(file.choose(), header = TRUE)
1749328443637:# Spouse = read.csv(file.choose(), header = TRUE)
1749328443638:# Large = read.csv(file.choose(), header = TRUE)
1749328443638:# Government = read.csv(file.choose(), header = TRUE)
1749328443638:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328443638:query ="
1749328443638:SELECT *
1749328443639:FROM nfl
1749328443639:WHERE conference = 'A'
1749328443639:"
1749328443639:sqldf(query)
1749328516175:library(sqldf)
1749328528014:# nfl = read.csv(file.choose(), header = TRUE)
1749328528015:# Shipping = read.csv(file.choose(), header = TRUE)
1749328528015:# Person = read.csv(file.choose(), header = TRUE)
1749328528015:# Parent = read.csv(file.choose(), header = TRUE)
1749328528015:# Spouse = read.csv(file.choose(), header = TRUE)
1749328528015:# Large = read.csv(file.choose(), header = TRUE)
1749328528015:# Government = read.csv(file.choose(), header = TRUE)
1749328528015:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328528015:query ="
1749328528015:SELECT *
1749328528015:FROM nfl
1749328528016:WHERE conference = 'A'
1749328528016:"
1749328528016:sqldf(query)
1749328661213:# nfl = read.csv(file.choose(), header = TRUE)
1749328661214:# Shipping = read.csv(file.choose(), header = TRUE)
1749328661214:# Person = read.csv(file.choose(), header = TRUE)
1749328661214:# Parent = read.csv(file.choose(), header = TRUE)
1749328661214:# Spouse = read.csv(file.choose(), header = TRUE)
1749328661214:# Large = read.csv(file.choose(), header = TRUE)
1749328661214:# Government = read.csv(file.choose(), header = TRUE)
1749328661214:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328661215:query ="
1749328661215:SELECT team
1749328661215:FROM nfl
1749328661215:WHERE city = 'Los Angeles'
1749328661215:"
1749328661215:sqldf(query)
1749328788606:# nfl = read.csv(file.choose(), header = TRUE)
1749328788606:# Shipping = read.csv(file.choose(), header = TRUE)
1749328788606:# Person = read.csv(file.choose(), header = TRUE)
1749328788606:# Parent = read.csv(file.choose(), header = TRUE)
1749328788606:# Spouse = read.csv(file.choose(), header = TRUE)
1749328788606:# Large = read.csv(file.choose(), header = TRUE)
1749328788606:# Government = read.csv(file.choose(), header = TRUE)
1749328788606:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328788606:query ="
1749328788607:SELECT city, team
1749328788607:FROM nfl
1749328788607:WHERE W > L
1749328788607:"
1749328788608:sqldf(query)
1749328830313:# nfl = read.csv(file.choose(), header = TRUE)
1749328830313:# Shipping = read.csv(file.choose(), header = TRUE)
1749328830313:# Person = read.csv(file.choose(), header = TRUE)
1749328830313:# Parent = read.csv(file.choose(), header = TRUE)
1749328830313:# Spouse = read.csv(file.choose(), header = TRUE)
1749328830313:# Large = read.csv(file.choose(), header = TRUE)
1749328830313:# Government = read.csv(file.choose(), header = TRUE)
1749328830314:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328830314:query ="
1749328830314:SELECT city, team
1749328830314:FROM nfl
1749328830314:WHERE W > 8
1749328830314:"
1749328830314:sqldf(query)
1749328871326:# nfl = read.csv(file.choose(), header = TRUE)
1749328871326:# Shipping = read.csv(file.choose(), header = TRUE)
1749328871326:# Person = read.csv(file.choose(), header = TRUE)
1749328871326:# Parent = read.csv(file.choose(), header = TRUE)
1749328871326:# Spouse = read.csv(file.choose(), header = TRUE)
1749328871326:# Large = read.csv(file.choose(), header = TRUE)
1749328871326:# Government = read.csv(file.choose(), header = TRUE)
1749328871327:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328871327:query ="
1749328871327:SELECT city, team
1749328871328:FROM nfl
1749328871328:WHERE W > L
1749328871328:"
1749328871328:queryTwo ="
1749328871328:SELECT city, team
1749328871328:FROM nfl
1749328871329:WHERE W > 8
1749328871329:"
1749328871329:sqldf(query)
1749328871349:sqldf(queryTwo)
1749328969830:# nfl = read.csv(file.choose(), header = TRUE)
1749328969830:# Shipping = read.csv(file.choose(), header = TRUE)
1749328969830:# Person = read.csv(file.choose(), header = TRUE)
1749328969830:# Parent = read.csv(file.choose(), header = TRUE)
1749328969830:# Spouse = read.csv(file.choose(), header = TRUE)
1749328969831:# Large = read.csv(file.choose(), header = TRUE)
1749328969831:# Government = read.csv(file.choose(), header = TRUE)
1749328969831:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328969831:query ="
1749328969831:SELECT city, team
1749328969831:FROM nfl
1749328969831:WHERE conference = 'A' AND division = 'E'
1749328969832:"
1749328969832:sqldf(query)
1749328998502:# nfl = read.csv(file.choose(), header = TRUE)
1749328998502:# Shipping = read.csv(file.choose(), header = TRUE)
1749328998502:# Person = read.csv(file.choose(), header = TRUE)
1749328998502:# Parent = read.csv(file.choose(), header = TRUE)
1749328998502:# Spouse = read.csv(file.choose(), header = TRUE)
1749328998502:# Large = read.csv(file.choose(), header = TRUE)
1749328998502:# Government = read.csv(file.choose(), header = TRUE)
1749328998503:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328998503:query ="
1749328998503:SELECT city, team, divW, divL, divT
1749328998503:FROM nfl
1749328998503:WHERE conference = 'A' AND division = 'E'
1749328998504:"
1749328998504:sqldf(query)
1749329027306:# nfl = read.csv(file.choose(), header = TRUE)
1749329027306:# Shipping = read.csv(file.choose(), header = TRUE)
1749329027306:# Person = read.csv(file.choose(), header = TRUE)
1749329027306:# Parent = read.csv(file.choose(), header = TRUE)
1749329027306:# Spouse = read.csv(file.choose(), header = TRUE)
1749329027307:# Large = read.csv(file.choose(), header = TRUE)
1749329027307:# Government = read.csv(file.choose(), header = TRUE)
1749329027307:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329027308:query ="
1749329027308:SELECT city, team, divW, divL, divT, W, L, T
1749329027308:FROM nfl
1749329027309:WHERE conference = 'A' AND division = 'E'
1749329027309:"
1749329027309:sqldf(query)
1749329083702:# nfl = read.csv(file.choose(), header = TRUE)
1749329083702:# Shipping = read.csv(file.choose(), header = TRUE)
1749329083702:# Person = read.csv(file.choose(), header = TRUE)
1749329083702:# Parent = read.csv(file.choose(), header = TRUE)
1749329083702:# Spouse = read.csv(file.choose(), header = TRUE)
1749329083702:# Large = read.csv(file.choose(), header = TRUE)
1749329083702:# Government = read.csv(file.choose(), header = TRUE)
1749329083702:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329083703:query ="
1749329083703:SELECT city, team, W, L, T
1749329083703:FROM nfl
1749329083703:WHERE homeW > homeL OR roadW > roadL
1749329083703:"
1749329083703:sqldf(query)
1749329094165:# nfl = read.csv(file.choose(), header = TRUE)
1749329094165:# Shipping = read.csv(file.choose(), header = TRUE)
1749329094165:# Person = read.csv(file.choose(), header = TRUE)
1749329094165:# Parent = read.csv(file.choose(), header = TRUE)
1749329094165:# Spouse = read.csv(file.choose(), header = TRUE)
1749329094165:# Large = read.csv(file.choose(), header = TRUE)
1749329094165:# Government = read.csv(file.choose(), header = TRUE)
1749329094165:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329094166:query ="
1749329094166:SELECT city, team, W, L, T
1749329094166:FROM nfl
1749329094166:WHERE homeW > homeL or roadW > roadL
1749329094166:"
1749329094166:sqldf(query)
1749329131859:# nfl = read.csv(file.choose(), header = TRUE)
1749329131859:# Shipping = read.csv(file.choose(), header = TRUE)
1749329131859:# Person = read.csv(file.choose(), header = TRUE)
1749329131859:# Parent = read.csv(file.choose(), header = TRUE)
1749329131860:# Spouse = read.csv(file.choose(), header = TRUE)
1749329131860:# Large = read.csv(file.choose(), header = TRUE)
1749329131860:# Government = read.csv(file.choose(), header = TRUE)
1749329131860:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329131860:query ="
1749329131860:select team from nfl where not(city = 'New England')
1749329131860:"
1749329131861:sqldf(query)
1749329139792:query ="
1749329139792:select team from nfl where not(city = 'New EnGLand')
1749329139792:"
1749329143521:# nfl = read.csv(file.choose(), header = TRUE)
1749329143521:# Shipping = read.csv(file.choose(), header = TRUE)
1749329143521:# Person = read.csv(file.choose(), header = TRUE)
1749329143521:# Parent = read.csv(file.choose(), header = TRUE)
1749329143521:# Spouse = read.csv(file.choose(), header = TRUE)
1749329143522:# Large = read.csv(file.choose(), header = TRUE)
1749329143522:# Government = read.csv(file.choose(), header = TRUE)
1749329143522:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329143523:query ="
1749329143523:select team from nfl where not(city = 'New EnGLand')
1749329143523:"
1749329143524:sqldf(query)
1749329169555:# nfl = read.csv(file.choose(), header = TRUE)
1749329169555:# Shipping = read.csv(file.choose(), header = TRUE)
1749329169555:# Person = read.csv(file.choose(), header = TRUE)
1749329169555:# Parent = read.csv(file.choose(), header = TRUE)
1749329169555:# Spouse = read.csv(file.choose(), header = TRUE)
1749329169555:# Large = read.csv(file.choose(), header = TRUE)
1749329169555:# Government = read.csv(file.choose(), header = TRUE)
1749329169556:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329169556:query ="
1749329169556:select team from nfl where not(city = 'New England')
1749329169556:"
1749329169557:sqldf(query)
1749329322884:# nfl = read.csv(file.choose(), header = TRUE)
1749329322884:# Shipping = read.csv(file.choose(), header = TRUE)
1749329322884:# Person = read.csv(file.choose(), header = TRUE)
1749329322885:# Parent = read.csv(file.choose(), header = TRUE)
1749329322885:# Spouse = read.csv(file.choose(), header = TRUE)
1749329322885:# Large = read.csv(file.choose(), header = TRUE)
1749329322885:# Government = read.csv(file.choose(), header = TRUE)
1749329322885:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329322885:query ="
1749329322885:select distinct converence, division
1749329322885:"
1749329322885:sqldf(query)
1749329329729:# nfl = read.csv(file.choose(), header = TRUE)
1749329329729:# Shipping = read.csv(file.choose(), header = TRUE)
1749329329729:# Person = read.csv(file.choose(), header = TRUE)
1749329329729:# Parent = read.csv(file.choose(), header = TRUE)
1749329329729:# Spouse = read.csv(file.choose(), header = TRUE)
1749329329729:# Large = read.csv(file.choose(), header = TRUE)
1749329329729:# Government = read.csv(file.choose(), header = TRUE)
1749329329729:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329329730:query ="
1749329329730:select distinct conference, division
1749329329730:"
1749329329730:sqldf(query)
1749329369396:names(nfl)
1749329377282:# nfl = read.csv(file.choose(), header = TRUE)
1749329377282:# Shipping = read.csv(file.choose(), header = TRUE)
1749329377282:# Person = read.csv(file.choose(), header = TRUE)
1749329377283:# Parent = read.csv(file.choose(), header = TRUE)
1749329377283:# Spouse = read.csv(file.choose(), header = TRUE)
1749329377283:# Large = read.csv(file.choose(), header = TRUE)
1749329377283:# Government = read.csv(file.choose(), header = TRUE)
1749329377283:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329377283:query ="
1749329377283:select distinct Conference, division
1749329377283:"
1749329377283:sqldf(query)
1749329409355:query ="
1749329409355:select distinct conference, division
1749329409355:"
1749329419885:# nfl = read.csv(file.choose(), header = TRUE)
1749329419885:# Shipping = read.csv(file.choose(), header = TRUE)
1749329419885:# Person = read.csv(file.choose(), header = TRUE)
1749329419885:# Parent = read.csv(file.choose(), header = TRUE)
1749329419885:# Spouse = read.csv(file.choose(), header = TRUE)
1749329419885:# Large = read.csv(file.choose(), header = TRUE)
1749329419885:# Government = read.csv(file.choose(), header = TRUE)
1749329419885:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329419886:query ="
1749329419886:select distinct conference, division
1749329419886:FROM nfl
1749329419886:"
1749329419887:sqldf(query)
1749329445590:# nfl = read.csv(file.choose(), header = TRUE)
1749329445590:# Shipping = read.csv(file.choose(), header = TRUE)
1749329445590:# Person = read.csv(file.choose(), header = TRUE)
1749329445591:# Parent = read.csv(file.choose(), header = TRUE)
1749329445591:# Spouse = read.csv(file.choose(), header = TRUE)
1749329445591:# Large = read.csv(file.choose(), header = TRUE)
1749329445591:# Government = read.csv(file.choose(), header = TRUE)
1749329445591:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329445591:query ="
1749329445591:select  conference, division
1749329445591:FROM nfl
1749329445592:"
1749329445592:sqldf(query)
1749329496746:# nfl = read.csv(file.choose(), header = TRUE)
1749329496746:# Shipping = read.csv(file.choose(), header = TRUE)
1749329496746:# Person = read.csv(file.choose(), header = TRUE)
1749329496746:# Parent = read.csv(file.choose(), header = TRUE)
1749329496746:# Spouse = read.csv(file.choose(), header = TRUE)
1749329496746:# Large = read.csv(file.choose(), header = TRUE)
1749329496747:# Government = read.csv(file.choose(), header = TRUE)
1749329496747:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329496747:query ="
1749329496747:select city
1749329496748:FROM nfl
1749329496748:where city like 'W%'
1749329496748:"
1749329496748:sqldf(query)
1749329555002:# nfl = read.csv(file.choose(), header = TRUE)
1749329555002:# Shipping = read.csv(file.choose(), header = TRUE)
1749329555002:# Person = read.csv(file.choose(), header = TRUE)
1749329555002:# Parent = read.csv(file.choose(), header = TRUE)
1749329555002:# Spouse = read.csv(file.choose(), header = TRUE)
1749329555002:# Large = read.csv(file.choose(), header = TRUE)
1749329555002:# Government = read.csv(file.choose(), header = TRUE)
1749329555002:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329555002:query ="
1749329555002:select city
1749329555003:FROM nfl
1749329555003:where city like '%s'
1749329555003:"
1749329555003:sqldf(query)
1749329610615:# nfl = read.csv(file.choose(), header = TRUE)
1749329610615:# Shipping = read.csv(file.choose(), header = TRUE)
1749329610615:# Person = read.csv(file.choose(), header = TRUE)
1749329610615:# Parent = read.csv(file.choose(), header = TRUE)
1749329610616:# Spouse = read.csv(file.choose(), header = TRUE)
1749329610616:# Large = read.csv(file.choose(), header = TRUE)
1749329610616:# Government = read.csv(file.choose(), header = TRUE)
1749329610616:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329610616:query ="
1749329610616:select city
1749329610616:FROM nfl
1749329610616:where city like '%ee%'
1749329610616:"
1749329610618:sqldf(query)
1749329626823:# nfl = read.csv(file.choose(), header = TRUE)
1749329626823:# Shipping = read.csv(file.choose(), header = TRUE)
1749329626823:# Person = read.csv(file.choose(), header = TRUE)
1749329626823:# Parent = read.csv(file.choose(), header = TRUE)
1749329626823:# Spouse = read.csv(file.choose(), header = TRUE)
1749329626823:# Large = read.csv(file.choose(), header = TRUE)
1749329626823:# Government = read.csv(file.choose(), header = TRUE)
1749329626823:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329626824:query ="
1749329626824:select city
1749329626824:FROM nfl
1749329626824:where team like '%ee%'
1749329626824:"
1749329626824:sqldf(query)
1749329648573:# nfl = read.csv(file.choose(), header = TRUE)
1749329648573:# Shipping = read.csv(file.choose(), header = TRUE)
1749329648573:# Person = read.csv(file.choose(), header = TRUE)
1749329648573:# Parent = read.csv(file.choose(), header = TRUE)
1749329648574:# Spouse = read.csv(file.choose(), header = TRUE)
1749329648574:# Large = read.csv(file.choose(), header = TRUE)
1749329648574:# Government = read.csv(file.choose(), header = TRUE)
1749329648574:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329648574:query ="
1749329648574:select city
1749329648574:FROM nfl
1749329648574:where team like '_ets'
1749329648574:"
1749329648575:sqldf(query)
1749329657685:# nfl = read.csv(file.choose(), header = TRUE)
1749329657685:# Shipping = read.csv(file.choose(), header = TRUE)
1749329657685:# Person = read.csv(file.choose(), header = TRUE)
1749329657685:# Parent = read.csv(file.choose(), header = TRUE)
1749329657685:# Spouse = read.csv(file.choose(), header = TRUE)
1749329657685:# Large = read.csv(file.choose(), header = TRUE)
1749329657686:# Government = read.csv(file.choose(), header = TRUE)
1749329657686:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329657686:query ="
1749329657686:select city, team
1749329657686:FROM nfl
1749329657686:where team like '_ets'
1749329657686:"
1749329657687:sqldf(query)
1749329735343:# nfl = read.csv(file.choose(), header = TRUE)
1749329735343:# Shipping = read.csv(file.choose(), header = TRUE)
1749329735343:# Person = read.csv(file.choose(), header = TRUE)
1749329735343:# Parent = read.csv(file.choose(), header = TRUE)
1749329735343:# Spouse = read.csv(file.choose(), header = TRUE)
1749329735343:# Large = read.csv(file.choose(), header = TRUE)
1749329735343:# Government = read.csv(file.choose(), header = TRUE)
1749329735343:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329735344:query ="
1749329735344:select city, team
1749329735344:FROM nfl
1749329735344:where w between 7 and 9
1749329735344:"
1749329735345:sqldf(query)
1749329759018:# nfl = read.csv(file.choose(), header = TRUE)
1749329759018:# Shipping = read.csv(file.choose(), header = TRUE)
1749329759018:# Person = read.csv(file.choose(), header = TRUE)
1749329759018:# Parent = read.csv(file.choose(), header = TRUE)
1749329759018:# Spouse = read.csv(file.choose(), header = TRUE)
1749329759018:# Large = read.csv(file.choose(), header = TRUE)
1749329759019:# Government = read.csv(file.choose(), header = TRUE)
1749329759019:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329759019:query ="
1749329759019:select city, team, w , l
1749329759019:FROM nfl
1749329759019:where w between 7 and 9
1749329759019:"
1749329759019:sqldf(query)
1749330147863:# nfl = read.csv(file.choose(), header = TRUE)
1749330147863:# Shipping = read.csv(file.choose(), header = TRUE)
1749330147863:# Person = read.csv(file.choose(), header = TRUE)
1749330147863:# Parent = read.csv(file.choose(), header = TRUE)
1749330147863:# Spouse = read.csv(file.choose(), header = TRUE)
1749330147863:# Large = read.csv(file.choose(), header = TRUE)
1749330147863:# Government = read.csv(file.choose(), header = TRUE)
1749330147863:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330147863:query ="
1749330147864:select *
1749330147864:from Shipping
1749330147864:where values not null
1749330147864:"
1749330147864:sqldf(query)
1749330322005:names(Shipping)
1749330683052:# nfl = read.csv(file.choose(), header = TRUE)
1749330683052:# Shipping = read.csv(file.choose(), header = TRUE)
1749330683053:# Person = read.csv(file.choose(), header = TRUE)
1749330683053:# Parent = read.csv(file.choose(), header = TRUE)
1749330683054:# Spouse = read.csv(file.choose(), header = TRUE)
1749330683054:# Large = read.csv(file.choose(), header = TRUE)
1749330683054:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330683054:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330683054:## surface area
1749330683054:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330683055:## volume
1749330683055:v = "Height * Length * Width"
1749330683056:## density
1749330683056:d = "Mass / Volume"
1749330683056:query =
1749330683056:"
1749330683056:SELECT *
1749330683056:FROM shipping
1749330683056:WHERE Weight = ''
1749330683057:"
1749330683057:sqldf(query)
1749330691301:# nfl = read.csv(file.choose(), header = TRUE)
1749330691301:# Shipping = read.csv(file.choose(), header = TRUE)
1749330691301:# Person = read.csv(file.choose(), header = TRUE)
1749330691301:# Parent = read.csv(file.choose(), header = TRUE)
1749330691301:# Spouse = read.csv(file.choose(), header = TRUE)
1749330691301:# Large = read.csv(file.choose(), header = TRUE)
1749330691301:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330691301:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330691302:## surface area
1749330691302:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330691302:## volume
1749330691303:v = "Height * Length * Width"
1749330691303:## density
1749330691303:d = "Mass / Volume"
1749330691304:query =
1749330691304:"
1749330691304:SELECT *
1749330691304:FROM Shipping
1749330691304:WHERE Weight = ''
1749330691304:"
1749330691304:sqldf(query)
1749330732271:# nfl = read.csv(file.choose(), header = TRUE)
1749330732271:# Shipping = read.csv(file.choose(), header = TRUE)
1749330732271:# Person = read.csv(file.choose(), header = TRUE)
1749330732271:# Parent = read.csv(file.choose(), header = TRUE)
1749330732271:# Spouse = read.csv(file.choose(), header = TRUE)
1749330732271:# Large = read.csv(file.choose(), header = TRUE)
1749330732271:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330732271:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330732272:## surface area
1749330732272:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330732272:## volume
1749330732272:v = "Height * Length * Width"
1749330732273:## density
1749330732273:d = "Mass / Volume"
1749330732273:query =
1749330732273:"
1749330732274:SELECT  *
1749330732274:FROM    Shipping
1749330732274:WHERE   Mname = ''
1749330732274:"
1749330732274:sqldf(query)
1749330762637:# nfl = read.csv(file.choose(), header = TRUE)
1749330762637:# Shipping = read.csv(file.choose(), header = TRUE)
1749330762637:# Person = read.csv(file.choose(), header = TRUE)
1749330762637:# Parent = read.csv(file.choose(), header = TRUE)
1749330762637:# Spouse = read.csv(file.choose(), header = TRUE)
1749330762637:# Large = read.csv(file.choose(), header = TRUE)
1749330762637:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330762638:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330762638:## surface area
1749330762638:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330762638:## volume
1749330762638:v = "Height * Length * Width"
1749330762638:## density
1749330762639:d = "Mass / Volume"
1749330762639:query =
1749330762639:"
1749330762639:SELECT  *
1749330762639:FROM    Shipping
1749330762640:WHERE   Mname != ''
1749330762640:"
1749330762640:sqldf(query)
1749330815332:# nfl = read.csv(file.choose(), header = TRUE)
1749330815332:# Shipping = read.csv(file.choose(), header = TRUE)
1749330815333:# Person = read.csv(file.choose(), header = TRUE)
1749330815333:# Parent = read.csv(file.choose(), header = TRUE)
1749330815333:# Spouse = read.csv(file.choose(), header = TRUE)
1749330815333:# Large = read.csv(file.choose(), header = TRUE)
1749330815333:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330815333:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330815334:## surface area
1749330815334:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330815334:## volume
1749330815334:v = "Height * Length * Width"
1749330815334:## density
1749330815335:d = "Mass / Volume"
1749330815335:query =
1749330815335:"
1749330815335:SELECT  Fname, Mname, Lname
1749330815335:FROM    Shipping
1749330815335:WHERE   Mname != ''
1749330815336:"
1749330815336:sqldf(query)
1749330824842:# nfl = read.csv(file.choose(), header = TRUE)
1749330824842:# Shipping = read.csv(file.choose(), header = TRUE)
1749330824842:# Person = read.csv(file.choose(), header = TRUE)
1749330824842:# Parent = read.csv(file.choose(), header = TRUE)
1749330824842:# Spouse = read.csv(file.choose(), header = TRUE)
1749330824842:# Large = read.csv(file.choose(), header = TRUE)
1749330824842:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330824842:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330824842:## surface area
1749330824843:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330824844:## volume
1749330824844:v = "Height * Length * Width"
1749330824844:## density
1749330824844:d = "Mass / Volume"
1749330824844:query =
1749330824845:"
1749330824845:SELECT  Fname, Mname, Lname
1749330824845:FROM    Shipping
1749330824845:WHERE   Mname = ''
1749330824845:"
1749330824845:sqldf(query)
1749330840224:# nfl = read.csv(file.choose(), header = TRUE)
1749330840224:# Shipping = read.csv(file.choose(), header = TRUE)
1749330840224:# Person = read.csv(file.choose(), header = TRUE)
1749330840224:# Parent = read.csv(file.choose(), header = TRUE)
1749330840224:# Spouse = read.csv(file.choose(), header = TRUE)
1749330840224:# Large = read.csv(file.choose(), header = TRUE)
1749330840224:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330840224:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330840225:## surface area
1749330840225:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330840225:## volume
1749330840225:v = "Height * Length * Width"
1749330840226:## density
1749330840226:d = "Mass / Volume"
1749330840226:query =
1749330840226:"
1749330840226:SELECT  Fname, Mname, Lname
1749330840226:FROM    Shipping
1749330840226:WHERE   Mname == ''
1749330840226:"
1749330840226:sqldf(query)
1749330891278:# nfl = read.csv(file.choose(), header = TRUE)
1749330891278:# Shipping = read.csv(file.choose(), header = TRUE)
1749330891279:# Person = read.csv(file.choose(), header = TRUE)
1749330891279:# Parent = read.csv(file.choose(), header = TRUE)
1749330891279:# Spouse = read.csv(file.choose(), header = TRUE)
1749330891279:# Large = read.csv(file.choose(), header = TRUE)
1749330891279:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330891280:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330891280:## surface area
1749330891280:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330891281:## volume
1749330891281:v = "Height * Length * Width"
1749330891281:## density
1749330891281:d = "Mass / Volume"
1749330891282:query =
1749330891282:"
1749330891282:SELECT  Lname
1749330891282:FROM    Shipping
1749330891282:WHERE   Mname == ''
1749330891282:"
1749330891282:sqldf(query)
1749330913030:# nfl = read.csv(file.choose(), header = TRUE)
1749330913030:# Shipping = read.csv(file.choose(), header = TRUE)
1749330913030:# Person = read.csv(file.choose(), header = TRUE)
1749330913030:# Parent = read.csv(file.choose(), header = TRUE)
1749330913030:# Spouse = read.csv(file.choose(), header = TRUE)
1749330913030:# Large = read.csv(file.choose(), header = TRUE)
1749330913030:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330913031:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330913031:## surface area
1749330913031:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330913031:## volume
1749330913032:v = "Height * Length * Width"
1749330913032:## density
1749330913032:d = "Mass / Volume"
1749330913032:query =
1749330913033:"
1749330913033:SELECT  *
1749330913033:FROM    Shipping
1749330913033:WHERE   Lname == 'Herman'
1749330913034:"
1749330913034:sqldf(query)
1749330921922:# nfl = read.csv(file.choose(), header = TRUE)
1749330921923:# Shipping = read.csv(file.choose(), header = TRUE)
1749330921923:# Person = read.csv(file.choose(), header = TRUE)
1749330921923:# Parent = read.csv(file.choose(), header = TRUE)
1749330921923:# Spouse = read.csv(file.choose(), header = TRUE)
1749330921923:# Large = read.csv(file.choose(), header = TRUE)
1749330921923:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330921923:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330921924:## surface area
1749330921924:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330921924:## volume
1749330921924:v = "Height * Length * Width"
1749330921924:## density
1749330921924:d = "Mass / Volume"
1749330921924:query =
1749330921925:"
1749330921925:SELECT  *
1749330921925:FROM    Shipping
1749330921925:WHERE   Lname = 'Herman'
1749330921925:"
1749330921925:sqldf(query)
1749330937888:# nfl = read.csv(file.choose(), header = TRUE)
1749330937888:# Shipping = read.csv(file.choose(), header = TRUE)
1749330937888:# Person = read.csv(file.choose(), header = TRUE)
1749330937889:# Parent = read.csv(file.choose(), header = TRUE)
1749330937889:# Spouse = read.csv(file.choose(), header = TRUE)
1749330937889:# Large = read.csv(file.choose(), header = TRUE)
1749330937889:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330937889:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330937889:## surface area
1749330937889:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330937890:## volume
1749330937890:v = "Height * Length * Width"
1749330937891:## density
1749330937891:d = "Mass / Volume"
1749330937891:query =
1749330937891:"
1749330937891:SELECT  *
1749330937891:FROM    Shipping
1749330937891:WHERE   Lname = 'Herman \xa0'
1749330937891:"
1749330937892:sqldf(query)
1749330955726:# nfl = read.csv(file.choose(), header = TRUE)
1749330955726:# Shipping = read.csv(file.choose(), header = TRUE)
1749330955726:# Person = read.csv(file.choose(), header = TRUE)
1749330955726:# Parent = read.csv(file.choose(), header = TRUE)
1749330955726:# Spouse = read.csv(file.choose(), header = TRUE)
1749330955726:# Large = read.csv(file.choose(), header = TRUE)
1749330955726:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330955726:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330955726:## surface area
1749330955727:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330955727:## volume
1749330955727:v = "Height * Length * Width"
1749330955728:## density
1749330955728:d = "Mass / Volume"
1749330955728:query =
1749330955728:"
1749330955729:SELECT  *
1749330955729:FROM    Shipping
1749330955729:WHERE   Lname = 'Herman'
1749330955729:"
1749330955729:sqldf(query)
1749331000194:# nfl = read.csv(file.choose(), header = TRUE)
1749331000194:# Shipping = read.csv(file.choose(), header = TRUE)
1749331000194:# Person = read.csv(file.choose(), header = TRUE)
1749331000195:# Parent = read.csv(file.choose(), header = TRUE)
1749331000195:# Spouse = read.csv(file.choose(), header = TRUE)
1749331000195:# Large = read.csv(file.choose(), header = TRUE)
1749331000195:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331000195:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331000195:## surface area
1749331000195:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331000196:## volume
1749331000196:v = "Height * Length * Width"
1749331000196:## density
1749331000196:d = "Mass / Volume"
1749331000196:query =
1749331000196:"
1749331000196:SELECT  Lname
1749331000197:FROM    Shipping
1749331000197:WHERE   Lname = '%Herman%'
1749331000197:"
1749331000197:sqldf(query)
1749331035376:# nfl = read.csv(file.choose(), header = TRUE)
1749331035376:# Shipping = read.csv(file.choose(), header = TRUE)
1749331035376:# Person = read.csv(file.choose(), header = TRUE)
1749331035376:# Parent = read.csv(file.choose(), header = TRUE)
1749331035376:# Spouse = read.csv(file.choose(), header = TRUE)
1749331035376:# Large = read.csv(file.choose(), header = TRUE)
1749331035376:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331035376:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331035377:## surface area
1749331035377:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331035377:## volume
1749331035377:v = "Height * Length * Width"
1749331035377:## density
1749331035377:d = "Mass / Volume"
1749331035377:query =
1749331035377:"
1749331035378:SELECT    Lname
1749331035378:FROM      Shipping
1749331035378:Order by  OriginState
1749331035378:"
1749331035378:sqldf(query)
1749331056492:# nfl = read.csv(file.choose(), header = TRUE)
1749331056492:# Shipping = read.csv(file.choose(), header = TRUE)
1749331056492:# Person = read.csv(file.choose(), header = TRUE)
1749331056492:# Parent = read.csv(file.choose(), header = TRUE)
1749331056493:# Spouse = read.csv(file.choose(), header = TRUE)
1749331056493:# Large = read.csv(file.choose(), header = TRUE)
1749331056493:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331056493:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331056493:## surface area
1749331056493:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331056493:## volume
1749331056493:v = "Height * Length * Width"
1749331056494:## density
1749331056494:d = "Mass / Volume"
1749331056495:query =
1749331056495:"
1749331056495:SELECT    OriginState
1749331056495:FROM      Shipping
1749331056495:Order by  OriginState
1749331056495:"
1749331056496:sqldf(query)
1749331074556:# nfl = read.csv(file.choose(), header = TRUE)
1749331074556:# Shipping = read.csv(file.choose(), header = TRUE)
1749331074556:# Person = read.csv(file.choose(), header = TRUE)
1749331074556:# Parent = read.csv(file.choose(), header = TRUE)
1749331074557:# Spouse = read.csv(file.choose(), header = TRUE)
1749331074557:# Large = read.csv(file.choose(), header = TRUE)
1749331074557:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331074557:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331074557:## surface area
1749331074557:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331074558:## volume
1749331074558:v = "Height * Length * Width"
1749331074558:## density
1749331074558:d = "Mass / Volume"
1749331074558:query =
1749331074559:"
1749331074559:SELECT OriginState
1749331074559:FROM Shipping
1749331074559:Order by OriginState
1749331074559:"
1749331074559:sqldf(query)
1749331085734:# nfl = read.csv(file.choose(), header = TRUE)
1749331085735:# Shipping = read.csv(file.choose(), header = TRUE)
1749331085735:# Person = read.csv(file.choose(), header = TRUE)
1749331085735:# Parent = read.csv(file.choose(), header = TRUE)
1749331085735:# Spouse = read.csv(file.choose(), header = TRUE)
1749331085735:# Large = read.csv(file.choose(), header = TRUE)
1749331085735:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331085735:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331085735:## surface area
1749331085735:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331085738:## volume
1749331085738:v = "Height * Length * Width"
1749331085738:## density
1749331085738:d = "Mass / Volume"
1749331085739:query =
1749331085739:"
1749331085739:SELECT OriginState, Lname
1749331085739:FROM Shipping
1749331085739:Order by OriginState
1749331085739:"
1749331085739:sqldf(query)
1749331101012:Shipping
1749331212350:# nfl = read.csv(file.choose(), header = TRUE)
1749331212350:# Shipping = read.csv(file.choose(), header = TRUE)
1749331212350:# Person = read.csv(file.choose(), header = TRUE)
1749331212350:# Parent = read.csv(file.choose(), header = TRUE)
1749331212350:# Spouse = read.csv(file.choose(), header = TRUE)
1749331212350:# Large = read.csv(file.choose(), header = TRUE)
1749331212350:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331212351:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331212351:## surface area
1749331212351:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331212352:## volume
1749331212352:v = "Height * Length * Width"
1749331212352:## density
1749331212353:d = "Mass / Volume"
1749331212353:query =
1749331212353:"
1749331212353:SELECT OriginState, State
1749331212353:FROM Shipping
1749331212353:Order by OriginState, State
1749331212353:"
1749331212354:sqldf(query)
1749331223516:# nfl = read.csv(file.choose(), header = TRUE)
1749331223517:# Shipping = read.csv(file.choose(), header = TRUE)
1749331223517:# Person = read.csv(file.choose(), header = TRUE)
1749331223517:# Parent = read.csv(file.choose(), header = TRUE)
1749331223517:# Spouse = read.csv(file.choose(), header = TRUE)
1749331223517:# Large = read.csv(file.choose(), header = TRUE)
1749331223517:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331223517:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331223517:## surface area
1749331223517:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331223519:## volume
1749331223520:v = "Height * Length * Width"
1749331223520:## density
1749331223520:d = "Mass / Volume"
1749331223521:query =
1749331223521:"
1749331223521:SELECT OriginState, State
1749331223521:FROM Shipping
1749331223522:Order by OriginState, State
1749331223522:Where OriginState = State
1749331223522:"
1749331223522:sqldf(query)
1749331235188:# nfl = read.csv(file.choose(), header = TRUE)
1749331235188:# Shipping = read.csv(file.choose(), header = TRUE)
1749331235188:# Person = read.csv(file.choose(), header = TRUE)
1749331235189:# Parent = read.csv(file.choose(), header = TRUE)
1749331235189:# Spouse = read.csv(file.choose(), header = TRUE)
1749331235189:# Large = read.csv(file.choose(), header = TRUE)
1749331235189:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331235189:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331235189:## surface area
1749331235189:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331235189:## volume
1749331235189:v = "Height * Length * Width"
1749331235189:## density
1749331235190:d = "Mass / Volume"
1749331235190:query =
1749331235190:"
1749331235190:SELECT OriginState, State
1749331235190:FROM Shipping
1749331235190:Order by OriginState, State
1749331235191:WHERE OriginState == State
1749331235191:"
1749331235191:sqldf(query)
1749331243847:# nfl = read.csv(file.choose(), header = TRUE)
1749331243847:# Shipping = read.csv(file.choose(), header = TRUE)
1749331243847:# Person = read.csv(file.choose(), header = TRUE)
1749331243847:# Parent = read.csv(file.choose(), header = TRUE)
1749331243847:# Spouse = read.csv(file.choose(), header = TRUE)
1749331243847:# Large = read.csv(file.choose(), header = TRUE)
1749331243847:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331243848:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331243848:## surface area
1749331243848:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331243848:## volume
1749331243848:v = "Height * Length * Width"
1749331243848:## density
1749331243849:d = "Mass / Volume"
1749331243849:query =
1749331243849:"
1749331243849:SELECT OriginState, State
1749331243849:FROM Shipping
1749331243849:Order by OriginState, State
1749331243849:"
1749331243849:sqldf(query)
1749331314760:# nfl = read.csv(file.choose(), header = TRUE)
1749331314761:# Shipping = read.csv(file.choose(), header = TRUE)
1749331314761:# Person = read.csv(file.choose(), header = TRUE)
1749331314761:# Parent = read.csv(file.choose(), header = TRUE)
1749331314761:# Spouse = read.csv(file.choose(), header = TRUE)
1749331314761:# Large = read.csv(file.choose(), header = TRUE)
1749331314761:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331314761:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331314761:## surface area
1749331314761:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331314762:## volume
1749331314762:v = "Height * Length * Width"
1749331314762:## density
1749331314763:d = "Mass / Volume"
1749331314763:query =
1749331314763:"
1749331314763:SELECT OriginState, State
1749331314764:FROM Shipping
1749331314764:where OriginState = State
1749331314764:"
1749331314765:sqldf(query)
1749331332456:# nfl = read.csv(file.choose(), header = TRUE)
1749331332456:# Shipping = read.csv(file.choose(), header = TRUE)
1749331332456:# Person = read.csv(file.choose(), header = TRUE)
1749331332456:# Parent = read.csv(file.choose(), header = TRUE)
1749331332456:# Spouse = read.csv(file.choose(), header = TRUE)
1749331332456:# Large = read.csv(file.choose(), header = TRUE)
1749331332456:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331332456:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331332456:## surface area
1749331332457:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331332457:## volume
1749331332457:v = "Height * Length * Width"
1749331332457:## density
1749331332457:d = "Mass / Volume"
1749331332457:query =
1749331332458:"
1749331332458:SELECT OriginState, State
1749331332458:FROM Shipping
1749331332458:order by OriginState, State
1749331332458:"
1749331332459:sqldf(query)
1749331391531:# nfl = read.csv(file.choose(), header = TRUE)
1749331391531:# Shipping = read.csv(file.choose(), header = TRUE)
1749331391531:# Person = read.csv(file.choose(), header = TRUE)
1749331391531:# Parent = read.csv(file.choose(), header = TRUE)
1749331391531:# Spouse = read.csv(file.choose(), header = TRUE)
1749331391531:# Large = read.csv(file.choose(), header = TRUE)
1749331391531:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331391531:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331391532:## surface area
1749331391532:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331391532:## volume
1749331391532:v = "Height * Length * Width"
1749331391532:## density
1749331391532:d = "Mass / Volume"
1749331391533:query =
1749331391533:"
1749331391533:SELECT count(*)
1749331391533:FROM Shipping
1749331391533:Where weight = ''
1749331391534:"
1749331391534:sqldf(query)
1749331406544:# nfl = read.csv(file.choose(), header = TRUE)
1749331406545:# Shipping = read.csv(file.choose(), header = TRUE)
1749331406545:# Person = read.csv(file.choose(), header = TRUE)
1749331406545:# Parent = read.csv(file.choose(), header = TRUE)
1749331406545:# Spouse = read.csv(file.choose(), header = TRUE)
1749331406545:# Large = read.csv(file.choose(), header = TRUE)
1749331406545:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331406545:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331406545:## surface area
1749331406545:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331406546:## volume
1749331406546:v = "Height * Length * Width"
1749331406546:## density
1749331406546:d = "Mass / Volume"
1749331406546:query =
1749331406547:"
1749331406547:SELECT count(*)
1749331406547:FROM Shipping
1749331406547:Where OriginState = State
1749331406547:"
1749331406547:sqldf(query)
1749331459463:# nfl = read.csv(file.choose(), header = TRUE)
1749331459463:# Shipping = read.csv(file.choose(), header = TRUE)
1749331459463:# Person = read.csv(file.choose(), header = TRUE)
1749331459463:# Parent = read.csv(file.choose(), header = TRUE)
1749331459463:# Spouse = read.csv(file.choose(), header = TRUE)
1749331459463:# Large = read.csv(file.choose(), header = TRUE)
1749331459463:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331459463:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331459464:## surface area
1749331459464:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331459464:## volume
1749331459464:v = "Height * Length * Width"
1749331459464:## density
1749331459465:d = "Mass / Volume"
1749331459465:query =
1749331459465:"
1749331459466:SELECT count(*)
1749331459466:FROM Shipping
1749331459466:Group by OriginState
1749331459467:Order by OriginState
1749331459467:"
1749331459467:sqldf(query)
1749331483611:# nfl = read.csv(file.choose(), header = TRUE)
1749331483611:# Shipping = read.csv(file.choose(), header = TRUE)
1749331483611:# Person = read.csv(file.choose(), header = TRUE)
1749331483611:# Parent = read.csv(file.choose(), header = TRUE)
1749331483611:# Spouse = read.csv(file.choose(), header = TRUE)
1749331483612:# Large = read.csv(file.choose(), header = TRUE)
1749331483612:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331483612:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331483612:## surface area
1749331483612:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331483612:## volume
1749331483612:v = "Height * Length * Width"
1749331483613:## density
1749331483613:d = "Mass / Volume"
1749331483613:query =
1749331483613:"
1749331483614:SELECT count(*) state
1749331483614:FROM Shipping
1749331483614:Group by OriginState
1749331483614:Order by OriginState
1749331483614:"
1749331483615:sqldf(query)
1749331494592:# nfl = read.csv(file.choose(), header = TRUE)
1749331494592:# Shipping = read.csv(file.choose(), header = TRUE)
1749331494592:# Person = read.csv(file.choose(), header = TRUE)
1749331494592:# Parent = read.csv(file.choose(), header = TRUE)
1749331494593:# Spouse = read.csv(file.choose(), header = TRUE)
1749331494593:# Large = read.csv(file.choose(), header = TRUE)
1749331494593:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331494593:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331494594:## surface area
1749331494594:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331494594:## volume
1749331494594:v = "Height * Length * Width"
1749331494595:## density
1749331494595:d = "Mass / Volume"
1749331494595:query =
1749331494595:"
1749331494595:SELECT count(*) Name
1749331494595:FROM Shipping
1749331494596:Group by OriginState
1749331494596:Order by OriginState
1749331494596:"
1749331494596:sqldf(query)
1749331516989:# nfl = read.csv(file.choose(), header = TRUE)
1749331516989:# Shipping = read.csv(file.choose(), header = TRUE)
1749331516989:# Person = read.csv(file.choose(), header = TRUE)
1749331516989:# Parent = read.csv(file.choose(), header = TRUE)
1749331516989:# Spouse = read.csv(file.choose(), header = TRUE)
1749331516989:# Large = read.csv(file.choose(), header = TRUE)
1749331516989:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331516989:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331516989:## surface area
1749331516989:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331516991:## volume
1749331516991:v = "Height * Length * Width"
1749331516992:## density
1749331516992:d = "Mass / Volume"
1749331516993:query =
1749331516993:"
1749331516993:SELECT state, count(*)
1749331516993:FROM Shipping
1749331516994:Group by OriginState
1749331516994:Order by OriginState
1749331516994:"
1749331516994:sqldf(query)
1749331526534:# nfl = read.csv(file.choose(), header = TRUE)
1749331526535:# Shipping = read.csv(file.choose(), header = TRUE)
1749331526535:# Person = read.csv(file.choose(), header = TRUE)
1749331526535:# Parent = read.csv(file.choose(), header = TRUE)
1749331526535:# Spouse = read.csv(file.choose(), header = TRUE)
1749331526535:# Large = read.csv(file.choose(), header = TRUE)
1749331526536:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331526536:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331526536:## surface area
1749331526536:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331526536:## volume
1749331526536:v = "Height * Length * Width"
1749331526536:## density
1749331526537:d = "Mass / Volume"
1749331526537:query =
1749331526537:"
1749331526537:SELECT state, count(*), originstate
1749331526537:FROM Shipping
1749331526538:Group by OriginState
1749331526538:Order by OriginState
1749331526538:"
1749331526538:sqldf(query)
1749331635296:# nfl = read.csv(file.choose(), header = TRUE)
1749331635296:# Shipping = read.csv(file.choose(), header = TRUE)
1749331635296:# Person = read.csv(file.choose(), header = TRUE)
1749331635297:# Parent = read.csv(file.choose(), header = TRUE)
1749331635297:# Spouse = read.csv(file.choose(), header = TRUE)
1749331635297:# Large = read.csv(file.choose(), header = TRUE)
1749331635297:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331635297:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331635297:## surface area
1749331635297:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331635298:## volume
1749331635298:v = "Height * Length * Width"
1749331635298:## density
1749331635298:d = "Mass / Volume"
1749331635298:query =
1749331635298:"
1749331635298:select originstate, count(*) as NumberOfPackages
1749331635299:from shipping
1749331635299:group by originstate
1749331635299:order by numberofpackages desc
1749331635299:"
1749331635299:sqldf(query)
1749331642576:# nfl = read.csv(file.choose(), header = TRUE)
1749331642576:# Shipping = read.csv(file.choose(), header = TRUE)
1749331642576:# Person = read.csv(file.choose(), header = TRUE)
1749331642576:# Parent = read.csv(file.choose(), header = TRUE)
1749331642577:# Spouse = read.csv(file.choose(), header = TRUE)
1749331642577:# Large = read.csv(file.choose(), header = TRUE)
1749331642577:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331642577:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331642577:## surface area
1749331642577:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331642577:## volume
1749331642577:v = "Height * Length * Width"
1749331642577:## density
1749331642577:d = "Mass / Volume"
1749331642578:query =
1749331642578:"
1749331642578:select originstate, count(*) as NumberOfPackages
1749331642578:from Shipping
1749331642578:group by originstate
1749331642578:order by numberofpackages desc
1749331642579:"
1749331642579:sqldf(query)
1749331668926:names(Shipping)
1749331715610:# nfl = read.csv(file.choose(), header = TRUE)
1749331715610:# Shipping = read.csv(file.choose(), header = TRUE)
1749331715610:# Person = read.csv(file.choose(), header = TRUE)
1749331715610:# Parent = read.csv(file.choose(), header = TRUE)
1749331715610:# Spouse = read.csv(file.choose(), header = TRUE)
1749331715610:# Large = read.csv(file.choose(), header = TRUE)
1749331715610:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331715610:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331715610:## surface area
1749331715611:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331715611:## volume
1749331715611:v = "Height * Length * Width"
1749331715611:## density
1749331715611:d = "Mass / Volume"
1749331715612:query =
1749331715612:"
1749331715612:select originstate, count(*) as NumberOfPackages
1749331715612:from Shipping
1749331715612:group by originstate, state
1749331715612:order by numberofpackages desc
1749331715612:"
1749331715612:sqldf(query)
1749331735199:# nfl = read.csv(file.choose(), header = TRUE)
1749331735200:# Shipping = read.csv(file.choose(), header = TRUE)
1749331735200:# Person = read.csv(file.choose(), header = TRUE)
1749331735200:# Parent = read.csv(file.choose(), header = TRUE)
1749331735200:# Spouse = read.csv(file.choose(), header = TRUE)
1749331735200:# Large = read.csv(file.choose(), header = TRUE)
1749331735200:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331735200:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331735200:## surface area
1749331735200:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331735201:## volume
1749331735201:v = "Height * Length * Width"
1749331735201:## density
1749331735201:d = "Mass / Volume"
1749331735202:query =
1749331735202:"
1749331735202:select originstate, state, count(*) as NumberOfPackages
1749331735202:from Shipping
1749331735202:group by originstate, state
1749331735202:order by numberofpackages desc
1749331735203:"
1749331735203:sqldf(query)
1749331883315:# nfl = read.csv(file.choose(), header = TRUE)
1749331883315:# Shipping = read.csv(file.choose(), header = TRUE)
1749331883315:# Person = read.csv(file.choose(), header = TRUE)
1749331883315:# Parent = read.csv(file.choose(), header = TRUE)
1749331883315:# Spouse = read.csv(file.choose(), header = TRUE)
1749331883315:# Large = read.csv(file.choose(), header = TRUE)
1749331883315:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331883316:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331883316:## surface area
1749331883316:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331883317:## volume
1749331883317:v = "Height * Length * Width"
1749331883318:## density
1749331883318:d = "Mass / Volume"
1749331883318:query =
1749331883318:"
1749331883319:select originstate, state, count(*) as NumberOfPackages
1749331883319:from Shipping
1749331883319:Group by originstate, state
1749331883319:having count(*) > 1
1749331883319:order by NumberOfPackages desc
1749331883320:"
1749331883320:sqldf(query)
1749332092266:# nfl = read.csv(file.choose(), header = TRUE)
1749332092266:# Shipping = read.csv(file.choose(), header = TRUE)
1749332092266:# Person = read.csv(file.choose(), header = TRUE)
1749332092266:# Parent = read.csv(file.choose(), header = TRUE)
1749332092267:# Spouse = read.csv(file.choose(), header = TRUE)
1749332092267:# Large = read.csv(file.choose(), header = TRUE)
1749332092267:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332092267:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332092267:## surface area
1749332092267:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332092268:## volume
1749332092268:v = "Height * Length * Width"
1749332092268:## density
1749332092268:d = "Mass / Volume"
1749332092268:query =
1749332092269:"
1749332092269:select " + sa + " as SurfaceArea
1749332092269:from Shipping
1749332092269:"
1749332112524:# nfl = read.csv(file.choose(), header = TRUE)
1749332112524:# Shipping = read.csv(file.choose(), header = TRUE)
1749332112524:# Person = read.csv(file.choose(), header = TRUE)
1749332112525:# Parent = read.csv(file.choose(), header = TRUE)
1749332112525:# Spouse = read.csv(file.choose(), header = TRUE)
1749332112525:# Large = read.csv(file.choose(), header = TRUE)
1749332112525:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332112526:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332112526:## surface area
1749332112526:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332112526:## volume
1749332112527:v = "Height * Length * Width"
1749332112527:## density
1749332112527:d = "Mass / Volume"
1749332112528:query =
1749332112528:"
1749332112528:select 2 * Height * Width + 2 * Length * Width * 2 * Height * Length
1749332112529:from Shipping
1749332112529:"
1749332112529:sqldf(query)
1749332133017:# nfl = read.csv(file.choose(), header = TRUE)
1749332133017:# Shipping = read.csv(file.choose(), header = TRUE)
1749332133017:# Person = read.csv(file.choose(), header = TRUE)
1749332133017:# Parent = read.csv(file.choose(), header = TRUE)
1749332133017:# Spouse = read.csv(file.choose(), header = TRUE)
1749332133017:# Large = read.csv(file.choose(), header = TRUE)
1749332133017:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332133017:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332133018:## surface area
1749332133018:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332133018:## volume
1749332133018:v = "Height * Length * Width"
1749332133019:## density
1749332133019:d = "Mass / Volume"
1749332133019:query =
1749332133019:"
1749332133019:select 2 * Height * Width + 2 * Length * Width * 2 * Height * Length
1749332133020:as SurfaceArea
1749332133020:from Shipping
1749332133020:"
1749332133020:sqldf(query)
1749332179381:names(Shipping)
1749332510059:# nfl = read.csv(file.choose(), header = TRUE)
1749332510059:# Shipping = read.csv(file.choose(), header = TRUE)
1749332510059:# Person = read.csv(file.choose(), header = TRUE)
1749332510059:# Parent = read.csv(file.choose(), header = TRUE)
1749332510060:# Spouse = read.csv(file.choose(), header = TRUE)
1749332510060:# Large = read.csv(file.choose(), header = TRUE)
1749332510060:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332510060:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332510060:## surface area
1749332510060:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332510060:## volume
1749332510060:v = "Height * Length * Width"
1749332510060:## density
1749332510060:d = "Mass / Volume"
1749332510061:query =
1749332510061:"
1749332510061:select sum(Weight)/sum(length*width*height) as density
1749332510062:from Shipping
1749332510062:"
1749332510062:sqldf(query)
1749332522737:# nfl = read.csv(file.choose(), header = TRUE)
1749332522737:# Shipping = read.csv(file.choose(), header = TRUE)
1749332522737:# Person = read.csv(file.choose(), header = TRUE)
1749332522737:# Parent = read.csv(file.choose(), header = TRUE)
1749332522737:# Spouse = read.csv(file.choose(), header = TRUE)
1749332522738:# Large = read.csv(file.choose(), header = TRUE)
1749332522738:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332522738:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332522738:## surface area
1749332522738:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332522739:## volume
1749332522739:v = "Height * Length * Width"
1749332522739:## density
1749332522739:d = "Mass / Volume"
1749332522739:query =
1749332522739:"
1749332522739:select sum(Weight)/sum(Length*Width*Height) as density
1749332522739:from Shipping
1749332522739:"
1749332522740:sqldf(query)
1749332530226:# nfl = read.csv(file.choose(), header = TRUE)
1749332530227:# Shipping = read.csv(file.choose(), header = TRUE)
1749332530227:# Person = read.csv(file.choose(), header = TRUE)
1749332530227:# Parent = read.csv(file.choose(), header = TRUE)
1749332530227:# Spouse = read.csv(file.choose(), header = TRUE)
1749332530227:# Large = read.csv(file.choose(), header = TRUE)
1749332530227:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332530228:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332530228:## surface area
1749332530229:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332530229:## volume
1749332530229:v = "Height * Length * Width"
1749332530229:## density
1749332530229:d = "Mass / Volume"
1749332530230:query =
1749332530230:"
1749332530230:select sum(Length*Width*Height) as density
1749332530231:from Shipping
1749332530231:"
1749332530231:sqldf(query)
1749332545816:# nfl = read.csv(file.choose(), header = TRUE)
1749332545817:# Shipping = read.csv(file.choose(), header = TRUE)
1749332545817:# Person = read.csv(file.choose(), header = TRUE)
1749332545817:# Parent = read.csv(file.choose(), header = TRUE)
1749332545817:# Spouse = read.csv(file.choose(), header = TRUE)
1749332545817:# Large = read.csv(file.choose(), header = TRUE)
1749332545817:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332545817:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332545817:## surface area
1749332545817:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332545818:## volume
1749332545818:v = "Height * Length * Width"
1749332545818:## density
1749332545818:d = "Mass / Volume"
1749332545818:query =
1749332545818:"
1749332545818:select sum(weight) + sum(Length*Width*Height) as density
1749332545819:from Shipping
1749332545819:"
1749332545819:sqldf(query)
1749332582130:# nfl = read.csv(file.choose(), header = TRUE)
1749332582131:# Shipping = read.csv(file.choose(), header = TRUE)
1749332582131:# Person = read.csv(file.choose(), header = TRUE)
1749332582131:# Parent = read.csv(file.choose(), header = TRUE)
1749332582131:# Spouse = read.csv(file.choose(), header = TRUE)
1749332582131:# Large = read.csv(file.choose(), header = TRUE)
1749332582131:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332582131:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332582131:## surface area
1749332582131:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332582131:## volume
1749332582132:v = "Height * Length * Width"
1749332582132:## density
1749332582132:d = "Mass / Volume"
1749332582133:query =
1749332582133:"
1749332582133:select (sum(weight)/sum(Length*Width*Height)) as density
1749332582133:from Shipping
1749332582133:"
1749332582134:sqldf(query)
1749332595055:# nfl = read.csv(file.choose(), header = TRUE)
1749332595056:# Shipping = read.csv(file.choose(), header = TRUE)
1749332595056:# Person = read.csv(file.choose(), header = TRUE)
1749332595056:# Parent = read.csv(file.choose(), header = TRUE)
1749332595056:# Spouse = read.csv(file.choose(), header = TRUE)
1749332595056:# Large = read.csv(file.choose(), header = TRUE)
1749332595057:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332595057:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332595057:## surface area
1749332595057:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332595057:## volume
1749332595057:v = "Height * Length * Width"
1749332595058:## density
1749332595058:d = "Mass / Volume"
1749332595058:query =
1749332595058:"
1749332595059:select float(sum(weight)/sum(Length*Width*Height)) as density
1749332595059:from Shipping
1749332595059:"
1749332595059:sqldf(query)
1749332674033:# nfl = read.csv(file.choose(), header = TRUE)
1749332674033:# Shipping = read.csv(file.choose(), header = TRUE)
1749332674033:# Person = read.csv(file.choose(), header = TRUE)
1749332674033:# Parent = read.csv(file.choose(), header = TRUE)
1749332674034:# Spouse = read.csv(file.choose(), header = TRUE)
1749332674034:# Large = read.csv(file.choose(), header = TRUE)
1749332674034:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332674035:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332674035:## surface area
1749332674035:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332674035:## volume
1749332674035:v = "Height * Length * Width"
1749332674036:## density
1749332674036:d = "Mass / Volume"
1749332674036:query =
1749332674036:"
1749332674036:select as.double(sum(weight)/sum(Length*Width*Height)) as density
1749332674037:from Shipping
1749332674037:"
1749332674037:sqldf(query)
1749332742220:Shipping$Weight = as.double(Shipping$Weight)
1749332749955:# nfl = read.csv(file.choose(), header = TRUE)
1749332749955:# Shipping = read.csv(file.choose(), header = TRUE)
1749332749955:# Person = read.csv(file.choose(), header = TRUE)
1749332749955:# Parent = read.csv(file.choose(), header = TRUE)
1749332749955:# Spouse = read.csv(file.choose(), header = TRUE)
1749332749955:# Large = read.csv(file.choose(), header = TRUE)
1749332749955:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332749955:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332749955:## surface area
1749332749955:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332749956:## volume
1749332749956:v = "Height * Length * Width"
1749332749956:## density
1749332749956:d = "Mass / Volume"
1749332749957:query =
1749332749957:"
1749332749957:select (sum(weight)/sum(Length*Width*Height)) as density
1749332749957:from Shipping
1749332749958:"
1749332749958:sqldf(query)
1749332767319:# nfl = read.csv(file.choose(), header = TRUE)
1749332767320:# Shipping = read.csv(file.choose(), header = TRUE)
1749332767320:# Person = read.csv(file.choose(), header = TRUE)
1749332767320:# Parent = read.csv(file.choose(), header = TRUE)
1749332767320:# Spouse = read.csv(file.choose(), header = TRUE)
1749332767320:# Large = read.csv(file.choose(), header = TRUE)
1749332767320:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332767320:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332767320:## surface area
1749332767320:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332767321:## volume
1749332767321:v = "Height * Length * Width"
1749332767321:## density
1749332767321:d = "Mass / Volume"
1749332767321:query =
1749332767321:"
1749332767321:select (sum(weight)/sum(Length*Width*Height)) as density
1749332767321:from Shipping
1749332767321:where originstate = 'mi'
1749332767322:"
1749332767322:sqldf(query)
1749332775958:# nfl = read.csv(file.choose(), header = TRUE)
1749332775958:# Shipping = read.csv(file.choose(), header = TRUE)
1749332775958:# Person = read.csv(file.choose(), header = TRUE)
1749332775958:# Parent = read.csv(file.choose(), header = TRUE)
1749332775958:# Spouse = read.csv(file.choose(), header = TRUE)
1749332775958:# Large = read.csv(file.choose(), header = TRUE)
1749332775958:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332775958:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332775958:## surface area
1749332775959:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332775959:## volume
1749332775959:v = "Height * Length * Width"
1749332775959:## density
1749332775960:d = "Mass / Volume"
1749332775960:query =
1749332775960:"
1749332775960:select (sum(weight)/sum(Length*Width*Height)) as density
1749332775960:from Shipping
1749332775961:where originstate = 'MI'
1749332775961:"
1749332775961:sqldf(query)
1749332901539:# nfl = read.csv(file.choose(), header = TRUE)
1749332901539:# Shipping = read.csv(file.choose(), header = TRUE)
1749332901539:# Person = read.csv(file.choose(), header = TRUE)
1749332901539:# Parent = read.csv(file.choose(), header = TRUE)
1749332901539:# Spouse = read.csv(file.choose(), header = TRUE)
1749332901540:# Large = read.csv(file.choose(), header = TRUE)
1749332901540:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332901540:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332901540:## surface area
1749332901540:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332901541:## volume
1749332901541:v = "Height * Length * Width"
1749332901541:## density
1749332901541:d = "Mass / Volume"
1749332901541:query =
1749332901542:"
1749332901542:Select Fname, Lname
1749332901542:From Shipping
1749332901542:Where Mname = ''
1749332901542:And
1749332901542:Weight In
1749332901542:(
1749332901542:Select Weight
1749332901543:From Shipping
1749332901543:Where Weight > 100000
1749332901543:)
1749332901543:"
1749332901543:sqldf(query)
1749332921440:# nfl = read.csv(file.choose(), header = TRUE)
1749332921441:# Shipping = read.csv(file.choose(), header = TRUE)
1749332921441:# Person = read.csv(file.choose(), header = TRUE)
1749332921441:# Parent = read.csv(file.choose(), header = TRUE)
1749332921441:# Spouse = read.csv(file.choose(), header = TRUE)
1749332921441:# Large = read.csv(file.choose(), header = TRUE)
1749332921441:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332921441:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332921442:## surface area
1749332921442:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332921442:## volume
1749332921443:v = "Height * Length * Width"
1749332921443:## density
1749332921443:d = "Mass / Volume"
1749332921443:query =
1749332921443:"
1749332921443:Select Fname, Lname
1749332921443:From Shipping
1749332921443:Where Mname != ''
1749332921444:And
1749332921444:Weight In
1749332921444:(
1749332921444:Select Weight
1749332921444:From Shipping
1749332921444:Where Weight > 100000
1749332921444:)
1749332921445:"
1749332921445:sqldf(query)
1749334106431:# nfl = read.csv(file.choose(), header = TRUE)
1749334106431:# Shipping = read.csv(file.choose(), header = TRUE)
1749334106431:# Person = read.csv(file.choose(), header = TRUE)
1749334106431:# Parent = read.csv(file.choose(), header = TRUE)
1749334106431:# Spouse = read.csv(file.choose(), header = TRUE)
1749334106431:# Large = read.csv(file.choose(), header = TRUE)
1749334106431:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334106432:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334106432:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334106432:## surface area
1749334106432:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334106432:## volume
1749334106432:#v = "Height * Length * Width"
1749334106432:## density
1749334106432:#d = "Mass / Volume"
1749334106432:query =
1749334106432:"
1749334106432:select Person1.Name, Person2.Name
1749334106432:From Person As Person1, Person As Person2
1749334106433:Where Person1.Person != Person2.Person
1749334106433:"
1749334106433:sqldf(query)
1749334474382:# nfl = read.csv(file.choose(), header = TRUE)
1749334474383:# Shipping = read.csv(file.choose(), header = TRUE)
1749334474383:# Person = read.csv(file.choose(), header = TRUE)
1749334474383:# Parent = read.csv(file.choose(), header = TRUE)
1749334474383:# Spouse = read.csv(file.choose(), header = TRUE)
1749334474383:# Large = read.csv(file.choose(), header = TRUE)
1749334474384:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334474384:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334474384:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334474384:## surface area
1749334474384:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334474384:## volume
1749334474385:#v = "Height * Length * Width"
1749334474385:## density
1749334474385:#d = "Mass / Volume"
1749334474385:query =
1749334474385:"
1749334474385:SELECT Parent1.Parent, Parent2.Parent
1749334474385:From Parent as Parent1
1749334474385:Inner Join
1749334474385:Parent as Parent2
1749334474385:On Parent1.Person = Paren2.Person
1749334474385:Where Parent1.Parent != Parent2.Parent
1749334474386:"
1749334474386:sqldf(query)
1749334484730:# nfl = read.csv(file.choose(), header = TRUE)
1749334484730:# Shipping = read.csv(file.choose(), header = TRUE)
1749334484730:# Person = read.csv(file.choose(), header = TRUE)
1749334484730:# Parent = read.csv(file.choose(), header = TRUE)
1749334484730:# Spouse = read.csv(file.choose(), header = TRUE)
1749334484730:# Large = read.csv(file.choose(), header = TRUE)
1749334484730:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334484730:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334484731:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334484731:## surface area
1749334484732:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334484732:## volume
1749334484732:#v = "Height * Length * Width"
1749334484732:## density
1749334484732:#d = "Mass / Volume"
1749334484732:query =
1749334484732:"
1749334484732:SELECT Parent1.Parent, Parent2.Parent
1749334484732:From Parent as Parent1
1749334484733:Inner Join
1749334484733:Parent as Parent2
1749334484733:On Parent1.Person = Parent2.Person
1749334484733:Where Parent1.Parent != Parent2.Parent
1749334484733:"
1749334484733:sqldf(query)
1749334505587:# nfl = read.csv(file.choose(), header = TRUE)
1749334505587:# Shipping = read.csv(file.choose(), header = TRUE)
1749334505587:# Person = read.csv(file.choose(), header = TRUE)
1749334505587:# Parent = read.csv(file.choose(), header = TRUE)
1749334505587:# Spouse = read.csv(file.choose(), header = TRUE)
1749334505587:# Large = read.csv(file.choose(), header = TRUE)
1749334505587:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334505587:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334505587:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334505587:## surface area
1749334505588:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334505588:## volume
1749334505588:#v = "Height * Length * Width"
1749334505588:## density
1749334505589:#d = "Mass / Volume"
1749334505590:query =
1749334505590:"
1749334505590:SELECT Parent1.Parent, Parent2.Parent, name
1749334505590:From Parent as Parent1
1749334505590:Inner Join
1749334505590:Parent as Parent2
1749334505590:On Parent1.Person = Parent2.Person
1749334505590:Where Parent1.Parent != Parent2.Parent
1749334505590:"
1749334505590:sqldf(query)
1749334541524:# nfl = read.csv(file.choose(), header = TRUE)
1749334541525:# Shipping = read.csv(file.choose(), header = TRUE)
1749334541525:# Person = read.csv(file.choose(), header = TRUE)
1749334541525:# Parent = read.csv(file.choose(), header = TRUE)
1749334541525:# Spouse = read.csv(file.choose(), header = TRUE)
1749334541525:# Large = read.csv(file.choose(), header = TRUE)
1749334541525:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334541525:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334541525:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334541525:## surface area
1749334541525:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334541525:## volume
1749334541525:#v = "Height * Length * Width"
1749334541526:## density
1749334541526:#d = "Mass / Volume"
1749334541526:query =
1749334541526:"
1749334541526:SELECT Parent1.Parent, Parent2.Parent, Person.Name
1749334541526:From Parent as Parent1
1749334541527:Inner Join
1749334541527:Parent as Parent2
1749334541527:On Parent1.Person = Parent2.Person
1749334541527:Where Parent1.Parent != Parent2.Parent
1749334541527:"
1749334541528:sqldf(query)
1749334556913:# nfl = read.csv(file.choose(), header = TRUE)
1749334556913:# Shipping = read.csv(file.choose(), header = TRUE)
1749334556913:# Person = read.csv(file.choose(), header = TRUE)
1749334556914:# Parent = read.csv(file.choose(), header = TRUE)
1749334556914:# Spouse = read.csv(file.choose(), header = TRUE)
1749334556914:# Large = read.csv(file.choose(), header = TRUE)
1749334556914:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334556914:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334556914:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334556914:## surface area
1749334556915:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334556915:## volume
1749334556915:#v = "Height * Length * Width"
1749334556915:## density
1749334556915:#d = "Mass / Volume"
1749334556915:query =
1749334556915:"
1749334556915:SELECT Parent1.Parent, Parent2.Parent, Name.Person
1749334556916:From Parent as Parent1
1749334556916:Inner Join
1749334556916:Parent as Parent2
1749334556916:On Parent1.Person = Parent2.Person
1749334556916:Where Parent1.Parent != Parent2.Parent
1749334556916:"
1749334556916:sqldf(query)
1749334570355:# nfl = read.csv(file.choose(), header = TRUE)
1749334570355:# Shipping = read.csv(file.choose(), header = TRUE)
1749334570355:# Person = read.csv(file.choose(), header = TRUE)
1749334570356:# Parent = read.csv(file.choose(), header = TRUE)
1749334570356:# Spouse = read.csv(file.choose(), header = TRUE)
1749334570356:# Large = read.csv(file.choose(), header = TRUE)
1749334570356:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334570356:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334570356:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334570356:## surface area
1749334570356:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334570356:## volume
1749334570356:#v = "Height * Length * Width"
1749334570356:## density
1749334570357:#d = "Mass / Volume"
1749334570357:query =
1749334570357:"
1749334570357:SELECT Parent1.Parent, Parent2.Parent, Name
1749334570357:From Parent as Parent1, Person
1749334570357:Inner Join
1749334570357:Parent as Parent2
1749334570358:On Parent1.Person = Parent2.Person
1749334570358:Where Parent1.Parent != Parent2.Parent
1749334570358:"
1749334570359:sqldf(query)
1749334620954:# nfl = read.csv(file.choose(), header = TRUE)
1749334620954:# Shipping = read.csv(file.choose(), header = TRUE)
1749334620955:# Person = read.csv(file.choose(), header = TRUE)
1749334620955:# Parent = read.csv(file.choose(), header = TRUE)
1749334620955:# Spouse = read.csv(file.choose(), header = TRUE)
1749334620955:# Large = read.csv(file.choose(), header = TRUE)
1749334620955:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334620955:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334620955:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334620955:## surface area
1749334620955:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334620955:## volume
1749334620955:#v = "Height * Length * Width"
1749334620955:## density
1749334620956:#d = "Mass / Volume"
1749334620956:query =
1749334620956:"
1749334620957:SELECT Parent1.Parent, Name, Parent2.Parent, Name, Name
1749334620957:From Parent as Parent1, Person
1749334620957:Inner Join
1749334620957:Parent as Parent2
1749334620957:On Parent1.Person = Parent2.Person
1749334620958:Where Parent1.Parent != Parent2.Parent
1749334620958:"
1749334620958:sqldf(query)
1749334644440:# nfl = read.csv(file.choose(), header = TRUE)
1749334644441:# Shipping = read.csv(file.choose(), header = TRUE)
1749334644441:# Person = read.csv(file.choose(), header = TRUE)
1749334644441:# Parent = read.csv(file.choose(), header = TRUE)
1749334644441:# Spouse = read.csv(file.choose(), header = TRUE)
1749334644441:# Large = read.csv(file.choose(), header = TRUE)
1749334644442:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334644442:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334644442:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334644442:## surface area
1749334644443:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334644443:## volume
1749334644443:#v = "Height * Length * Width"
1749334644443:## density
1749334644443:#d = "Mass / Volume"
1749334644443:query =
1749334644443:"
1749334644444:SELECT Parent1.Parent, Parent2.Parent
1749334644444:From Parent as Parent1, Person, Parent
1749334644444:Inner Join
1749334644444:Parent as Parent2
1749334644444:On Parent1.Person = Parent2.Person
1749334644444:Where Parent1.Parent != Parent2.Parent
1749334644444:"
1749334644445:sqldf(query)
1749334653843:# nfl = read.csv(file.choose(), header = TRUE)
1749334653843:# Shipping = read.csv(file.choose(), header = TRUE)
1749334653844:# Person = read.csv(file.choose(), header = TRUE)
1749334653844:# Parent = read.csv(file.choose(), header = TRUE)
1749334653844:# Spouse = read.csv(file.choose(), header = TRUE)
1749334653844:# Large = read.csv(file.choose(), header = TRUE)
1749334653844:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334653844:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334653844:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334653844:## surface area
1749334653844:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334653844:## volume
1749334653845:#v = "Height * Length * Width"
1749334653845:## density
1749334653845:#d = "Mass / Volume"
1749334653845:query =
1749334653845:"
1749334653845:SELECT Parent1.Parent, Parent2.Parent
1749334653845:From Parent as Parent1
1749334653845:Inner Join
1749334653846:Parent as Parent2
1749334653846:On Parent1.Person = Parent2.Person
1749334653846:Where Parent1.Parent != Parent2.Parent
1749334653846:"
1749334653846:sqldf(query)
1749334713137:# nfl = read.csv(file.choose(), header = TRUE)
1749334713137:# Shipping = read.csv(file.choose(), header = TRUE)
1749334713137:# Person = read.csv(file.choose(), header = TRUE)
1749334713137:# Parent = read.csv(file.choose(), header = TRUE)
1749334713137:# Spouse = read.csv(file.choose(), header = TRUE)
1749334713137:# Large = read.csv(file.choose(), header = TRUE)
1749334713137:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334713138:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334713138:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334713138:## surface area
1749334713138:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334713138:## volume
1749334713138:#v = "Height * Length * Width"
1749334713138:## density
1749334713138:#d = "Mass / Volume"
1749334713138:query =
1749334713138:"
1749334713139:SELECT Distinct Parent1.Parent, Parent2.Parent
1749334713139:From Parent as Parent1
1749334713139:Inner Join
1749334713139:Parent as Parent2
1749334713139:On Parent1.Person = Parent2.Person
1749334713139:Where Parent1.Parent != Parent2.Parent
1749334713139:"
1749334713140:sqldf(query)
1749335194921:# nfl = read.csv(file.choose(), header = TRUE)
1749335194921:# Shipping = read.csv(file.choose(), header = TRUE)
1749335194921:# Person = read.csv(file.choose(), header = TRUE)
1749335194921:# Parent = read.csv(file.choose(), header = TRUE)
1749335194921:# Spouse = read.csv(file.choose(), header = TRUE)
1749335194921:# Large = read.csv(file.choose(), header = TRUE)
1749335194921:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335194921:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335194921:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335194922:## surface area
1749335194922:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335194923:## volume
1749335194923:#v = "Height * Length * Width"
1749335194923:## density
1749335194923:#d = "Mass / Volume"
1749335194924:query =
1749335194924:"
1749335194924:SELECT Distinct Parent1.Parent, Parent2.Parent
1749335194924:From Parent as Parent1
1749335194924:Inner Join
1749335194924:Parent as Parent2
1749335194924:On (Parent1.Person = Parent2.Person)
1749335194924:Inner Join
1749335194925:Person as Person1
1749335194925:On
1749335194925:(Parent1.Parent = Person1.Person)
1749335194925:Inner Joine Person as Person2
1749335194925:On
1749335194925:(Parent2.Parent = Person2.Person)
1749335194925:Where Parent1.Parent != Parent2.Parent
1749335194925:And
1749335194925:Person1.Sex = 'F'
1749335194926:And
1749335194926:Person2.Sex = 'M'
1749335194926:"
1749335194926:sqldf(query)
1749335228720:# nfl = read.csv(file.choose(), header = TRUE)
1749335228720:# Shipping = read.csv(file.choose(), header = TRUE)
1749335228720:# Person = read.csv(file.choose(), header = TRUE)
1749335228720:# Parent = read.csv(file.choose(), header = TRUE)
1749335228721:# Spouse = read.csv(file.choose(), header = TRUE)
1749335228721:# Large = read.csv(file.choose(), header = TRUE)
1749335228721:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335228721:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335228721:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335228721:## surface area
1749335228721:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335228721:## volume
1749335228721:#v = "Height * Length * Width"
1749335228721:## density
1749335228721:#d = "Mass / Volume"
1749335228722:query =
1749335228722:"
1749335228722:SELECT Distinct Parent1.Parent, Parent2.Parent
1749335228722:From Parent AS Parent1
1749335228722:Inner Join
1749335228722:Parent AS Parent2
1749335228723:On (Parent1.Person = Parent2.Person)
1749335228723:Inner Join
1749335228723:Person AS Person1
1749335228723:On
1749335228723:(Parent1.Parent = Person1.Person)
1749335228723:Inner Joine Person AS Person2
1749335228724:On
1749335228724:(Parent2.Parent = Person2.Person)
1749335228724:Where Parent1.Parent != Parent2.Parent
1749335228724:And
1749335228724:Person1.Sex = 'F'
1749335228724:And
1749335228725:Person2.Sex = 'M'
1749335228725:"
1749335228725:sqldf(query)
1749335251240:# nfl = read.csv(file.choose(), header = TRUE)
1749335251240:# Shipping = read.csv(file.choose(), header = TRUE)
1749335251240:# Person = read.csv(file.choose(), header = TRUE)
1749335251240:# Parent = read.csv(file.choose(), header = TRUE)
1749335251240:# Spouse = read.csv(file.choose(), header = TRUE)
1749335251240:# Large = read.csv(file.choose(), header = TRUE)
1749335251240:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335251240:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335251241:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335251241:## surface area
1749335251241:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335251241:## volume
1749335251241:#v = "Height * Length * Width"
1749335251241:## density
1749335251241:#d = "Mass / Volume"
1749335251242:query =
1749335251242:"
1749335251242:SELECT Distinct Parent1.Parent, Parent2.Parent
1749335251243:From Parent as Parent1
1749335251243:Inner Join
1749335251243:Parent as Parent2
1749335251243:On (Parent1.Person = Parent2.Person)
1749335251243:Inner Join
1749335251244:Person as Person1
1749335251244:On
1749335251244:(Parent1.Parent = Person1.Person)
1749335251244:Inner Join Person as Person2
1749335251244:On
1749335251245:(Parent2.Parent = Person2.Person)
1749335251245:Where Parent1.Parent != Parent2.Parent
1749335251245:And
1749335251245:Person1.Sex = 'F'
1749335251245:And
1749335251246:Person2.Sex = 'M'
1749335251246:"
1749335251246:sqldf(query)
1749335347004:## confusing as fuck
1749335347004:query =
1749335347004:"
1749335347004:SELECT Distinct Person1.Name, Person2.Name
1749335347004:From Parent as Parent1
1749335347004:Inner Join
1749335347004:Parent as Parent2
1749335347004:On (Parent1.Person = Parent2.Person)
1749335347004:Inner Join
1749335347005:Person as Person1
1749335347005:On
1749335347005:(Parent1.Parent = Person1.Person)
1749335347005:Inner Join Person as Person2
1749335347005:On
1749335347005:(Parent2.Parent = Person2.Person)
1749335347006:Where Parent1.Parent != Parent2.Parent
1749335347006:And
1749335347006:Person1.Sex = 'F'
1749335347006:And
1749335347006:Person2.Sex = 'M'
1749335347007:"
1749335347007:sqldf(query)
1749335675111:# nfl = read.csv(file.choose(), header = TRUE)
1749335675112:# Shipping = read.csv(file.choose(), header = TRUE)
1749335675112:# Person = read.csv(file.choose(), header = TRUE)
1749335675112:# Parent = read.csv(file.choose(), header = TRUE)
1749335675113:# Spouse = read.csv(file.choose(), header = TRUE)
1749335675113:# Large = read.csv(file.choose(), header = TRUE)
1749335675113:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335675113:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335675113:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335675114:## surface area
1749335675114:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335675114:## volume
1749335675114:#v = "Height * Length * Width"
1749335675115:## density
1749335675115:#d = "Mass / Volume"
1749335675115:query =
1749335675115:"
1749335675115:select person1.name, person2.name
1749335675116:from person as person1
1749335675116:left outer join
1749335675116:parent
1749335675116:on (person1.person = parent.parent)
1749335675116:left outer join
1749335675116:person as person2
1749335675116:on
1749335675116:(parent.person = person2.person)
1749335675116:where person1.sex = 'f'
1749335675117:order by person1.person
1749335675117:"
1749335675117:sqldf(query)
1749335683977:# nfl = read.csv(file.choose(), header = TRUE)
1749335683977:# Shipping = read.csv(file.choose(), header = TRUE)
1749335683977:# Person = read.csv(file.choose(), header = TRUE)
1749335683977:# Parent = read.csv(file.choose(), header = TRUE)
1749335683977:# Spouse = read.csv(file.choose(), header = TRUE)
1749335683977:# Large = read.csv(file.choose(), header = TRUE)
1749335683978:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335683978:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335683978:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335683978:## surface area
1749335683978:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335683978:## volume
1749335683978:#v = "Height * Length * Width"
1749335683978:## density
1749335683979:#d = "Mass / Volume"
1749335683979:query =
1749335683979:"
1749335683979:select person1.name, person2.name
1749335683979:from Person as person1
1749335683979:left outer join
1749335683979:parent
1749335683979:on (person1.person = parent.parent)
1749335683980:left outer join
1749335683980:person as person2
1749335683980:on
1749335683980:(parent.person = person2.person)
1749335683980:where person1.sex = 'f'
1749335683980:order by person1.person
1749335683980:"
1749335683981:sqldf(query)
1749335880116:# nfl = read.csv(file.choose(), header = TRUE)
1749335880116:# Shipping = read.csv(file.choose(), header = TRUE)
1749335880116:# Person = read.csv(file.choose(), header = TRUE)
1749335880116:# Parent = read.csv(file.choose(), header = TRUE)
1749335880116:# Spouse = read.csv(file.choose(), header = TRUE)
1749335880116:# Large = read.csv(file.choose(), header = TRUE)
1749335880116:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335880116:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335880117:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335880117:## surface area
1749335880117:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335880117:## volume
1749335880117:#v = "Height * Length * Width"
1749335880117:## density
1749335880117:#d = "Mass / Volume"
1749335880117:query =
1749335880117:"
1749335880118:select person1.name, person2.name
1749335880118:from Person as person1
1749335880118:left outer join
1749335880118:Parent
1749335880118:on (person1.person = parent.parent)
1749335880118:left outer join
1749335880118:person as person2
1749335880118:on
1749335880118:(parent.person = person2.person)
1749335880118:where person1.sex = 'f'
1749335880119:order by person1.person
1749335880119:"
1749335880119:sqldf(query)
1749335937129:# nfl = read.csv(file.choose(), header = TRUE)
1749335937129:# Shipping = read.csv(file.choose(), header = TRUE)
1749335937129:# Person = read.csv(file.choose(), header = TRUE)
1749335937129:# Parent = read.csv(file.choose(), header = TRUE)
1749335937129:# Spouse = read.csv(file.choose(), header = TRUE)
1749335937129:# Large = read.csv(file.choose(), header = TRUE)
1749335937129:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335937129:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335937129:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335937129:## surface area
1749335937130:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335937130:## volume
1749335937130:#v = "Height * Length * Width"
1749335937130:## density
1749335937131:#d = "Mass / Volume"
1749335937131:query =
1749335937132:"
1749335937132:select person1.name, person2.name
1749335937132:from Person as Person1
1749335937132:left outer join
1749335937132:Parent
1749335937132:on (Person1.Person = Parent.Parent)
1749335937133:left outer join
1749335937133:Person as Person2
1749335937133:on
1749335937133:(Parent.Person = Person2.Person)
1749335937134:where Person1.sex = 'f'
1749335937134:order by Person1.Person
1749335937134:"
1749335937134:sqldf(query)
1749336091193:# nfl = read.csv(file.choose(), header = TRUE)
1749336091193:# Shipping = read.csv(file.choose(), header = TRUE)
1749336091193:# Person = read.csv(file.choose(), header = TRUE)
1749336091193:# Parent = read.csv(file.choose(), header = TRUE)
1749336091193:# Spouse = read.csv(file.choose(), header = TRUE)
1749336091193:# Large = read.csv(file.choose(), header = TRUE)
1749336091193:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336091193:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336091194:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336091194:## surface area
1749336091194:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336091194:## volume
1749336091194:#v = "Height * Length * Width"
1749336091194:## density
1749336091194:#d = "Mass / Volume"
1749336091195:query =
1749336091195:"
1749336091195:SELECT Person1.Name, Person2.Name
1749336091196:FROM Person AS Person1 LEFT OUTER JOIN Parent ON
1749336091196:(Person1.Person = Parent.Parent) LEFT OUTER JOIN
1749336091196:Person AS Person2 ON(Parent.Person = Person2.Person)
1749336091196:WHERE Person1.Sex = 'F'
1749336091196:ORDER BY Person1.Person
1749336091196:"
1749336091197:sqldf(query)
1749336288415:# nfl = read.csv(file.choose(), header = TRUE)
1749336288415:# Shipping = read.csv(file.choose(), header = TRUE)
1749336288415:# Person = read.csv(file.choose(), header = TRUE)
1749336288415:# Parent = read.csv(file.choose(), header = TRUE)
1749336288415:# Spouse = read.csv(file.choose(), header = TRUE)
1749336288415:# Large = read.csv(file.choose(), header = TRUE)
1749336288415:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336288416:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336288416:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336288416:## surface area
1749336288416:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336288416:## volume
1749336288416:#v = "Height * Length * Width"
1749336288417:## density
1749336288417:#d = "Mass / Volume"
1749336288417:query =
1749336288417:"
1749336288417:SELECT Spouse.Spouse1, Parent.*
1749336288417:FROM Spouse
1749336288417:RIGHT OUTER JOIN
1749336288417:Parent ON Spouse.Spouse2 = Parent.Parent
1749336288418:INNER JOIN
1749336288418:Person ON Parent.Parent = Person.Person
1749336288418:WHERE Person1.Sex = 'F'
1749336288418:ORDER BY Person1.Person
1749336288418:"
1749336288418:sqldf(query)
1749336299897:# nfl = read.csv(file.choose(), header = TRUE)
1749336299897:# Shipping = read.csv(file.choose(), header = TRUE)
1749336299897:# Person = read.csv(file.choose(), header = TRUE)
1749336299897:# Parent = read.csv(file.choose(), header = TRUE)
1749336299897:# Spouse = read.csv(file.choose(), header = TRUE)
1749336299897:# Large = read.csv(file.choose(), header = TRUE)
1749336299897:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336299897:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336299897:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336299898:## surface area
1749336299898:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336299898:## volume
1749336299898:#v = "Height * Length * Width"
1749336299898:## density
1749336299898:#d = "Mass / Volume"
1749336299899:query =
1749336299899:"
1749336299899:SELECT Spouse.Spouse1, Parent.*
1749336299899:FROM Spouse
1749336299899:RIGHT OUTER JOIN
1749336299900:Parent ON Spouse.Spouse2 = Parent.Parent
1749336299900:INNER JOIN
1749336299900:Person ON Parent.Parent = Person.Person
1749336299900:WHERE Person.Sex = 'F'
1749336299901:ORDER BY Person1.Person
1749336299901:"
1749336299901:sqldf(query)
1749336310944:# nfl = read.csv(file.choose(), header = TRUE)
1749336310944:# Shipping = read.csv(file.choose(), header = TRUE)
1749336310944:# Person = read.csv(file.choose(), header = TRUE)
1749336310944:# Parent = read.csv(file.choose(), header = TRUE)
1749336310944:# Spouse = read.csv(file.choose(), header = TRUE)
1749336310944:# Large = read.csv(file.choose(), header = TRUE)
1749336310944:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336310944:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336310944:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336310945:## surface area
1749336310945:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336310945:## volume
1749336310945:#v = "Height * Length * Width"
1749336310945:## density
1749336310945:#d = "Mass / Volume"
1749336310945:query =
1749336310945:"
1749336310945:SELECT Spouse.Spouse1, Parent.*
1749336310945:FROM Spouse
1749336310945:RIGHT OUTER JOIN
1749336310946:Parent ON Spouse.Spouse2 = Parent.Parent
1749336310946:INNER JOIN
1749336310946:Person ON Parent.Parent = Person.Person
1749336310946:WHERE Person.Sex = 'F'
1749336310947:"
1749336310947:sqldf(query)
1749336601924:# nfl = read.csv(file.choose(), header = TRUE)
1749336601924:# Shipping = read.csv(file.choose(), header = TRUE)
1749336601924:# Person = read.csv(file.choose(), header = TRUE)
1749336601925:# Parent = read.csv(file.choose(), header = TRUE)
1749336601925:# Spouse = read.csv(file.choose(), header = TRUE)
1749336601925:# Large = read.csv(file.choose(), header = TRUE)
1749336601925:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336601925:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336601925:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336601925:## surface area
1749336601925:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336601926:## volume
1749336601926:#v = "Height * Length * Width"
1749336601926:## density
1749336601926:#d = "Mass / Volume"
1749336601926:query =
1749336601926:"
1749336601926:Select Person.Name
1749336601926:From Person
1749336601926:Where Sex = 'M'
1749336601927:And Exists
1749336601927:(
1749336601927:Select Parent.Parent
1749336601927:From Parent
1749336601927:Where Person.Person = Parent.Parent
1749336601927:)
1749336601927:"
1749336601927:sqldf(query)
1749336671163:# nfl = read.csv(file.choose(), header = TRUE)
1749336671164:# Shipping = read.csv(file.choose(), header = TRUE)
1749336671164:# Person = read.csv(file.choose(), header = TRUE)
1749336671164:# Parent = read.csv(file.choose(), header = TRUE)
1749336671164:# Spouse = read.csv(file.choose(), header = TRUE)
1749336671164:# Large = read.csv(file.choose(), header = TRUE)
1749336671164:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336671164:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336671164:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336671164:## surface area
1749336671165:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336671165:## volume
1749336671165:#v = "Height * Length * Width"
1749336671165:## density
1749336671165:#d = "Mass / Volume"
1749336671165:query =
1749336671165:"
1749336671166:Select Person.Name
1749336671166:From Person
1749336671166:Where Sex = 'F'
1749336671166:And Exists
1749336671166:(
1749336671166:Select Parent.Parent
1749336671166:From Parent
1749336671166:Where Person.Person = Parent.Parent
1749336671166:)
1749336671166:"
1749336671167:sqldf(query)
1749336814903:# nfl = read.csv(file.choose(), header = TRUE)
1749336814903:# Shipping = read.csv(file.choose(), header = TRUE)
1749336814903:# Person = read.csv(file.choose(), header = TRUE)
1749336814904:# Parent = read.csv(file.choose(), header = TRUE)
1749336814904:# Spouse = read.csv(file.choose(), header = TRUE)
1749336814904:# Large = read.csv(file.choose(), header = TRUE)
1749336814904:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336814904:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336814904:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336814904:## surface area
1749336814904:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336814904:## volume
1749336814904:#v = "Height * Length * Width"
1749336814904:## density
1749336814905:#d = "Mass / Volume"
1749336814905:query =
1749336814905:"
1749336814905:Select Person.Name
1749336814905:From Person
1749336814905:Where Sex = 'F'
1749336814905:And Note Exists
1749336814905:(
1749336814906:Select Spouse.Spouse1
1749336814906:From Spouse
1749336814906:Where Person.Person = Spouse.Spouse1
1749336814906:)
1749336814906:"
1749336814906:sqldf(query)
1749336827798:# nfl = read.csv(file.choose(), header = TRUE)
1749336827799:# Shipping = read.csv(file.choose(), header = TRUE)
1749336827799:# Person = read.csv(file.choose(), header = TRUE)
1749336827799:# Parent = read.csv(file.choose(), header = TRUE)
1749336827799:# Spouse = read.csv(file.choose(), header = TRUE)
1749336827799:# Large = read.csv(file.choose(), header = TRUE)
1749336827799:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336827799:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336827799:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336827799:## surface area
1749336827799:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336827800:## volume
1749336827800:#v = "Height * Length * Width"
1749336827800:## density
1749336827800:#d = "Mass / Volume"
1749336827800:query =
1749336827800:"
1749336827801:Select Person.Name
1749336827801:From Person
1749336827801:Where Sex = 'F'
1749336827801:And Not Exists
1749336827801:(
1749336827802:Select Spouse.Spouse1
1749336827802:From Spouse
1749336827802:Where Person.Person = Spouse.Spouse1
1749336827802:)
1749336827802:"
1749336827803:sqldf(query)
1749337220723:names(Largest)
1749337236112:names(Large)
1749337419038:script =
1749337419038:"
1749337419039:select
1749337419039:*
1749337419039:from
1749337419039:Large, Government, TicketToRide
1749337419039:where
1749337419039:Like %
1749337419039:"
1749337419039:sqldf(script)
1749337428929:script =
1749337428930:"
1749337428930:select
1749337428930:*
1749337428930:from
1749337428930:Large, Government, TicketToRide
1749337428930:where
1749337428930:Like '%'
1749337428930:"
1749337428930:sqldf(script)
1749337439496:script =
1749337439496:"
1749337439496:select
1749337439496:*
1749337439496:from
1749337439496:Large, Government, TicketToRide
1749337439496:where
1749337439497:Like '%s%'
1749337439497:"
1749337439497:sqldf(script)
1749337628015:script =
1749337628015:"
1749337628015:Select State, FirstCity, County As City, 1 as RankInState
1749337628015:From Large
1749337628015:Union
1749337628015:Select State, SecondCity, Country, 2
1749337628016:From Large
1749337628016:Union
1749337628017:Select State, ThirdCity, County, 3
1749337628018:From Large
1749337628018:"
1749337628019:sqldf(script)
1749337635833:script =
1749337635833:"
1749337635833:Select State, FirstCity, County As City, 1 as RankInState
1749337635833:From Large
1749337635833:Union
1749337635833:Select State, SecondCity, Country, 2
1749337635833:From Large
1749337635833:Union
1749337635834:Select State, ThirdCity, Country, 3
1749337635834:From Large
1749337635834:"
1749337635834:sqldf(script)
1749337642266:script =
1749337642267:"
1749337642267:Select State, FirstCity, Country As City, 1 as RankInState
1749337642267:From Large
1749337642267:Union
1749337642267:Select State, SecondCity, Country, 2
1749337642267:From Large
1749337642267:Union
1749337642267:Select State, ThirdCity, Country, 3
1749337642267:From Large
1749337642268:"
1749337642268:sqldf(script)
1749337696221:script =
1749337696221:"
1749337696221:Select State, FirstCity As City, Country, 1 as RankInState
1749337696221:From Large
1749337696221:Union
1749337696221:Select State, SecondCity, Country, 2
1749337696221:From Large
1749337696222:Union
1749337696222:Select State, ThirdCity, Country, 3
1749337696222:From Large
1749337696223:"
1749337696223:sqldf(script)
1749337980685:CapitalAndLargest =
1749337980685:"
1749337980685:Select City, State, 'Capital' As Designation
1749337980685:From Government
1749337980686:Where Country = 'US'
1749337980686:Union
1749337980687:Select FirstCity, State, 'Largest' As Designation
1749337980687:From Large
1749337980687:Where Country = 'US'
1749337980687:"
1749337980688:sqldf(CapitalAndLargest)
1749337996184:names(Government)
1749338009335:Rowify =
1749338009335:"
1749338009336:Select State, FirstCity As City, Country, 1 as RankInState
1749338009336:From Large
1749338009336:Union
1749338009336:Select State, SecondCity, Country, 2
1749338009336:From Large
1749338009336:Union
1749338009337:Select State, ThirdCity, Country, 3
1749338009337:From Large
1749338009337:"
1749338009337:CapitalAndLargest =
1749338009337:"
1749338009337:Select Capital, State, 'Capital' As Designation
1749338009337:From Government
1749338009338:Where Country = 'US'
1749338009338:Union
1749338009338:Select FirstCity, State, 'Largest' As Designation
1749338009338:From Large
1749338009338:Where Country = 'US'
1749338009338:"
1749338009339:sqldf(CapitalAndLargest)
1749338032835:Rowify =
1749338032835:"
1749338032835:Select State, FirstCity As City, Country, 1 as RankInState
1749338032835:From Large
1749338032835:Union
1749338032835:Select State, SecondCity, Country, 2
1749338032835:From Large
1749338032836:Union
1749338032836:Select State, ThirdCity, Country, 3
1749338032836:From Large
1749338032836:"
1749338032836:CapitalAndLargest =
1749338032836:"
1749338032836:Select Capital, State, 'Capital' As Designation
1749338032836:From Government
1749338032836:Where Country = 'US'
1749338032837:Union
1749338032837:Select FirstCity, State, 'Largest' As Designation
1749338032837:From Large
1749338032837:Where Country = 'US'
1749338032837:Order by State
1749338032838:"
1749338032838:sqldf(CapitalAndLargest)
1749338366425:crossroads =
1749338366425:"
1749338366425:Select Capital, State
1749338366425:From Governenment
1749338366426:Intersect
1749338366426:Select FirstCity, State
1749338366426:From Large
1749338366426:"
1749338390441:crossroads =
1749338390441:"
1749338390441:Select Capital, State
1749338390441:From Governenment
1749338390441:Intersect
1749338390442:Select FirstCity, State
1749338390442:From Large
1749338390442:"
1749338390443:sqldf(crossroads)
1749338399763:crossroads =
1749338399763:"
1749338399764:Select Capital, State
1749338399764:From Government
1749338399764:Intersect
1749338399764:Select FirstCity, State
1749338399764:From Large
1749338399764:"
1749338399765:sqldf(crossroads)
1749338518667:simple =
1749338518667:"
1749338518667:Select State
1749338518667:From Government
1749338518668:Where LowerHouse = UpperHouse
1749338518668:"
1749338518669:sqldf(simple)
1749338570931:crossroads =
1749338570932:"
1749338570932:Select Capital, State
1749338570932:From Government
1749338570932:Intersect
1749338570932:Select FirstCity, State
1749338570932:From Large
1749338570932:"
1749338570932:simple =
1749338570933:"
1749338570933:Select State, Country
1749338570933:From Government
1749338570933:Where LowerHouse = UpperHouse
1749338570933:"
1749338570933:sqldf(simple)
1749338726315:crossroads =
1749338726315:"
1749338726315:Select Capital, State
1749338726315:From Government
1749338726316:Intersect
1749338726316:Select FirstCity, State
1749338726316:From Large
1749338726316:"
1749338726316:simple =
1749338726316:"
1749338726316:Select State, Country
1749338726316:From Government
1749338726316:Where LowerHouse = UpperHouse
1749338726317:"
1749338726317:complex =
1749338726317:"
1749338726317:select State
1749338726317:from Government
1749338726317:where LowerHouse = 'R'
1749338726318:Intersect
1749338726318:select State
1749338726318:from Government
1749338726318:where UpperHouse = 'R'
1749338726318:union
1749338726318:select State
1749338726318:from Government
1749338726319:where LowerHouse = 'D'
1749338726319:Intersect
1749338726319:select State
1749338726319:from Government
1749338726319:where UpperHouse = 'D'
1749338726319:"
1749338726320:sqldf(simple)
1749338750229:complex =
1749338750229:"
1749338750229:select State
1749338750229:from Government
1749338750229:where LowerHouse = 'R'
1749338750230:Intersect
1749338750230:select State
1749338750230:from Government
1749338750230:where UpperHouse = 'R'
1749338750230:union
1749338750230:select State
1749338750230:from Government
1749338750230:where LowerHouse = 'D'
1749338750230:Intersect
1749338750231:select State
1749338750231:from Government
1749338750231:where UpperHouse = 'D'
1749338750231:"
1749338753188:crossroads =
1749338753189:"
1749338753189:Select Capital, State
1749338753189:From Government
1749338753189:Intersect
1749338753189:Select FirstCity, State
1749338753189:From Large
1749338753190:"
1749338753190:simple =
1749338753191:"
1749338753191:Select State, Country
1749338753191:From Government
1749338753191:Where LowerHouse = UpperHouse
1749338753191:"
1749338753192:complex =
1749338753192:"
1749338753192:select State
1749338753192:from Government
1749338753192:where LowerHouse = 'R'
1749338753192:Intersect
1749338753192:select State
1749338753193:from Government
1749338753193:where UpperHouse = 'R'
1749338753193:union
1749338753193:select State
1749338753194:from Government
1749338753194:where LowerHouse = 'D'
1749338753194:Intersect
1749338753195:select State
1749338753195:from Government
1749338753195:where UpperHouse = 'D'
1749338753195:"
1749338753196:sqldf(complex)
1749338833521:crossroads =
1749338833521:"
1749338833521:Select Capital, State
1749338833521:From Government
1749338833522:Intersect
1749338833522:Select FirstCity, State
1749338833522:From Large
1749338833522:"
1749338833523:simple =
1749338833523:"
1749338833523:Select State, Country
1749338833523:From Government
1749338833523:Where LowerHouse = UpperHouse
1749338833523:"
1749338833523:complex =
1749338833523:"
1749338833523:select State
1749338833524:from Government
1749338833524:where LowerHouse = 'R'
1749338833524:Intersect
1749338833524:select State
1749338833524:from Government
1749338833524:where UpperHouse = 'R'
1749338833524:union
1749338833524:select State
1749338833524:from Government
1749338833525:where LowerHouse = 'D'
1749338833525:Intersect
1749338833525:select State
1749338833525:from Government
1749338833525:where UpperHouse = 'D'
1749338833525:"
1749338833526:lowercaseNotCapital =
1749338833526:"
1749338833526:Select City, State
1749338833526:From TicketToRide
1749338833526:Except
1749338833526:Select Capital, State
1749338833526:From Government
1749338833527:"
1749338833527:sqldf(lowercaseNotCapital)
1749338853156:crossroads =
1749338853156:"
1749338853156:Select Capital, State
1749338853156:From Government
1749338853156:Intersect
1749338853156:Select FirstCity, State
1749338853157:From Large
1749338853157:"
1749338853157:simple =
1749338853157:"
1749338853158:Select State, Country
1749338853158:From Government
1749338853158:Where LowerHouse = UpperHouse
1749338853158:"
1749338853158:complex =
1749338853158:"
1749338853158:select State
1749338853158:from Government
1749338853158:where LowerHouse = 'R'
1749338853159:Intersect
1749338853159:select State
1749338853159:from Government
1749338853159:where UpperHouse = 'R'
1749338853159:union
1749338853159:select State
1749338853159:from Government
1749338853159:where LowerHouse = 'D'
1749338853160:Intersect
1749338853160:select State
1749338853160:from Government
1749338853160:where UpperHouse = 'D'
1749338853160:"
1749338853160:lowercaseNotCapital =
1749338853160:"
1749338853161:Select City, State
1749338853161:From TicketToRide
1749338853161:Except
1749338853161:Select Capital, State
1749338853161:From Government
1749338853161:order by state
1749338853161:"
1749338853162:sqldf(lowercaseNotCapital)
1749339732161:install.packages("sqldf")
1749339740184:libary(sqldf)
1749339746794:library('sqldf')
1749339785527:locations = read.csv(file.select(), header=T)
1749339797087:locations = read.csv(file.choose(), header=T)
1749339828484:customers = read.csv(file.choose(),header=T)
1749339858977:flavors = read.csv(file.choose(),header=T)
1749339879137:orders = read.csv(file.choose(),header=T)
1749339905997:toppings = read.csv(fild.choose(),header=T)
1749339912408:toppings = read.csv(file.choose(),header=T)
1749340252218:## confirm all 500 orders have a first scoop
1749340252219:fiveHunFirstScoop =
1749340252219:"
1749340252219:select count(Scoop1)
1749340252219:from orders
1749340252219:"
1749340252219:sqldf(fiveHunFirstScoop)
1749340474729:## 2.) site names by sales, descending
1749340474729:mostSales =
1749340474729:"
1749340474729:select City
1749340474729:from locations
1749340474729:order by count(Site) in orders
1749340474729:"
1749340474730:sqldf(mostSales)
1749340530711:## 2.) site names by sales, descending
1749340530711:mostSales =
1749340530711:"
1749340530711:select count(Site)
1749340530712:from orders
1749340530712:order by DESC
1749340530712:"
1749340530712:sqldf(mostSales)
1749340547651:## 2.) site names by sales, descending
1749340547651:mostSales =
1749340547651:"
1749340547651:select count(Site)
1749340547652:from orders
1749340547652:order desc
1749340547652:"
1749340547652:sqldf(mostSales)
1749340568503:te names by sales, descending
1749340576942:## 2.) site names by sales, descending
1749340576943:mostSales =
1749340576943:"
1749340576943:select count(Site)
1749340576943:from orders
1749340576943:order by count DESC
1749340576943:"
1749340576943:sqldf(mostSales)
1749340588753:mostSales =
1749340588753:"
1749340588753:select count(Site)
1749340588753:from orders
1749340588754:"
1749340588754:sqldf(mostSales)
1749340628467:mostSales =
1749340628467:"
1749340628467:select distinct count(Site)
1749340628467:from orders
1749340628467:"
1749340628467:sqldf(mostSales)
1749340641031:mostSales =
1749340641031:"
1749340641031:select distinct Site
1749340641031:from orders
1749340641031:"
1749340641031:sqldf(mostSales)
1749340725090:mostSales =
1749340725091:"
1749340725091:Select distinct Site as spot
1749340725091:From orders
1749340725091:order by Count(spot)
1749340725091:"
1749340725091:sqldf(mostSales)
1749475877438:install.packages('sqldf')
1749475892759:library('sqldf')
1749475959677:locations = read.csv(file.choose(), header=T)
1749475964910:customers = read.csv(file.choose(),header=T)
1749475969861:flavors = read.csv(file.choose(),header=T)
1749475974389:orders = read.csv(file.choose(),header=T)
1749475976092:toppings = read.csv(file.choose(),header=T)
1749475993391:names(locations)
1749476037233:names(customers)
1749476061722:names(flavors)
1749476082174:names(orders)
1749476105260:names(toppings)
1749476304245:## 2.) site names by sales, descending
1749476304245:mostSales =
1749476304245:"
1749476304245:Select 1.location,
1749476304245:Count(o.ID) as TotalSales
1749476304245:From orders o
1749476304245:Join locations 1 On o.Site = 1.ID
1749476304245:Order By TotalSales DESC
1749476304246:"
1749476304246:sqldf(mostSales)
1749476384223:## 2.) site names by sales, descending
1749476384224:mostSales =
1749476384224:"
1749476384224:Select l.location,
1749476384224:Count(o.ID) as TotalSales
1749476384224:From orders o
1749476384224:Join locations l On o.Site = l.ID
1749476384224:Order By TotalSales DESC
1749476384225:"
1749476384225:sqldf(mostSales)
1749476403696:## 2.) site names by sales, descending
1749476403696:mostSales =
1749476403696:"
1749476403696:Select location,
1749476403696:Count(ID) as TotalSales
1749476403697:From orders o
1749476403697:Join locations On Site = ID
1749476403697:Order By TotalSales DESC
1749476403697:"
1749476403698:sqldf(mostSales)
1749476576065:## 2.) site names by sales, descending
1749476576065:mostSales =
1749476576065:"
1749476576065:select distinct count(sales)
1749476576065:from orders
1749476576066:"
1749476576066:sqldf(mostSales)
1749476593758:names(sales)
1749476606613:names(orders)
1749476627234:## 2.) site names by sales, descending
1749476627234:mostSales =
1749476627234:"
1749476627234:select distinct ID count(ID)
1749476627234:from orders
1749476627234:"
1749476627235:sqldf(mostSales)
1749476641986:mostSales =
1749476641986:"
1749476641986:select distinct ID count(ID)
1749476641986:from orders
1749476641987:"
1749476641987:sqldf(mostSales)
1749476661491:3-3
1749476670445:mostSales =
1749476670445:"
1749476670445:select distinct ID count(ID)
1749476670445:from orders
1749476670445:"
1749476670446:sqldf(mostSales)
1749476687281:mostSales =
1749476687281:"
1749476687281:select distinct ID count(ID)
1749476687282:from orders
1749476687282:"
1749476687282:sqldf(mostSales)
1749476708560:fiveHunFirstScoop =
1749476708560:"
1749476708560:Select count(Scoop1)
1749476708560:From orders
1749476708560:"
1749476708560:sqldf(fiveHunFirstScoop)
1749476719850:## 2.) site names by sales, descending
1749476719851:mostSales =
1749476719851:"
1749476719851:select distinct ID count(ID)
1749476719851:from orders
1749476719851:"
1749476719851:sqldf(mostSales)
1749476767876:sqldf(mostSales)
1749476783708:sqldf(mostSales)
1749476788611:sqldf(mostSales)
1749476815851:mostSales =
1749476815852:"
1749476815852:select distinct(ID) count(ID)
1749476815852:from orders
1749476815852:"
1749476815852:sqldf(mostSales)
1749476875719:mostSales =
1749476875719:"
1749476875719:select count(ID) as orderCount
1749476875719:from orders
1749476875719:"
1749476875720:sqldf(mostSales)
1749476900654:mostSales =
1749476900655:"
1749476900655:select count(distinct ID) as orderCount
1749476900655:from orders
1749476900655:"
1749476900655:sqldf(mostSales)
1749476915309:names(orders)
1749476925264:mostSales =
1749476925264:"
1749476925264:select count(distinct Site) as orderCount
1749476925265:from orders
1749476925265:"
1749476925265:sqldf(mostSales)
1749476935312:mostSales =
1749476935312:"
1749476935312:select count(Site) as orderCount
1749476935312:from orders
1749476935312:"
1749476935313:sqldf(mostSales)
1749476960578:locations
1749477025038:mostSales =
1749477025038:"
1749477025039:select
1749477025039:count(Site == 1) as SkowCount
1749477025039:count(Site == 2) as FarmCount
1749477025039:count(Site == 3) as AubCount
1749477025039:count(Site == 4) as BgrCount
1749477025039:count(Site == 5) as WtrCount
1749477025039:from orders
1749477025039:"
1749477025041:sqldf(mostSales)
1749477607737:mostSales =
1749477607738:"
1749477607738:SELECT
1749477607738:l.Location,
1749477607738:COUNT(o.ID) AS TotalOrders
1749477607738:FROM
1749477607738:orders o
1749477607738:JOIN
1749477607738:locations l ON o.Site = l.ID
1749477607739:GROUP BY
1749477607739:l.Location
1749477607739:ORDER BY
1749477607739:TotalOrders DESC;
1749477607739:"
1749477607739:sqldf(mostSales)
1749477673677:names(locations)
1749477704999:mostSales =
1749477704999:"
1749477704999:SELECT
1749477704999:l.City,
1749477704999:COUNT(o.ID) AS TotalOrders
1749477704999:FROM
1749477704999:orders o
1749477704999:JOIN
1749477705000:locations l ON o.Site = l.ID
1749477705000:GROUP BY
1749477705000:l.City
1749477705000:ORDER BY
1749477705000:TotalOrders DESC;
1749477705000:"
1749477705001:sqldf(mostSales)
1749477802347:mostSales =
1749477802347:"
1749477802347:SELECT
1749477802347:locations.City,
1749477802347:COUNT(orders.ID) AS TotalOrders
1749477802347:FROM
1749477802348:orders orders
1749477802348:JOIN
1749477802348:locations locations ON order.Site = location.ID
1749477802348:GROUP BY
1749477802349:location.City
1749477802349:ORDER BY
1749477802349:TotalOrders DESC;
1749477802349:"
1749477802349:sqldf(mostSales)
1749477812298:mostSales =
1749477812298:"
1749477812298:SELECT
1749477812298:locations.City,
1749477812299:COUNT(orders.ID) AS TotalOrders
1749477812299:FROM
1749477812299:orders orders
1749477812299:JOIN
1749477812299:locations locations ON orders.Site = location.ID
1749477812299:GROUP BY
1749477812299:location.City
1749477812300:ORDER BY
1749477812300:TotalOrders DESC;
1749477812300:"
1749477812300:sqldf(mostSales)
1749477826430:mostSales =
1749477826430:"
1749477826431:SELECT
1749477826431:locations.City,
1749477826431:COUNT(orders.ID) AS TotalOrders
1749477826431:FROM
1749477826432:orders orders
1749477826432:JOIN
1749477826432:locations locations ON orders.Site = locations.ID
1749477826432:GROUP BY
1749477826432:locations.City
1749477826432:ORDER BY
1749477826432:TotalOrders DESC;
1749477826432:"
1749477826433:sqldf(mostSales)
1749478100375:names(orders)
1749478117978:names(customers)
1749478238468:mostSales =
1749478238468:"
1749478238468:Select
1749478238468:locations.City,
1749478238468:Count(orders.ID) as TotalOrders
1749478238468:From
1749478238469:orders
1749478238469:Join
1749478238469:locations locations On orders.Site = locations.ID
1749478238469:Group By
1749478238469:locations.City
1749478238469:Order By
1749478238469:TotalOrders Desc
1749478238469:"
1749478238469:sqldf(mostSales)
1749478271380:mostSales =
1749478271380:"
1749478271380:Select
1749478271380:locations.City,
1749478271380:Count(orders.ID) as TotalOrders
1749478271380:From
1749478271381:orders
1749478271381:Join
1749478271381:locations On orders.Site = locations.ID
1749478271381:Group By
1749478271381:locations.City
1749478271382:Order By
1749478271382:TotalOrders Desc
1749478271382:"
1749478271382:sqldf(mostSales)
1749478349717:names(orders)
1749478399944:timesVisited =
1749478399944:"
1749478399944:Select
1749478399944:orders.Customer
1749478399944:customers.Fname, customers.Lname
1749478399944:Count(orders.ID) as visits
1749478399944:From
1749478399945:orders
1749478399945:Join
1749478399945:customers On orders.Customer = customers.ID
1749478399945:Order By
1749478399945:visits Desc
1749478399945:"
1749478399946:sqldf(timesVisited)
1749478436915:timesVisited =
1749478436915:"
1749478436915:Select
1749478436915:orders.Customer
1749478436915:customers.Fname, customers.Lname
1749478436915:Count(orders.ID) as visits
1749478436916:From
1749478436916:orders
1749478436916:customers
1749478436916:Join
1749478436916:customers On orders.Customer = customers.ID
1749478436916:Order By
1749478436916:visits Desc
1749478436917:"
1749478436917:sqldf(timesVisited)
1749478504995:names(orders)
1749478570145:timesVisited =
1749478570145:"
1749478570145:SELECT
1749478570145:o.Customer,
1749478570146:c.Fname,
1749478570146:c.Lname,
1749478570146:COUNT(o.ID) AS visits
1749478570146:FROM
1749478570146:orders o
1749478570146:JOIN
1749478570146:customers c ON o.Customer = c.ID
1749478570146:GROUP BY
1749478570146:o.Customer, c.Fname, c.Lname
1749478570146:ORDER BY
1749478570147:visits DESC
1749478570147:"
1749478570147:"
1749478570147:result = sqldf(timesVisited)
1749478580986:timesVisited =
1749478580986:"
1749478580986:SELECT
1749478584815:timesVisited =
1749478584815:"
1749478584815:SELECT
1749478584815:o.Customer,
1749478584815:c.Fname,
1749478584815:c.Lname,
1749478584815:COUNT(o.ID) AS visits
1749478584816:FROM
1749478584816:orders o
1749478584816:JOIN
1749478584816:customers c ON o.Customer = c.ID
1749478584816:GROUP BY
1749478584816:o.Customer, c.Fname, c.Lname
1749478584816:ORDER BY
1749478584816:visits DESC
1749478584816:"
1749478584817:result = sqldf(timesVisited)
1749478591253:result
1749479161106:mostSales =
1749479161106:"
1749479161106:SELECT
1749479161106:l.City,
1749479161106:Count(o.ID) as TotalOrders
1749479161107:From
1749479161107:orders o
1749479161107:Join
1749479161107:l On o.Site = l.ID
1749479161107:Group By
1749479161107:l.City
1749479161108:Order By
1749479161108:TotalOrders Desc
1749479161108:"
1749479161108:sqldf(mostSales)
1749479181854:mostSales =
1749479181854:"
1749479181854:SELECT
1749479181854:l.City,
1749479181855:Count(o.ID) as TotalOrders
1749479181855:From
1749479181855:orders o
1749479181855:Join
1749479181855:l.locations On o.Site = l.ID
1749479181855:Group By
1749479181855:l.City
1749479181855:Order By
1749479181855:TotalOrders Desc
1749479181856:"
1749479181856:sqldf(mostSales)
1749479198319:mostSales =
1749479198319:"
1749479198319:SELECT
1749479198319:l.City,
1749479198319:Count(o.ID) as TotalOrders
1749479198320:From
1749479198320:orders o
1749479198320:Join
1749479198320:locations l On o.Site = l.ID
1749479198320:Group By
1749479198320:l.City
1749479198320:Order By
1749479198321:TotalOrders Desc
1749479198321:"
1749479198321:sqldf(mostSales)
1749479220837:fiveHunFirstScoop =
1749479220837:"
1749479220837:SELECT
1749479220837:count(Scoop1)
1749479220837:FROM
1749479220837:orders o
1749479220837:"
1749479220837:sqldf(fiveHunFirstScoop)
1749479240588:names(flavors)
1749479248805:names(toppings)
1749479340184:flavors[2]
1749479351937:flavors[2,]
1749479373584:toppings[2,]
1749479439574:nutty =
1749479439574:"
1749479439574:SELECT
1749479439574:f.Flavor,
1749479439574:t.Name
1749479439574:FROM
1749479439574:flavors f,
1749479439574:toppings t
1749479439574:WHERE
1749479439574:f.Nuts == Y or t.Nuts == Y
1749479439575:"
1749479439575:sqldf(nutty)
1749479470220:nutty =
1749479470220:"
1749479470220:SELECT
1749479470220:f.Flavor,
1749479470220:t.Name
1749479470221:FROM
1749479470221:flavors f,
1749479470221:toppings t
1749479470221:WHERE
1749479470221:f.Nuts == 'Y' or t.Nuts == 'Y'
1749479470221:"
1749479470221:sqldf(nutty)
1749479519869:flavors("Vanilla with Raspberry Ripple")
1749479528451:flavors
1749479625661:## 4.) which ice creams &/ toppings contain nuts
1749479625661:nutty =
1749479625661:"
1749479625662:SELECT
1749479625662:f.Flavor,
1749479625662:t.Name
1749479625662:FROM
1749479625662:flavors f
1749479625662:LEFT JOIN
1749479625662:toppings t ON f.ID IS NOT NULL OR t.ID IS NOT NULL
1749479625662:WHERE
1749479625662:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479625662:"
1749479625663:"
1749479625663:result = sqldf(nutty)
1749479640208:nutty =
1749479640208:"
1749479640208:SELECT
1749479643198:nutty =
1749479643198:"
1749479643198:SELECT
1749479643198:f.Flavor,
1749479643198:t.Name
1749479643199:FROM
1749479643199:flavors f
1749479643199:LEFT JOIN
1749479643199:toppings t ON f.ID IS NOT NULL OR t.ID IS NOT NULL
1749479643199:WHERE
1749479643199:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479643199:"
1749479643200:sqldf(nutty)
1749479688446:nutty =
1749479688446:"
1749479688446:SELECT
1749479688446:f.Flavor,
1749479688446:t.Name
1749479688446:FROM
1749479688446:flavors f
1749479688446:WHERE
1749479688446:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479688447:"
1749479688447:sqldf(nutty)
1749479700713:names(toppings)
1749479714721:nutty =
1749479714722:"
1749479714722:SELECT
1749479714722:f.Flavor,
1749479714722:t.Name
1749479714722:FROM
1749479714722:flavors f,
1749479714722:toppings t
1749479714723:WHERE
1749479714723:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479714723:"
1749479714723:sqldf(nutty)
1749479748506:nutty =
1749479748506:"
1749479748507:SELECT
1749479748507:f.Flavor,
1749479748507:t.Name
1749479748507:FROM
1749479748507:flavors f,
1749479748507:toppings t
1749479748507:WHERE
1749479748507:f.Nuts = 'Y' AND t.Nuts = 'Y'
1749479748507:"
1749479748508:sqldf(nutty)
1749479912842:nutty =
1749479912842:"
1749479912842:SELECT ID, Flavor AS Name, 'Flavor' AS Type
1749479912843:FROM flavors
1749479912843:WHERE Nuts = 'Y'
1749479912843:UNION
1749479912843:SELECT ID, Name, 'Topping' AS Type
1749479912843:FROM toppings
1749479912843:WHERE Nuts = 'Y';
1749479912843:"
1749479912844:sqldf(nutty)
1749479926184:nutty =
1749479926185:"
1749479926185:SELECT Flavor AS Name, 'Flavor' AS Type
1749479926185:FROM flavors
1749479926185:WHERE Nuts = 'Y'
1749479926185:UNION
1749479926185:SELECT ID, Name, 'Topping' AS Type
1749479926185:FROM toppings
1749479926185:WHERE Nuts = 'Y';
1749479926186:"
1749479926186:sqldf(nutty)
1749479937820:nutty =
1749479937820:"
1749479937820:SELECT ID Flavor AS Name, 'Flavor' AS Type
1749479937820:FROM flavors
1749479937820:WHERE Nuts = 'Y'
1749479937820:UNION
1749479937820:SELECT ID, Name, 'Topping' AS Type
1749479937821:FROM toppings
1749479937821:WHERE Nuts = 'Y';
1749479937821:"
1749479937822:sqldf(nutty)
1749479982361:nutty =
1749479982361:"
1749479982361:SELECT ID, Flavor AS Name, 'Flavor' AS Type
1749479982361:FROM flavors
1749479982361:WHERE Nuts = 'Y'
1749479982361:UNION
1749479982362:SELECT ID, Name, 'Topping' AS Type
1749479982362:FROM toppings
1749479982362:WHERE Nuts = 'Y';
1749479982362:"
1749479982362:sqldf(nutty)
1749479990892:nutty =
1749479990892:"
1749479990892:SELECT Flavor AS Name, 'Flavor' AS Type
1749479990892:FROM flavors
1749479990893:WHERE Nuts = 'Y'
1749479990893:UNION
1749479990893:SELECT ID, Name, 'Topping' AS Type
1749479990893:FROM toppings
1749479990893:WHERE Nuts = 'Y';
1749479990893:"
1749479990894:sqldf(nutty)
1749480000757:nutty =
1749480000758:"
1749480000758:SELECT ID, Flavor AS Name, 'Flavor' AS Type
1749480000758:FROM flavors
1749480000758:WHERE Nuts = 'Y'
1749480000758:UNION
1749480000758:SELECT ID, Name, 'Topping' AS Type
1749480000758:FROM toppings
1749480000758:WHERE Nuts = 'Y';
1749480000758:"
1749480000759:sqldf(nutty)
1749480125361:names(flavors)
1749480153498:nutty =
1749480153499:"
1749480153499:SELECT
1749480153499:f.Flavor AS Name,
1749480153499:'Flavor' AS Type
1749480153499:FROM
1749480153499:flavors f
1749480153499:WHERE
1749480153499:Nuts = 'Y'
1749480153500:UNION
1749480153500:SELECT
1749480153500:ID,
1749480153500:Name,
1749480153500:'Topping' AS Type
1749480153500:FROM
1749480153500:toppings
1749480153500:WHERE Nuts = 'Y';
1749480153501:"
1749480153501:sqldf(nutty)
1749480163039:## 4.) which ice creams &/ toppings contain nuts
1749480163039:nutty =
1749480163039:"
1749480163039:SELECT
1749480163039:f.Flavor AS Name,
1749480163039:'Flavor' AS Type
1749480163039:FROM
1749480163039:flavors f
1749480163040:WHERE
1749480163040:Nuts = 'Y'
1749480163040:UNION
1749480163040:SELECT
1749480163040:Name,
1749480163040:'Topping' AS Type
1749480163040:FROM
1749480163041:toppings
1749480163041:WHERE Nuts = 'Y';
1749480163041:"
1749480188039:nutty =
1749480188039:"
1749480188039:SELECT
1749480188039:f.Flavor AS Name,
1749480188039:'Flavor' AS Type
1749480188039:FROM
1749480188039:flavors f
1749480188039:WHERE
1749480188040:Nuts = 'Y'
1749480188040:UNION
1749480188040:SELECT
1749480188040:t.Name,
1749480188040:'Topping' AS Type
1749480188041:FROM
1749480188041:toppings t
1749480188041:WHERE Nuts = 'Y';
1749480188041:"
1749480188042:sqldf(nutty)
1749480211601:nutty =
1749480211602:"
1749480211602:SELECT
1749480211602:f.Flavor AS Name,
1749480211602:'Flavor' AS Type
1749480211602:FROM
1749480211602:flavors f
1749480211603:WHERE
1749480211603:Nuts = 'Y'
1749480211603:UNION
1749480211603:SELECT
1749480211603:t.Name,
1749480211603:'Topping' AS Type
1749480211603:FROM
1749480211603:toppings t
1749480211604:WHERE Nuts = 'Y'
1749480211604:ORDER BY Type
1749480211604:"
1749480211604:sqldf(nutty)
1749480363931:names(orders)
1749480430732:orders[2,]
1749480444939:orders[3:6,]
1749480461324:orders[1:10,]
1749480508742:sunnyDays =
1749480508742:"
1749480508742:SELECT
1749480508742:o.Scoop1,
1749480508742:o.Scoop2,
1749480508743:o.Scoop3,
1749480508743:o.Topping1,
1749480508743:o.Topping2,
1749480508743:o.Topping3
1749480508743:FROM
1749480508743:orders o
1749480508744:WHERE
1749480508744:Topping1 != NA
1749480508744:"
1749480508744:sqldf(sunnyDays)
1749480531749:orders[10:30,]
1749480552102:orders[Topping1]
1749480563197:orders['Topping1']
1749480589949:sunnyDays =
1749480589949:"
1749480589949:SELECT
1749480589949:o.Scoop1,
1749480589949:o.Scoop2,
1749480589949:o.Scoop3,
1749480589949:o.Topping1,
1749480589949:o.Topping2,
1749480589949:o.Topping3
1749480589950:FROM
1749480589950:orders o
1749480589950:WHERE
1749480589950:Topping1 != null
1749480589950:"
1749480589951:sqldf(sunnyDays)
1749480599297:sunnyDays =
1749480599297:"
1749480599297:SELECT
1749480599297:o.Scoop1,
1749480599297:o.Scoop2,
1749480599297:o.Scoop3,
1749480599297:o.Topping1,
1749480599297:o.Topping2,
1749480599298:o.Topping3
1749480599298:FROM
1749480599298:orders o
1749480599298:WHERE
1749480599298:Topping1 != 'NA'
1749480599298:"
1749480599298:sqldf(sunnyDays)
1749480952426:sunnyDays =
1749480952426:"
1749480952426:SELECT
1749480952426:f1.Flavor AS Scoop1_Flavor,
1749480952426:f2.Flavor AS Scoop2_Flavor,
1749480952426:f3.Flavor AS Scoop3_Flavor,
1749480952426:t1.Name AS Topping1_Name,
1749480952427:t2.Name AS Topping2_Name,
1749480952427:t3.Name AS Topping3_Name
1749480952427:FROM
1749480952427:orders o
1749480952427:LEFT JOIN
1749480952428:flavors f1 ON o.Scoop1 = f1.ID
1749480952428:LEFT JOIN
1749480952428:flavors f2 ON o.Scoop2 = f2.ID
1749480952428:LEFT JOIN
1749480952428:flavors f3 ON o.Scoop3 = f3.ID
1749480952428:LEFT JOIN
1749480952428:toppings t1 ON o.Topping1 = t1.ID
1749480952428:LEFT JOIN
1749480952428:toppings t2 ON o.Topping2 = t2.ID
1749480952428:LEFT JOIN
1749480952429:toppings t3 ON o.Topping3 = t3.ID
1749480952429:WHERE
1749480952429:o.Topping1 != 'NA'
1749480952429:"
1749480952429:sqldf(sunnyDays)
1749481139416:names(customers)
1749481195399:southies =
1749481195400:"
1749481195400:SELECT
1749481195400:c.Fname,
1749481195400:c.Lname
1749481195400:FROM
1749481195400:customers c
1749481195400:WHERE
1749481195401:State != (ME or NH)
1749481195401:"
1749481195401:sqldf(southies)
1749481208378:southies =
1749481208378:"
1749481208378:SELECT
1749481208378:c.Fname,
1749481208378:c.Lname
1749481208378:FROM
1749481208379:customers c
1749481208379:WHERE
1749481208379:State != ('ME' or 'NH')
1749481208379:"
1749481208379:sqldf(southies)
1749481223390:southies =
1749481223390:"
1749481223390:SELECT
1749481223390:c.Fname,
1749481223390:c.Lname,
1749481223390:c.State
1749481223391:FROM
1749481223391:customers c
1749481223391:WHERE
1749481223391:State != ('ME' or 'NH')
1749481223391:"
1749481234091:southies =
1749481234091:"
1749481234091:SELECT
1749481234091:c.Fname,
1749481234091:c.Lname,
1749481234091:c.State
1749481234091:FROM
1749481234091:customers c
1749481234092:WHERE
1749481234092:State != ('ME' or 'NH')
1749481234092:"
1749481234092:sqldf(southies)
1749481262776:southies =
1749481262776:"
1749481262776:SELECT
1749481262776:c.Fname,
1749481262776:c.Lname,
1749481262776:c.State
1749481262776:FROM
1749481262776:customers c
1749481262777:WHERE
1749481262777:State != 'ME' and State != 'NH'
1749481262777:"
1749481262777:sqldf(southies)
1749481369046:names(flavors)
1749481378108:names(toppings)
1749481393789:flavors("Type")
1749481399680:flavors(Type)
1749481409772:flavors[type]
1749481415079:flavors["Type"]
1749481430041:flavors
1749481537098:desserts =
1749481537098:"
1749481537098:SELECT
1749481537099:COUNT(DISTINCT Type)
1749481537099:FROM
1749481537099:flavors
1749481537099:"
1749481537099:sqldf(desserts)
1749481691631:desserts =
1749481691631:"
1749481691631:SELECT
1749481691631:Type,
1749481691631:COUNT(*) AS NumberOfFlavors
1749481691631:FROM
1749481691631:flavors
1749481691631:GROUP BY
1749481691631:Type;
1749481691632:"
1749481691632:sqldf(desserts)
1749481722473:desserts =
1749481722473:"
1749481722473:SELECT
1749481722473:Type,
1749481722474:COUNT(*) AS NumberOfFlavors
1749481722474:FROM
1749481722474:flavors
1749481722475:"
1749481722475:sqldf(desserts)
1749481741120:desserts =
1749481741120:"
1749481741120:SELECT
1749481741120:Type,
1749481741120:COUNT(*) AS NumberOfFlavors
1749481741120:FROM
1749481741120:flavors
1749481741121:GROUP BY
1749481741121:Type
1749481741121:"
1749481741121:sqldf(desserts)
1749482016795:names(flavors)
1749482117699:for (first in flavors["Flavor"])
1749482117699:{
1749482117699:for (second in flavors["Flavor"])
1749482117699:{
1749482117699:for (third in flavors["Flavor"])
1749482117700:{
1749482117700:if(first != second && first != third && second != third)
1749482117700:{print(first, second, third)}
1749482117700:}
1749482117700:}
1749482117700:}
1749482178341:for (first in flavors['Flavor']){print(first)}
1749482212770:for (first in flavors["Flavor"])
1749482212770:{
1749482212770:for (second in flavors["Flavor"])
1749482212770:{
1749482212771:for (third in flavors["Flavor"])
1749482212771:{
1749482212771:if(first != second && first != third && second != third)
1749482212771:{print(first + " " + second + " " + third)}
1749482212771:}
1749482212771:}
1749482212771:}
1749482237487:for (first in flavors["Flavor"])
1749482237487:{
1749482237487:for (second in flavors["Flavor"])
1749482237487:{
1749482237487:for (third in flavors["Flavor"])
1749482237488:{
1749482237488:{print(first + " " + second + " " + third)}
1749482237488:}
1749482237488:}
1749482237488:}
1749482253153:for (first in flavors["Flavor"])
1749482253154:{
1749482253154:for (second in flavors["Flavor"])
1749482253154:{
1749482253154:for (third in flavors["Flavor"])
1749482253154:{
1749482253154:{print(first , " " , second , " " , third)}
1749482253154:}
1749482253154:}
1749482253154:}
1749482272734:{print(first & " " & second & " " & third)}
1749482382818:for (first in flavors["Flavor"])
1749482382819:{
1749482382819:for (second in flavors["Flavor"])
1749482382819:{
1749482382819:for (third in flavors["Flavor"])
1749482382819:{
1749482382819:{cat(first, second, third)}
1749482382820:}
1749482382820:}
1749482382820:}
1749482440667:for (first in flavors["Flavor"])
1749482440667:{
1749482440667:for (second in flavors["Flavor"])
1749482440668:{
1749482440668:for (third in flavors["Flavor"])
1749482440668:{
1749482440668:if(first <> second <> third)
1749482511065:if(first == second == third)
1749482526674:for (first in flavors["Flavor"])
1749482526674:{
1749482526674:for (second in flavors["Flavor"])
1749482526674:{
1749482526674:for (third in flavors["Flavor"])
1749482526674:{
1749482526675:if(first == second and first == third)
1749482535091:for (first in flavors["Flavor"])
1749482535091:{
1749482535091:for (second in flavors["Flavor"])
1749482535091:{
1749482535091:for (third in flavors["Flavor"])
1749482535091:{
1749482535091:if(first == second && first == third)
1749482535091:{cat(first, second, third)}
1749482535092:}
1749482535092:}
1749482535092:}
1749482636371:for (first in flavors["Flavor"])
1749482636372:{
1749482636372:for (second in flavors["Flavor"])
1749482636372:{
1749482636372:for (third in flavors["Flavor"])
1749482636372:{
1749482636372:if(!identica(first,second) && !identical(second,third) && !identical(first,third))
1749482636373:{
1749482636373:cat(first, second, third, "\n")
1749482636373:}
1749482636373:}
1749482636373:}
1749482636374:}
1749482647929:for (first in flavors["Flavor"])
1749482647929:{
1749482647930:for (second in flavors["Flavor"])
1749482647930:{
1749482647930:for (third in flavors["Flavor"])
1749482647930:{
1749482647930:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482647930:{
1749482647930:cat(first, second, third, "\n")
1749482647931:}
1749482647931:}
1749482647931:}
1749482647931:}
1749482727259:flvrs = flavors$Flavor
1749482727259:for (first in flvrs)
1749482727259:{
1749482727259:for (second in flvrs)
1749482727259:{
1749482727259:for (third in flvrs)
1749482727260:{
1749482727260:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482727260:{
1749482727260:cat(first, second, third, "\n")
1749482727260:}
1749482727261:}
1749482727261:}
1749482727261:}
1749482912636:icecreams =
1749482912636:"
1749482912636:SELECT
1749482912636:f.Flavor
1749482912637:FROM
1749482912637:flavors f
1749482912637:WHERE
1749482912637:Type = 'I'
1749482912637:"
1749482912637:flvrs = sqldf(icecreams)
1749482912662:flvrs
1749482939991:icecreams =
1749482939992:"
1749482939992:SELECT
1749482939992:f.Flavor
1749482939992:FROM
1749482939992:flavors f
1749482939992:WHERE
1749482939992:Type = 'I'
1749482939992:"
1749482939993:flvrs = sqldf(icecreams)
1749482940009:for (first in flvrs)
1749482940009:{
1749482940009:for (second in flvrs)
1749482940009:{
1749482940009:for (third in flvrs)
1749482940009:{
1749482940010:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482940010:{
1749482940010:cat(first, second, third, "\n")
1749482940010:}
1749482940010:}
1749482940010:}
1749482940010:}
1749482956161:icecreams =
1749482956161:"
1749482956161:SELECT
1749482956162:f.Flavor
1749482956162:FROM
1749482956162:flavors f
1749482956162:WHERE
1749482956162:Type = 'I'
1749482956162:"
1749482956163:flvrs = sqldf(icecreams)
1749482956179:flvrs
1749482997779:icecreams =
1749482997779:"
1749482997779:SELECT
1749482997779:f.Flavor
1749482997779:FROM
1749482997779:flavors f
1749482997779:WHERE
1749482997779:Type = 'I'
1749482997780:"
1749482997780:rtn = sqldf(icecreams)
1749482997798:flvrs = rtn$Flavor
1749482997798:for (first in flvrs)
1749482997798:{
1749482997798:for (second in flvrs)
1749482997798:{
1749482997798:for (third in flvrs)
1749482997798:{
1749482997798:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482997799:{
1749482997799:cat(first, second, third, "\n")
1749482997799:}
1749482997799:}
1749482997799:}
1749482997799:}
1749483408540:popFlavor =
1749483408540:"
1749483408540:SELECT Flavor, COUNT(*) AS Count
1749483408541:FROM (
1749483408541:SELECT Scoop1 AS Flavor FROM orders
1749483408541:UNION ALL
1749483408541:SELECT Scoop2 FROM orders
1749483408541:UNION ALL
1749483408541:SELECT Scoop3 FROM orders
1749483408541:) AS AllFlavors
1749483408541:GROUP BY Flavor
1749483408541:ORDER BY Count DESC
1749483408541:LIMIT 1;
1749483408541:union
1749483408542:SELECT Name AS Topping, COUNT(*) AS Count
1749483408542:FROM (
1749483408542:SELECT Topping1 AS Name FROM orders
1749483408542:UNION ALL
1749483408542:SELECT Topping2 FROM orders
1749483408542:UNION ALL
1749483408542:SELECT Topping3 FROM orders
1749483408542:) AS AllToppings
1749483408542:GROUP BY Name
1749483408543:ORDER BY Count DESC
1749483408543:LIMIT 1;
1749483408543:"
1749483408544:sqldf(popFlavor)
1749483448739:## 9.) find most common flavor
1749483448739:popFlavor =
1749483448739:"
1749483448739:SELECT Flavor, COUNT(*) AS Count
1749483448739:FROM (
1749483448739:SELECT Scoop1 AS Flavor FROM orders
1749483448739:UNION ALL
1749483448739:SELECT Scoop2 FROM orders
1749483448740:UNION ALL
1749483448740:SELECT Scoop3 FROM orders
1749483448740:) AS AllFlavors
1749483448740:GROUP BY Flavor
1749483448740:ORDER BY Count DESC
1749483448740:LIMIT 1;
1749483448740:"
1749483448741:topPing = "
1749483448741:SELECT Name AS Topping, COUNT(*) AS Count
1749483448741:FROM (
1749483448741:SELECT Topping1 AS Name FROM orders
1749483448741:UNION ALL
1749483448741:SELECT Topping2 FROM orders
1749483448741:UNION ALL
1749483448741:SELECT Topping3 FROM orders
1749483448742:) AS AllToppings
1749483448742:GROUP BY Name
1749483448742:ORDER BY Count DESC
1749483448742:LIMIT 1;
1749483448742:"
1749483448742:sqldf(popFlavor)
1749483539384:popFlavor =
1749483539384:"
1749483539384:SELECT Flavor, COUNT(*) AS Count
1749483539384:FROM (
1749483539385:SELECT Scoop1 AS Flavor FROM orders
1749483539385:UNION ALL
1749483539385:SELECT Scoop2 FROM orders
1749483539385:UNION ALL
1749483539385:SELECT Scoop3 FROM orders
1749483539385:) AS AllFlavors
1749483539385:GROUP BY Flavor
1749483539385:ORDER BY Count DESC
1749483539385:LIMIT 1;
1749483539385:"
1749483539386:sqldf(pop)
1749483559046:## 9.) find most common flavor
1749483559046:popFlavor =
1749483559046:"
1749483559046:SELECT Flavor, COUNT(*) AS Count
1749483559046:FROM (
1749483559046:SELECT Scoop1 AS Flavor FROM orders
1749483559047:UNION ALL
1749483559047:SELECT Scoop2 FROM orders
1749483559047:UNION ALL
1749483559047:SELECT Scoop3 FROM orders
1749483559047:) AS AllFlavors
1749483559047:GROUP BY Flavor
1749483559047:ORDER BY Count DESC
1749483559047:LIMIT 1;
1749483559047:"
1749483559048:sqldf(popFlavor)
1749483653862:## 9.) find most common flavor
1749483653862:popFlavor =
1749483653862:"
1749483653863:SELECT Flavor, COUNT(*) AS Count
1749483653863:FROM (
1749483653863:SELECT Scoop1 AS Flavor FROM orders WHERE Scoop1 IS NOT NULL
1749483653863:UNION ALL
1749483653863:SELECT Scoop2 FROM orders WHERE Scoop2 IS NOT NULL
1749483653863:UNION ALL
1749483653863:SELECT Scoop3 FROM orders WHERE Scoop3 IS NOT NULL
1749483653865:) AS AllFlavors
1749483653865:GROUP BY Flavor
1749483653865:ORDER BY Count DESC
1749483653865:LIMIT 1;
1749483653865:"
1749483653865:sqldf(popFlavor)
1749483770022:popFlavor =
1749483770023:"
1749483770023:SELECT Flavor, COUNT(*) AS Count
1749483770023:FROM (
1749483770023:SELECT Scoop1 AS Flavor
1749483770023:FROM orders
1749483770023:SELECT Scoop2
1749483770023:FROM orders
1749483770023:WHERE Scoop2 IS NOT NULL
1749483770023:UNION ALL
1749483770024:SELECT Scoop3
1749483770024:FROM orders
1749483770024:WHERE Scoop3 IS NOT NULL
1749483770024:)
1749483770024:AS AllFlavors
1749483770024:GROUP BY Flavor
1749483770024:ORDER BY Count DESC
1749483770025:LIMIT 10;
1749483770025:"
1749483770025:sqldf(popFlavor)
1749483811086:## 9.) find most common flavor
1749483811086:popFlavor =
1749483811086:"SELECT Flavor, COUNT(*) AS Count
1749483811086:FROM (
1749483811086:SELECT Scoop1 AS Flavor FROM orders WHERE Scoop1 IS NOT NULL
1749483811086:UNION ALL
1749483811087:SELECT Scoop2 FROM orders WHERE Scoop2 IS NOT NULL
1749483811087:UNION ALL
1749483811087:SELECT Scoop3 FROM orders WHERE Scoop3 IS NOT NULL
1749483811087:) AS AllFlavors
1749483811087:GROUP BY Flavor
1749483811087:ORDER BY Count DESC
1749483811087:LIMIT 10;
1749483811087:"
1749483811088:sqldf(popFlavor)
1749483838214:popFlavor =
1749483838214:"
1749483838214:SELECT Flavor, COUNT(*) AS Count
1749483838215:FROM (
1749483838215:SELECT Scoop1 AS Flavor FROM orders WHERE Scoop1 IS NOT NULL
1749483838215:UNION ALL
1749483838215:SELECT Scoop2 FROM orders WHERE Scoop2 IS NOT NULL
1749483838215:UNION ALL
1749483838215:SELECT Scoop3 FROM orders WHERE Scoop3 IS NOT NULL
1749483838215:)
1749483838215:AS AllFlavors
1749483838215:GROUP BY Flavor
1749483838215:ORDER BY Count DESC
1749483838215:LIMIT 10;
1749483838216:"
1749483838216:sqldf(popFlavor)
1749484324366:trial = "SELECT f.Flavor, COUNT(*) AS Count
1749484324366:FROM orders o
1749484324366:JOIN flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484324366:GROUP BY f.Flavor
1749484324366:ORDER BY Count DESC
1749484324367:LIMIT 1;"
1749484324367:sqldf(trial)
1749484529352:trial = "SELECT f.Flavor, COUNT(*) AS Count
1749484529352:FROM orders o
1749484529352:JOIN flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484529352:GROUP BY f.Flavor
1749484529352:ORDER BY Count DESC
1749484529352:LIMIT 1"
1749484529353:sqldf(trial)
1749484831736:topFlavors =
1749484831736:"
1749484831736:SELECT
1749484831736:f.Flavor,
1749484831736:COUNT(*) AS Count
1749484831736:FROM
1749484831736:orders o
1749484831736:JOIN
1749484831736:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484831737:GROUP BY
1749484831737:f.Flavor
1749484831737:ORDER BY
1749484831737:Count DESC
1749484831737:LIMIT 10
1749484831737:"
1749484831738:sqldf(topFlavors)
1749484831773:topPings =
1749484831773:"
1749484831773:SELECT
1749484831773:t.name,
1749484831773:COUNT(*) as Count
1749484831773:FROM
1749484831773:orders o
1749484831773:JOIN
1749484831773:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749484831773:GROUP BY
1749484831773:Count DESC
1749484831773:LIMIT 10
1749484831773:"
1749484831774:sqldf(topPings)
1749484846289:topFlavors =
1749484846289:"
1749484846289:SELECT
1749484846289:f.Flavor,
1749484846289:COUNT(*) AS Count
1749484846289:FROM
1749484846289:orders o
1749484846290:JOIN
1749484846290:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484846290:GROUP BY
1749484846291:f.Flavor
1749484846292:ORDER BY
1749484846293:Count DESC
1749484846293:LIMIT 10
1749484846293:"
1749484846293:sqldf(topFlavors)
1749484851919:topPings =
1749484851920:"
1749484851920:SELECT
1749484851920:t.name,
1749484851920:COUNT(*) as Count
1749484851920:FROM
1749484851920:orders o
1749484851920:JOIN
1749484851921:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749484851921:GROUP BY
1749484851921:Count DESC
1749484851921:LIMIT 10
1749484851921:"
1749484851921:sqldf(topPings)
1749484883031:## 9.) find most common flavor
1749484883031:topFlavors =
1749484883031:"
1749484883032:SELECT
1749484883032:f.Flavor,
1749484883032:COUNT(*) AS Count
1749484883032:FROM
1749484883032:orders o
1749484883032:JOIN
1749484883032:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484883032:GROUP BY
1749484883033:f.Flavor
1749484883033:ORDER BY
1749484883033:Count DESC
1749484883033:LIMIT 10
1749484883033:"
1749484883033:sqldf(topFlavors)
1749484883070:topPings =
1749484883070:"
1749484883070:SELECT
1749484883071:t.name,
1749484883071:COUNT(*) as Count
1749484883071:FROM
1749484883071:orders o
1749484883071:JOIN
1749484883071:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749484883071:ORDER BY
1749484883071:Count DESC
1749484883072:LIMIT 10
1749484883072:"
1749484883072:sqldf(topPings)
1749484962474:sqldf(SELECT t.Name AS Topping, COUNT(*) AS Count
1749484982263:sqldfSELECT t.Name AS Topping, COUNT(*) AS Count
1749485026075:shit = "SELECT t.Name AS Topping, COUNT(*) AS Count
1749485026075:FROM orders o
1749485026075:JOIN toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749485026075:GROUP BY t.Name
1749485026075:ORDER BY Count DESC
1749485026075:LIMIT 1;"
1749485026076:sqldf(shit)
1749485048071:shit = "SELECT t.Name AS Topping, COUNT(*) AS Count
1749485048071:FROM orders o
1749485048071:JOIN toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749485048071:GROUP BY t.Name
1749485048071:ORDER BY Count DESC
1749485048071:LIMIT 10;"
1749485048071:sqldf(shit)
1749485155825:## 9.) find most common flavor
1749485155826:topFlavors =
1749485155826:"
1749485155826:SELECT
1749485155826:f.Flavor,
1749485155827:COUNT(*) AS Count
1749485155827:FROM
1749485155827:orders o
1749485155827:JOIN
1749485155828:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749485155828:GROUP BY
1749485155828:f.Flavor
1749485155828:ORDER BY
1749485155828:Count DESC
1749485155828:LIMIT 10
1749485155828:"
1749485155828:sqldf(topFlavors)
1749485155876:topPings =
1749485155876:"
1749485155877:SELECT
1749485155877:t.Name AS Topping,
1749485155877:COUNT(*) AS Count
1749485155877:FROM
1749485155877:orders o
1749485155877:JOIN
1749485155877:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749485155877:GROUP BY
1749485155877:t.Name
1749485155877:ORDER BY
1749485155877:Count DESC
1749485155878:LIMIT 10
1749485155878:"
1749485155878:sqldf(topPings)
1749485285693:towns = "SELECT DISTINCT c.City
1749485285694:FROM customers c
1749485285694:WHERE c.City NOT IN (SELECT l.City FROM locations l);"
1749485285694:sqldf(towns)
1750526976990:3+4
1750527542029:data=read.csv(file.choose(),header=TRUE)
1750527549705:data=read.csv(file.choose(),header=TRUE)
1750527727824:names(data)
1750527764340:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750527764340:##  a.	Type
1750527764340:##  b.	Type+Color
1750527764341:data.color
1750527778567:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750527778567:##  a.	Type
1750527778568:##  b.	Type+Color
1750527778568:data[color].unique
1750527892974:colors <- unique(data$color)
1750527892975:colors
1750527955995:mms=read.csv(file.choose(),header=TRUE)
1750527971813:mms=read.csv(mms.csv,header=TRUE)
1750527987684:mms=read.csv(mMnM5/ms.csv,header=TRUE)
1750527988940:mms=read.csv(mMnM5/ms.csv,header=TRUE)
1750528000494:mms=read.csv(file.choose(),header=TRUE)
1750528007507:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528007507:##  a.	Type
1750528007508:##  b.	Type+Color
1750528007508:colors <- unique(mms$color)
1750528007508:colors
1750528007508:options <- unique(mms$type)
1750528083675:data=read.csv(file.choose(),header=TRUE)
1750528095529:getwd(mms)
1750528103468:options
1750528110173:getwd(mms.csv)
1750528116156:getwd("mms.csv")
1750528122446:getwd()
1750528169551:mm=read.csv('mms.csv')
1750528205352:mm = read.csv("./mms.csv")
1750528371218:data <- read.csv("mms.csv")
1750528414555:data <- read.csv("mms.csv")
1750528452582:getwd()
1750528484020:list.files()
1750528526846:setwd("/workspaces/r_dev_container/MnM5")
1750528537110:data <- read.csv("mms.csv")
1750528612768:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528612771:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528612771:##  a.	Type
1750528612771:##  b.	Type+Color
1750528612771:colors <- unique(mms$color)
1750528612771:options <- unique(mms$type)
1750528612771:color
1750528621758:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528621761:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528621761:##  a.	Type
1750528621761:##  b.	Type+Color
1750528621761:colors <- unique(mms$color)
1750528621761:options <- unique(mms$type)
1750528621762:colors
1750528621762:options
1750528718595:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528718598:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528718598:##  a.	Type
1750528718598:##  b.	Type+Color
1750528718599:colors <- unique(mms$color)
1750528718599:options <- unique(mms$type)
1750528718599:colors
1750528718600:options
1750528738368:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528738373:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528738373:##  a.	Type
1750528738373:##  b.	Type+Color
1750528738373:colors <- unique(mms$color)
1750528738374:options <- unique(mms$type)
1750528738374:colors
1750528738374:options
1750528870228:names(mms)
1750528883143:colors
1750528902049:options # unique types
1750548451488:getwd()
1750548479459:setwd("/workspaces/r_dev_container/MnM5")
1750548526247:mnm = read.csv("mms.csv")
1750548535925:name(mnm)
1750548554294:names(mnm)
1750548579244:colors = unique(mnm$color)
1750548579244:colors
1750548598011:types = unique(mnm$type)
1750548845941:for(type in types)
1750548845942:{
1750548845942:mean(mnm$mass)
1750548845942:mean(mnm$diameter)
1750548845942:for(clr in colors)
1750548845942:{
1750548845942:mean(mnm$mass)
1750548845942:mean(mnm$diameter)
1750548845942:}
1750548845942:}
1750549026484:for(type in types)
1750549026484:{
1750549026484:cat(type, mean(mnm$mass[mnm$types = type]))
1750549060899:for(type in types)
1750549060899:{
1750549060899:cat(type, mean(mnm$mass[mnm$types == type]))
1750549060899:cat(type, mean(mnm$diameter[mnm$types == type]))
1750549060899:for(clr in colors)
1750549060899:{
1750549060900:cat(type, color, mean(mnm$mass[mnm$types == type && mnm$colors == clr]))
1750549060900:cat(type, color, mean(mnm$diameter[mnm$types == type && mnm$colors == clr]))
1750549060900:}
1750549060900:}
1750549077181:for(type in types)
1750549077182:{
1750549077182:cat(type, mean(mnm$mass[mnm$types == type]))
1750549077182:cat(type, mean(mnm$diameter[mnm$types == type]))
1750549077182:for(clr in colors)
1750549077182:{
1750549077182:cat(type, clr, mean(mnm$mass[mnm$types == type && mnm$colors == clr]))
1750549077182:cat(type, clr, mean(mnm$diameter[mnm$types == type && mnm$colors == clr]))
1750549077182:}
1750549077182:}
1750549133050:x = mean(mnm$mass)
1750549133050:x
1750549275865:pnut.mean = mean(mnm$mass[mnm$type == "peanut butter"])
1750549291048:pnut.mean
1750549433712:for(kind in types)
1750549433712:{
1750549433712:avg <- mean(mnm$mass[mnm$type == kind])
1750549433712:cat(kind, avg, "\n")
1750549433712:}
1750549460127:for(kind in types)
1750549460127:{
1750549460127:avg <- mean(mnm$mass[mnm$type == kind])
1750549460127:cat(kind, "mean is:", avg, "\n")
1750549460128:}
1750549469719:cat(kind, "mean is:\t", avg, "\n")
1750549474652:for(kind in types)
1750549474652:{
1750549474652:avg <- mean(mnm$mass[mnm$type == kind])
1750549474652:cat(kind, "mean is:\t", avg, "\n")
1750549474652:}
1750549583784:for(kind in types)
1750549583784:{
1750549583784:avgw <- mean(mnm$mass[mnm$type == kind])
1750549583785:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549583785:cat(kind, ":\nmean weight is:\t", avgw, "\n", "mean size is:\t", avgs, "\n\n")
1750549583786:}
1750549605423:for(kind in types)
1750549605423:{
1750549605423:avgw <- mean(mnm$mass[mnm$type == kind])
1750549605423:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549605423:cat(kind, ":\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549605424:}
1750549621638:for(kind in types)
1750549621638:{
1750549621638:avgw <- mean(mnm$mass[mnm$type == kind])
1750549621638:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549621638:cat(kind + ":\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549621638:}
1750549784006:for(kind in types)
1750549784006:{
1750549784006:avgw <- mean(mnm$mass[mnm$type == kind])
1750549784006:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549784007:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549784008:cat(kind)
1750549784008:for(clr in colors)
1750549784008:{
1750549784009:tcw <- mean(mnm$mass[mnm$type == kind && mnm$color == clr])
1750549784009:tcs <- mean(mnm$diameter[mnm$type == kind && mnm$color == clr])
1750549784009:cat(clr, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549784009:}
1750549784010:}
1750549817218:for(kind in types)
1750549817218:{
1750549817219:avgw <- mean(mnm$mass[mnm$type == kind])
1750549817219:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549817219:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549817219:cat(kind)
1750549817219:for(clr in colors)
1750549817219:{
1750549817219:tcw <- mean(mnm$mass[mnm$type == kind, mnm$color == clr])
1750549817219:tcs <- mean(mnm$diameter[mnm$type == kind, mnm$color == clr])
1750549817220:cat(clr, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549817220:}
1750549817221:}
1750549889036:for(kind in types)
1750549889036:{
1750549889037:avgw <- mean(mnm$mass[mnm$type == kind])
1750549889037:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549889037:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549889038:cat(kind)
1750549889038:for(clr in colors)
1750549889038:{
1750549889038:tcw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750549889038:tcs <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750549889038:cat(clr, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549889038:}
1750549889039:}
1750550202950:total = length(mnm)
1750550202951:total
1750550220795:total = nrow(mnm)
1750550220795:total
1750550255473:## # 2
1750550255473:## proportion of each type of color
1750550255473:## I don't need to subtract for the header, right?
1750550255473:mnm
1750550397757:## nope.. okay
1750550397757:total = nrow(mnm)
1750550397757:total
1750550397758:for(clr in colors)
1750550397759:{
1750550397759:clrcnt = count(mnm$color[mnm$color == clr])
1750550397759:cat("{clr}: appears {100 * clrcnt/total}% of the time.\n")
1750550397760:}
1750550455098:for(clr in colors)
1750550455098:{
1750550455098:clrcnt = sum(mnm$color[mnm$color == clr])
1750550455098:cat("{clr}: appears {100 * clrcnt/total}% of the time.\n")
1750550455098:}
1750550484427:for(clr in colors)
1750550484427:{
1750550484427:clrcnt = sum(mnm$color == clr)
1750550484427:cat("{clr}: appears {100 * clrcnt/total}% of the time.\n")
1750550484427:}
1750550521440:for(clr in colors)
1750550521440:{
1750550521440:clrcnt = sum(mnm$color == clr)
1750550521440:cat(clr, "appears",100 * clrcnt/total, "% of the time.\n")
1750550521440:}
1750550665591:for(clr in colors)
1750550665591:{
1750550665591:clrcnt = sum(mnm$color == clr)
1750550665591:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750550665591:}
1750550765029:## #3 bar chart of #2
1750550765029:barplot(mnm$color)
1750550792392:## #3 bar chart of #2
1750550792392:barplot(sum(mnm$color))
1750550815251:## #3 bar chart of #2
1750550815252:help(barplot)
1750550923289:counts
1750550927006:counts
1750550930373:counts <- c(colors)
1750550930373:counts
1750551041820:counts <- c(colors)
1750551041820:counts
1750551041821:## could have just gone back and modified 2, sure...
1750551041821:i = 1
1750551041821:for(clr in colors)
1750551041821:{
1750551041821:counts[i] = sum(mnm$color == clr)
1750551041821:i <- i + 1
1750551041821:}
1750551041827:counts
1750551106978:barplot(counts, names.arg=colors)
1750551191536:barplot(counts, names.arg = colors, main = "Count of Each Color", xlab = "Colors", ylab = "Counts", col = "lightblue")
1750551209800:# Assuming colors is a character vector containing the unique colors
1750551209800:colors <- c("blue", "brown", "orange", "yellow", "green", "red")
1750551209800:# Initialize counts as a numeric vector of the same length as colors
1750551209800:counts <- numeric(length(colors))
1750551209801:# Loop through each color and count occurrences
1750551209801:for(i in seq_along(colors)) {
1750551209801:clr <- colors[i]
1750551209801:counts[i] <- sum(mnm$color == clr)
1750551209801:}
1750551209808:# Create a bar plot
1750551209808:barplot(counts, names.arg = colors, main = "Count of Each Color", xlab = "Colors", ylab = "Counts", col = "lightblue")
1750551306996:counts <- c(colors)
1750551306996:counts
1750551306997:## could have just gone back and modified 2, sure...
1750551306997:for(i in seq_along(colors))
1750551306997:{
1750551306997:clr <- colors[i]
1750551306997:counts[i] <- sum(mnm$color == clr)
1750551306997:}
1750551307003:# Create a bar plot
1750551307003:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551339319:# Assuming colors is a character vector containing the unique colors
1750551339319:colors <- c("blue", "brown", "orange", "yellow", "green", "red")
1750551339319:# Initialize counts as a numeric vector of the same length as colors
1750551339319:counts <- numeric(length(colors))
1750551339319:# Loop through each color and count occurrences
1750551339320:for(i in seq_along(colors)) {
1750551339320:clr <- colors[i]
1750551339320:counts[i] <- sum(mnm$color == clr)
1750551339320:}
1750551339326:# Create a bar plot
1750551339326:barplot(counts, names.arg = colors, main = "Count of Each Color", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551387338:## some extra fuckery to get the height to accept it
1750551387339:counts <-numeric(length(colors))
1750551387339:## could have just gone back and modified 2, sure...
1750551387339:for(i in seq_along(colors))
1750551387339:{
1750551387339:clr <- colors[i]
1750551387339:counts[i] <- sum(mnm$color == clr)
1750551387340:}
1750551387347:# Create a bar plot
1750551387347:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551407180:## some extra fuckery to get the height to accept it
1750551407180:counts <-numeric(length(colors))
1750551407180:## could have just gone back and modified 2, sure...
1750551407180:for(i in seq_along(colors))
1750551407180:{
1750551407180:clr <- colors[i]
1750551407180:counts[i] <- sum(mnm$color == clr)
1750551407181:}
1750551407188:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551407200:12+39
1750551419991:## some extra fuckery to get the height to accept it
1750551419991:counts <-numeric(length(colors))
1750551419991:## could have just gone back and modified 2, sure...
1750551419991:for(i in seq_along(colors))
1750551419991:{
1750551419991:clr <- colors[i]
1750551419992:counts[i] <- sum(mnm$color == clr)
1750551419992:}
1750551420000:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750552407561:for(clr in colors)
1750552407562:{
1750552407562:for(kind in types)
1750552407562:{
1750552407562:#tcc[i] <-
1750552407562:i <- + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552407562:cat(i)
1750552407562:}
1750552407562:}
1750552419313:for(clr in colors)
1750552419314:{
1750552419314:for(kind in types)
1750552419314:{
1750552419314:#tcc[i] <-
1750552419314:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552419314:}
1750552419314:}
1750552432408:for(clr in colors)
1750552432409:{
1750552432409:for(kind in types)
1750552432409:{
1750552432409:#tcc[i] <-
1750552432409:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552432409:cat(i)
1750552432409:}
1750552432409:}
1750552445604:i = 1
1750552445605:for(clr in colors)
1750552445605:{
1750552445605:for(kind in types)
1750552445605:{
1750552445605:#tcc[i] <-
1750552445606:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552445606:cat(i)
1750552445606:}
1750552445606:}
1750552640834:tcc <- numeric(length(colors)) * 3
1750552640834:tcc
1750552660441:tccr <- length(tcc)
1750552662037:tccr
1750552677324:tccr = numeric(tccr)
1750552678805:tccr
1750552808300:tccr <- r(1:18)
1750552886354:## type-color-count (interesting that numeric sets it to a vector...)
1750552886354:tcc <- numeric(length(colors)) * 3
1750552886355:i = 1
1750552886355:for(clr in colors)
1750552886355:{
1750552886355:for(kind in types)
1750552886356:{
1750552886356:## set the (row)column-vector to hold
1750552886356:tcc[i] <- sum(mnm$color == clr & mnm$type == kind)
1750552886356:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552886356:}
1750552886356:}
1750552886365:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750552909461:tcc
1750552932786:barplot(tcc, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750552980083:barplot(tcc, names.arg = type+colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750553065436:for(kind in types)
1750553065437:{
1750553065437:i = 1
1750553065437:for(clr in colors)
1750553065437:{
1750553065437:## set the (row)column-vector to hold, reusing counts
1750553065437:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750553065437:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750553065437:}
1750553065437:barplot(tcc, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750553065438:}
1750553077602:for(kind in types)
1750553077602:{
1750553077602:i = 1
1750553077602:for(clr in colors)
1750553077602:{
1750553077603:## set the (row)column-vector to hold, reusing counts
1750553077603:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750553077603:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750553077603:}
1750553077604:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750553077604:}
1750553098396:or(kind in types)
1750553118994:for(kind in types)
1750553118994:{
1750553118994:i = 1
1750553118994:for(clr in colors)
1750553118994:{
1750553118995:## set the (row)column-vector to hold, reusing counts
1750553118995:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750553118995:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750553118995:}
1750553118995:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750553118995:}
1750553300313:## #5
1750553300313:## are mnms of different type the same weight, hard no (recall #1)
1750553300314:for(kind in types)
1750553300314:{
1750553300314:avgw <- mean(mnm$mass[mnm$type == kind])
1750553300314:avgs <- mean(mnm$diameter[mnm$type == kind])
1750553300314:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750553300314:}
1750553547813:for(kind in types)
1750553547813:{
1750553547813:avgw <- mean(mnm$mass[mnm$type == kind])
1750553547813:avgs <- mean(mnm$diameter[mnm$type == kind])
1750553547813:stdw <- sd(mnm$mass[mnm$type == kind])
1750553547813:stds <- sd(mnm$diameter[mnm$type == kind])
1750553547813:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750553547814:"\nstd weight:", stdw, "\nstd size:", stds,"\n\n")
1750553547814:cat(kind)
1750553547814:for(clr in colors)
1750553547814:{
1750553547814:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553547814:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553547815:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553547815:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553547815:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750553547815:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750553547815:}
1750553547816:}
1750553604749:for(kind in types)
1750553604749:{
1750553604749:avgw <- mean(mnm$mass[mnm$type == kind])
1750553604749:avgs <- mean(mnm$diameter[mnm$type == kind])
1750553604749:stdw <- sd(mnm$mass[mnm$type == kind])
1750553604749:stds <- sd(mnm$diameter[mnm$type == kind])
1750553604749:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750553604749:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750553604750:cat("\n\n",kind,"\n")
1750553604750:for(clr in colors)
1750553604750:{
1750553604751:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553604751:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553604751:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553604751:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553604752:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750553604752:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750553604752:}
1750553604752:}
1750553709324:for(kind in types)
1750553709324:{
1750553709324:stdw <- sd(mnm$mass[mnm$type == kind])
1750553709324:stds <- sd(mnm$diameter[mnm$type == kind])
1750553709324:cat(kind, "nstd weight:", stdw, "\nstd size:", stds,"\n")
1750553709324:}
1750553821630:for(kind in types)
1750553821630:{
1750553821630:stdw <- sd(mnm$mass[mnm$type == kind])
1750553821630:stds <- sd(mnm$diameter[mnm$type == kind])
1750553821630:avg <- mean(mnm$mass[mnm$type == kind])
1750553821631:cat(kind, "weight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,"\n")
1750553821631:}
1750553838920:for(kind in types)
1750553838920:{
1750553838920:stdw <- sd(mnm$mass[mnm$type == kind])
1750553838921:stds <- sd(mnm$diameter[mnm$type == kind])
1750553838921:avg <- mean(mnm$mass[mnm$type == kind])
1750553838921:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,"\n\n")
1750553838921:}
1750553993759:for(kind in types)
1750553993760:{
1750553993760:stdw <- sd(mnm$mass[mnm$type == kind])
1750553993760:stds <- sd(mnm$diameter[mnm$type == kind])
1750553993760:avg <- mean(mnm$mass[mnm$type == kind])
1750553993760:imprint <- mean(mnm$diameter[mnm$type == kind])
1750553993760:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750553993760:"\naverage size:", imprint, "\n\n")
1750553993760:}
1750553993773:##
1750554131123:for(kind in types)
1750554131123:{
1750554131124:stdw <- sd(mnm$mass[mnm$type == kind])
1750554131124:stds <- sd(mnm$diameter[mnm$type == kind])
1750554131124:avg <- mean(mnm$mass[mnm$type == kind])
1750554131124:imprint <- mean(mnm$diameter[mnm$type == kind])
1750554131124:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750554131124:"\naverage size:", imprint,
1750554131124:"\nstd weight / avg weight", stdw / avg,
1750554131124:"\nstd size / average size", stds / imprint,
1750554131124:"\n\n")
1750554131125:}
1750554131137:##
1750554645329:types
1750554650011:sum(mnm$mass[mnm$type == "plain"])
1750554677637:for(kind in types)
1750554677637:{sum(mnm$mass[mnm$type == kind])}
1750554692379:for(kind in types)
1750554692379:{sum(mnm$mass[mnm$type == kind])}
1750554725963:for(kind in types)
1750554725963:{
1750554725963:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750554725963:}
1750555185910:plain <- sort(mm_data$weight[mm_data$type == "plain"])
1750555202219:plain <- sort(mnm$weight[mm_data$type == "plain"])
1750555218518:plain <- sort(mnm$weight[mnm$type == "plain"])
1750555218518:peanut <- sort(mnm$weight[mnm$type == "peanut"])
1750555218518:pb <- sort(mnm$weight[mnm$type == "peanut butter"])
1750555226521:plain
1750555230199:plain
1750555284874:print(plain)
1750555830774:pvec = mnm$weight[mnm$type == "plain"]
1750555835849:pvev
1750555841677:pvec
1750555866491:## damn, all over... okay
1750555866491:mnm
1750555926151:plain <- sort(mnm$mass[mnm$type == "plain"])
1750555926151:plain
1750555970055:## damn, all over... okay
1750555970055:plain <- sort(mnm$mass[mnm$type == "plain"])
1750555970056:pnut <- sort(mnm$mass[mnm$type == "peanut"])
1750555970056:pb <- sort(mnm$mass[mnm$type == "peanut butter"])
1750556011888:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750556011888:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750556011889:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750556016680:pb
1750556048397:pnut
1750556275994:# Function to find if there is a subset with a given sum
1750556275994:subset_sum <- function(weights, target) {
1750556275994:n <- length(weights)
1750556275995:dp <- matrix(FALSE, n + 1, target + 1)
1750556275995:dp[1, 1] <- TRUE
1750556275995:for (i in 1:n) {
1750556275995:for (j in 1:(target + 1)) {
1750556275995:if (j < weights[i]) {
1750556275995:dp[i + 1, j] <- dp[i, j]
1750556275995:} else {
1750556275996:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750556275996:}
1750556275996:}
1750556275997:}
1750556275997:return(dp[n + 1, target + 1])
1750556275998:}
1750556275998:# Example usage
1750556275998:target_weight <- 369.9
1750556275998:result <- subset_sum(peanut_weights, target_weight)
1750556298807:# Function to find if there is a subset with a given sum
1750556298808:subset_sum <- function(weights, target) {
1750556298808:n <- length(weights)
1750556298808:dp <- matrix(FALSE, n + 1, target + 1)
1750556298808:dp[1, 1] <- TRUE
1750556298808:for (i in 1:n) {
1750556298808:for (j in 1:(target + 1)) {
1750556298808:if (j < weights[i]) {
1750556298808:dp[i + 1, j] <- dp[i, j]
1750556298808:} else {
1750556298809:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750556298809:}
1750556298809:}
1750556298809:}
1750556298809:return(dp[n + 1, target + 1])
1750556298809:}
1750556298810:# Example usage
1750556298810:target_weight <- 369.9
1750556298810:result <- subset_sum(pnut, target_weight)
1750556298833:if (result) {
1750556298833:print("There is a subset of weights that sums to the target weight.")
1750556298833:} else {
1750556298833:print("No subset of weights sums to the target weight.")
1750556298833:}
1750556399973:find_subset <- function(weights, target, current = c(), index = 1) {
1750556399974:if (target == 0) {
1750556399974:return(current)
1750556399974:}
1750556399974:if (target < 0 || index > length(weights)) {
1750556399974:return(NULL)
1750556399974:}
1750556399974:# Include the current weight
1750556399974:with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750556399975:# Exclude the current weight
1750556399975:without_current <- find_subset(weights, target, current, index + 1)
1750556399975:return(if (!is.null(with_current)) with_current else without_current)
1750556399975:}
1750556399976:# Example usage
1750556399976:result_combination <- find_subset(pnut, target_weight)
1750556721637:#############################################################
1750556721637:#############################################################
1750556721637:## still #7
1750556721637:plain
1750556772649:for(kind in types)
1750556772649:{
1750556772649:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750556772649:}
1750556907609:plainOver <- 399.55 - 369.9
1750556913010:plainOver
1750601882846:## okay... well, I say we just add up a bunch from the vectors and make it even
1750601882847:plain
1750601887408:setwd("/workspaces/r_dev_container/MnM5")
1750601887409:mnm <- read.csv("mms.csv")
1750601887412:colors <- unique(mnm$color)
1750601887412:colors
1750601887413:types <- unique(mnm$type)
1750601887413:## #1
1750601887413:## find the mean and standard deviation for diameter and mass using
1750601887413:## type, type+color
1750601887414:for(kind in types)
1750601887414:{
1750601887414:avgw <- mean(mnm$mass[mnm$type == kind])
1750601887414:avgs <- mean(mnm$diameter[mnm$type == kind])
1750601887414:stdw <- sd(mnm$mass[mnm$type == kind])
1750601887414:stds <- sd(mnm$diameter[mnm$type == kind])
1750601887414:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750601887415:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750601887415:cat("\n\n",kind,"color breakdown:\n")
1750601887415:for(clr in colors)
1750601887415:{
1750601887415:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750601887415:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750601887415:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750601887416:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750601887416:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750601887416:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750601887416:}
1750601887416:}
1750601887447:## #2
1750601887447:## proportion of each type of color
1750601887447:## I don't need to subtract for the header, right?
1750601887447:mnm
1750601887461:## nope.. okay
1750601887461:total = nrow(mnm)
1750601887461:total
1750601887461:for(clr in colors)
1750601887461:{
1750601887461:clrcnt = sum(mnm$color == clr)
1750601887461:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750601887461:}
1750601887465:## #3 bar chart of #2
1750601887465:## some extra fuckery to get the height to accept it
1750601887465:counts <- numeric(length(colors))
1750601887465:## could have just gone back and modified 2, sure...
1750601887465:for(i in seq_along(colors))
1750601887466:{
1750601887466:clr <- colors[i]
1750601887466:counts[i] <- sum(mnm$color == clr)
1750601887466:}
1750601887468:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750601887620:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750601887620:## #4
1750601887620:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750601887621:## type-color-count (interesting that numeric sets it to a vector...)
1750601887621:for(kind in types)
1750601887621:{
1750601887621:i = 1
1750601887621:for(clr in colors)
1750601887622:{
1750601887622:## set the (row)column-vector to hold, reusing counts
1750601887622:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750601887622:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750601887622:}
1750601887622:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750601887622:}
1750601887676:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750601887676:## was too difficult for me to figure out)
1750601887676:## #5 && #6
1750601887676:## are mnms of different type the same weight, hard no (recall #1)
1750601887676:for(kind in types)
1750601887676:{
1750601887676:stdw <- sd(mnm$mass[mnm$type == kind])
1750601887677:stds <- sd(mnm$diameter[mnm$type == kind])
1750601887677:avg <- mean(mnm$mass[mnm$type == kind])
1750601887677:imprint <- mean(mnm$diameter[mnm$type == kind])
1750601887677:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750601887677:"\naverage size:", imprint,
1750601887677:"\nstd weight / avg weight", stdw / avg,
1750601887677:"\nstd size / average size", stds / imprint,
1750601887677:"\n\n")
1750601887677:}
1750601887685:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750601887685:## #6 see above
1750601887685:## #7
1750601887685:## ... what?? are we using average or literally picking m&ms from the pile?
1750601887685:## plain          369.9 G
1750601887685:## peanut         369.9 G
1750601887685:## peanut butter  360   G
1750601887685:for(kind in types)
1750601887685:{
1750601887685:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750601887685:}
1750601887688:## damn, all over... okay
1750601887688:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750601887688:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750601887688:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750601887688:## wow, the smallest is less than half the largest...
1750601887688:pb
1750601887690:pnut ## close here, too
1750601887691:## let's see what AI says...
1750601887691:# Function to find if there is a subset with a given sum
1750601887692:subset_sum <- function(weights, target) {
1750601887692:n <- length(weights)
1750601887692:dp <- matrix(FALSE, n + 1, target + 1)
1750601887692:dp[1, 1] <- TRUE
1750601887692:for (i in 1:n) {
1750601887692:for (j in 1:(target + 1)) {
1750601887692:if (j < weights[i]) {
1750601887692:dp[i + 1, j] <- dp[i, j]
1750601887692:} else {
1750601887692:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750601887692:}
1750601887692:}
1750601887692:}
1750601887692:return(dp[n + 1, target + 1])
1750601887692:}
1750601887692:# Example usage
1750601887693:target_weight <- 369.9
1750601887693:result <- subset_sum(pnut, target_weight)
1750601887709:if (result) {
1750601887709:print("There is a subset of weights that sums to the target weight.")
1750601887710:} else {
1750601887710:print("No subset of weights sums to the target weight.")
1750601887710:}
1750601887710:## above, dynamic programming approach.
1750601887710:###################################################
1750601887710:## below, simpler break point approach.
1750601887710:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750601887710:find_subset <- function(weights, target, current = c(), index = 1) {
1750601887710:if (target == 0) {
1750601887710:return(current)
1750601887710:}
1750601887710:if (target < 0 || index > length(weights)) {
1750601887710:return(NULL)
1750601887710:}
1750601887710:# Include the current weight
1750601887710:with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750601887710:# Exclude the current weight
1750601887711:without_current <- find_subset(weights, target, current, index + 1)
1750601887711:return(if (!is.null(with_current)) with_current else without_current)
1750601887711:}
1750601887711:# Example usage
1750601887711:result_combination <- find_subset(pnut, target_weight)
1750601917609:## the smallest we can make is .72, (2) .73, .74, (2) .76
1750601917610:plain
1750602035735:cat(sum(plain[1:409]))
1750602059804:x = sum(plain[1:409])
1750602059804:x
1750602072180:x = sum(plain[1:419])
1750602072180:x
1750602084770:369.9 - x
1750602118503:.74 + .73 + .73 + .72
1750602143878:.74 + .73 + .73 + .72 + .76 + .76
1750602150367:.74 + .73 + .73 + .72 + .76
1750602184062:3.98 / 5
1750602256189:.8 + .8 + .8 + .79 + .79
1750602581844:for(kind in types)
1750602581844:{
1750602581844:avgw <- mean(mnm$mass[mnm$type == kind])
1750602581844:avgs <- mean(mnm$diameter[mnm$type == kind])
1750602581844:stdw <- sd(mnm$mass[mnm$type == kind])
1750602581844:stds <- sd(mnm$diameter[mnm$type == kind])
1750602581845:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750602581845:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750602581845:cat("\n\n",kind,"color breakdown:\n")
1750602581846:for(clr in colors)
1750602581846:{
1750602581846:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750602581846:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750602581846:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750602581846:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750602581847:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750602581847:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750602581848:}
1750602581848:}
1750603000464:colors
1750603022970:colors <- sort(colors)
1750603022970:colors
1750605397939:setwd("/workspaces/r_dev_container/MnM5")
1750605397939:mnm <- read.csv("mms.csv")
1750605397948:colors <- unique(mnm$color)
1750605397948:colors
1750605397948:types <- unique(mnm$type)
1750605397949:## #1
1750605397949:## find the mean and standard deviation for diameter and mass using
1750605397949:## type, type+color
1750605397949:for(kind in types)
1750605397949:{
1750605397949:avgw <- mean(mnm$mass[mnm$type == kind])
1750605397949:avgs <- mean(mnm$diameter[mnm$type == kind])
1750605397949:stdw <- sd(mnm$mass[mnm$type == kind])
1750605397949:stds <- sd(mnm$diameter[mnm$type == kind])
1750605397950:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750605397950:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750605397950:cat("\n\n",kind,"color breakdown:\n")
1750605397950:for(clr in colors)
1750605397950:{
1750605397950:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605397950:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605397950:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605397951:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605397951:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750605397951:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750605397951:}
1750605397951:}
1750605397978:## #2
1750605397978:## proportion of each type of color
1750605397978:## I don't need to subtract for the header, right?
1750605397978:mnm
1750605398006:## nope.. okay
1750605398006:total = nrow(mnm)
1750605398006:total
1750605398006:for(clr in colors)
1750605398006:{
1750605398007:clrcnt = sum(mnm$color == clr)
1750605398007:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750605398007:}
1750605398012:## #3 bar chart of #2
1750605398012:## some extra fuckery to get the height to accept it
1750605398012:counts <- numeric(length(colors))
1750605398013:## could have just gone back and modified 2, sure...
1750605398013:for(i in seq_along(colors))
1750605398013:{
1750605398013:clr <- colors[i]
1750605398013:counts[i] <- sum(mnm$color == clr)
1750605398013:}
1750605398016:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750605398177:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750605398178:## #4
1750605398178:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750605398178:## type-color-count (interesting that numeric sets it to a vector...)
1750605398178:for(kind in types)
1750605398178:{
1750605398178:i = 1
1750605398178:for(clr in colors)
1750605398178:{
1750605398178:## set the (row)column-vector to hold, reusing counts
1750605398178:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750605398178:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750605398178:}
1750605398178:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750605398178:}
1750605398242:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750605398242:## was too difficult for me to figure out)
1750605398242:## #5 && #6
1750605398242:## are mnms of different type the same weight, hard no (recall #1)
1750605398242:for(kind in types)
1750605398242:{
1750605398242:stdw <- sd(mnm$mass[mnm$type == kind])
1750605398242:stds <- sd(mnm$diameter[mnm$type == kind])
1750605398242:avg <- mean(mnm$mass[mnm$type == kind])
1750605398242:imprint <- mean(mnm$diameter[mnm$type == kind])
1750605398242:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750605398242:"\naverage size:", imprint,
1750605398242:"\nstd weight / avg weight", stdw / avg,
1750605398242:"\nstd size / average size", stds / imprint,
1750605398242:"\n\n")
1750605398242:}
1750605398251:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750605398251:## #6 see above
1750605398251:## #7
1750605398251:## ... what?? are we using average or literally picking m&ms from the pile?
1750605398251:## plain          369.9 G
1750605398251:## peanut         369.9 G
1750605398251:## peanut butter  360   G
1750605398251:for(kind in types)
1750605398251:{
1750605398251:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750605398251:}
1750605398256:## damn, all over... okay
1750605398256:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750605398257:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750605398257:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750605398257:## wow, the smallest is less than half the largest...
1750605398257:pb
1750605398261:pnut ## close here, too
1750605398263:## let's see what AI says...
1750605398263:# Function to find if there is a subset with a given sum
1750605398263:subset_sum <- function(weights, target) {
1750605398264:n <- length(weights)
1750605398264:dp <- matrix(FALSE, n + 1, target + 1)
1750605398264:dp[1, 1] <- TRUE
1750605398264:for (i in 1:n) {
1750605398264:for (j in 1:(target + 1)) {
1750605398264:if (j < weights[i]) {
1750605398264:dp[i + 1, j] <- dp[i, j]
1750605398264:} else {
1750605398264:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750605398265:}
1750605398265:}
1750605398265:}
1750605398265:return(dp[n + 1, target + 1])
1750605398265:}
1750605398265:# Example usage
1750605398265:target_weight <- 369.9
1750605398266:result <- subset_sum(pnut, target_weight)
1750605398295:if (result) {
1750605398295:print("There is a subset of weights that sums to the target weight.")
1750605398295:} else {
1750605398295:print("No subset of weights sums to the target weight.")
1750605398296:}
1750605398296:## above, dynamic programming approach.
1750605398296:###################################################
1750605398296:## below, simpler break point approach.
1750605398296:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750605398296:find_subset <- function(weights, target, current = c(), index = 1) {
1750605398296:if (target == 0) {
1750605398296:return(current)
1750605398296:}
1750605398297:if (target < 0 || index > length(weights)) {
1750605398297:return(NULL)
1750605398297:}
1750605398297:# Include the current weight
1750605398297:with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750605398297:# Exclude the current weight
1750605398297:without_current <- find_subset(weights, target, current, index + 1)
1750605398297:return(if (!is.null(with_current)) with_current else without_current)
1750605398297:}
1750605398298:# Example usage
1750605398298:result_combination <- find_subset(pnut, target_weight)
1750605484214:setwd("/workspaces/r_dev_container/MnM5")
1750605484214:mnm <- read.csv("mms.csv")
1750605484217:colors <- unique(mnm$color)
1750605484217:colors
1750605484218:types <- unique(mnm$type)
1750605484218:## #1
1750605484218:## find the mean and standard deviation for diameter and mass using
1750605484218:## type, type+color
1750605484219:for(kind in types)
1750605484219:{
1750605484219:avgw <- mean(mnm$mass[mnm$type == kind])
1750605484219:avgs <- mean(mnm$diameter[mnm$type == kind])
1750605484219:stdw <- sd(mnm$mass[mnm$type == kind])
1750605484219:stds <- sd(mnm$diameter[mnm$type == kind])
1750605484219:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750605484219:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750605484219:cat("\n\n",kind,"color breakdown:\n")
1750605484220:for(clr in colors)
1750605484220:{
1750605484220:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605484220:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605484220:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605484220:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605484220:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750605484221:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750605484221:}
1750605484221:}
1750605484254:## #2
1750605484254:## proportion of each type of color
1750605484254:## I don't need to subtract for the header, right?
1750605484254:mnm
1750605484267:## nope.. okay
1750605484267:total = nrow(mnm)
1750605484267:total
1750605484267:for(clr in colors)
1750605484267:{
1750605484267:clrcnt = sum(mnm$color == clr)
1750605484267:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750605484267:}
1750605484271:## #3 bar chart of #2
1750605484272:## some extra fuckery to get the height to accept it
1750605484272:counts <- numeric(length(colors))
1750605484272:## could have just gone back and modified 2, sure...
1750605484272:for(i in seq_along(colors))
1750605484272:{
1750605484272:clr <- colors[i]
1750605484272:counts[i] <- sum(mnm$color == clr)
1750605484272:}
1750605484275:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750605484290:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750605484290:## #4
1750605484291:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750605484291:## type-color-count (interesting that numeric sets it to a vector...)
1750605484291:for(kind in types)
1750605484291:{
1750605484291:i = 1
1750605484291:for(clr in colors)
1750605484291:{
1750605484291:## set the (row)column-vector to hold, reusing counts
1750605484291:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750605484291:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750605484291:}
1750605484291:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750605484291:}
1750605484338:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750605484338:## was too difficult for me to figure out)
1750605484338:## #5 && #6
1750605484338:## are mnms of different type the same weight, hard no (recall #1)
1750605484338:for(kind in types)
1750605484338:{
1750605484338:stdw <- sd(mnm$mass[mnm$type == kind])
1750605484339:stds <- sd(mnm$diameter[mnm$type == kind])
1750605484339:avg <- mean(mnm$mass[mnm$type == kind])
1750605484339:imprint <- mean(mnm$diameter[mnm$type == kind])
1750605484339:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750605484339:"\naverage size:", imprint,
1750605484339:"\nstd weight / avg weight", stdw / avg,
1750605484339:"\nstd size / average size", stds / imprint,
1750605484339:"\n\n")
1750605484339:}
1750605484353:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750605484353:## #6 see above
1750605484353:## #7
1750605484353:## ... what?? are we using average or literally picking m&ms from the pile?
1750605484353:## plain          369.9 G
1750605484353:## peanut         369.9 G
1750605484353:## peanut butter  360   G
1750605484354:for(kind in types)
1750605484354:{
1750605484354:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750605484354:}
1750605484357:## damn, all over... okay
1750605484357:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750605484357:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750605484357:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750605484358:## wow, the smallest is less than half the largest...
1750605484358:pb
1750605484362:pnut ## close here, too
1750605484366:## let's see what AI says...
1750605484366:# Function to find if there is a subset with a given sum
1750605484366:subset_sum <- function(weights, target) {
1750605484366:n <- length(weights)
1750605484366:dp <- matrix(FALSE, n + 1, target + 1)
1750605484366:dp[1, 1] <- TRUE
1750605484367:for (i in 1:n) {
1750605484367:for (j in 1:(target + 1)) {
1750605484367:if (j < weights[i]) {
1750605484367:dp[i + 1, j] <- dp[i, j]
1750605484367:} else {
1750605484367:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750605484367:}
1750605484367:}
1750605484367:}
1750605484368:return(dp[n + 1, target + 1])
1750605484368:}
1750605484368:# Example usage
1750605484368:target_weight <- 369.9
1750605484368:result <- subset_sum(pnut, target_weight)
1750605484385:if (result) {
1750605484385:print("There is a subset of weights that sums to the target weight.")
1750605484385:} else {
1750605484385:print("No subset of weights sums to the target weight.")
1750605484386:}
1750605484386:## above, dynamic programming approach.
1750605484386:###################################################
1750605484386:## below, simpler break point approach.
1750605484386:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750605484386:#find_subset <- function(weights, target, current = c(), index = 1) {
1750605484386:#  if (target == 0) {
1750605484387:#    return(current)
1750605484387:#  }
1750605484387:#  if (target < 0 || index > length(weights)) {
1750605484387:#    return(NULL)
1750605484387:#  }
1750605484387:#
1750605484387:#  # Include the current weight
1750605484387:#  with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750605484387:#
1750605484387:#  # Exclude the current weight
1750605484387:#  without_current <- find_subset(weights, target, current, index + 1)
1750605484387:#
1750605484388:#  return(if (!is.null(with_current)) with_current else without_current)
1750605484388:#}
1750605484388:## gotta rerun my shell a lot and this is super slow...
1750605484388:# Example usage
1750605484388:result_combination <- find_subset(pnut, target_weight)
1750605527996:setwd("/workspaces/r_dev_container/MnM5")
1750605527996:mnm <- read.csv("mms.csv")
1750605527999:colors <- unique(mnm$color)
1750605527999:colors
1750605528000:types <- unique(mnm$type)
1750605528000:## #1
1750605528000:## find the mean and standard deviation for diameter and mass using
1750605528000:## type, type+color
1750605528000:for(kind in types)
1750605528000:{
1750605528001:avgw <- mean(mnm$mass[mnm$type == kind])
1750605528001:avgs <- mean(mnm$diameter[mnm$type == kind])
1750605528001:stdw <- sd(mnm$mass[mnm$type == kind])
1750605528001:stds <- sd(mnm$diameter[mnm$type == kind])
1750605528001:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750605528001:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750605528001:cat("\n\n",kind,"color breakdown:\n")
1750605528002:for(clr in colors)
1750605528002:{
1750605528002:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605528002:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605528002:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605528002:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605528002:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750605528002:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750605528003:}
1750605528003:}
1750605528028:## #2
1750605528028:## proportion of each type of color
1750605528029:## I don't need to subtract for the header, right?
1750605528029:mnm
1750605528054:## nope.. okay
1750605528054:total = nrow(mnm)
1750605528055:total
1750605528055:for(clr in colors)
1750605528055:{
1750605528055:clrcnt = sum(mnm$color == clr)
1750605528055:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750605528055:}
1750605528060:## #3 bar chart of #2
1750605528060:## some extra fuckery to get the height to accept it
1750605528060:counts <- numeric(length(colors))
1750605528061:## could have just gone back and modified 2, sure...
1750605528061:for(i in seq_along(colors))
1750605528061:{
1750605528061:clr <- colors[i]
1750605528061:counts[i] <- sum(mnm$color == clr)
1750605528061:}
1750605528064:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750605528076:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750605528076:## #4
1750605528076:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750605528077:## type-color-count (interesting that numeric sets it to a vector...)
1750605528077:for(kind in types)
1750605528077:{
1750605528077:i = 1
1750605528077:for(clr in colors)
1750605528077:{
1750605528077:## set the (row)column-vector to hold, reusing counts
1750605528077:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750605528077:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750605528077:}
1750605528078:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750605528078:}
1750605528126:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750605528126:## was too difficult for me to figure out)
1750605528126:## #5 && #6
1750605528126:## are mnms of different type the same weight, hard no (recall #1)
1750605528126:for(kind in types)
1750605528126:{
1750605528126:stdw <- sd(mnm$mass[mnm$type == kind])
1750605528127:stds <- sd(mnm$diameter[mnm$type == kind])
1750605528127:avg <- mean(mnm$mass[mnm$type == kind])
1750605528127:imprint <- mean(mnm$diameter[mnm$type == kind])
1750605528127:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750605528127:"\naverage size:", imprint,
1750605528127:"\nstd weight / avg weight", stdw / avg,
1750605528127:"\nstd size / average size", stds / imprint,
1750605528127:"\n\n")
1750605528127:}
1750605528135:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750605528135:## #6 see above
1750605528135:## #7
1750605528135:## ... what?? are we using average or literally picking m&ms from the pile?
1750605528135:## plain          369.9 G
1750605528135:## peanut         369.9 G
1750605528135:## peanut butter  360   G
1750605528135:for(kind in types)
1750605528135:{
1750605528135:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750605528135:}
1750605528138:## damn, all over... okay
1750605528138:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750605528138:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750605528138:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750605528138:## wow, the smallest is less than half the largest...
1750605528138:pb
1750605528140:pnut ## close here, too
1750605528142:## let's see what AI says...
1750605528142:# Function to find if there is a subset with a given sum
1750605528142:subset_sum <- function(weights, target) {
1750605528142:n <- length(weights)
1750605528142:dp <- matrix(FALSE, n + 1, target + 1)
1750605528142:dp[1, 1] <- TRUE
1750605528142:for (i in 1:n) {
1750605528142:for (j in 1:(target + 1)) {
1750605528142:if (j < weights[i]) {
1750605528142:dp[i + 1, j] <- dp[i, j]
1750605528142:} else {
1750605528142:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750605528142:}
1750605528142:}
1750605528142:}
1750605528143:return(dp[n + 1, target + 1])
1750605528143:}
1750605528143:# Example usage
1750605528143:target_weight <- 369.9
1750605528143:result <- subset_sum(pnut, target_weight)
1750605528159:if (result) {
1750605528159:print("There is a subset of weights that sums to the target weight.")
1750605528159:} else {
1750605528159:print("No subset of weights sums to the target weight.")
1750605528160:}
1750605528160:## above, dynamic programming approach.
1750605528160:###################################################
1750605528160:## below, simpler break point approach.
1750605528160:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750605528160:#find_subset <- function(weights, target, current = c(), index = 1) {
1750605528160:#  if (target == 0) {
1750605528160:#    return(current)
1750605528160:#  }
1750605528160:#  if (target < 0 || index > length(weights)) {
1750605528160:#    return(NULL)
1750605528160:#  }
1750605528160:#
1750605528160:#  # Include the current weight
1750605528160:#  with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750605528160:#
1750605528160:#  # Exclude the current weight
1750605528160:#  without_current <- find_subset(weights, target, current, index + 1)
1750605528160:#
1750605528160:#  return(if (!is.null(with_current)) with_current else without_current)
1750605528160:#}
1750605528161:## gotta rerun my shell a lot and this is super slow...
1750605528161:# Example usage
1750605528161:#result_combination <- find_subset(pnut, target_weight)
1750605528161:#if (!is.null(result_combination)) {
1750605528161:#  print(paste("Combination found:", toString(result_combination)))
1750605528161:#} else {
1750605528161:#  print("No combination of weights sums to the target weight.")
1750605528161:#}
1750605528161:#############################################################
1750605528161:#############################################################
1750605528161:## still #7
1750605528161:## plain          369.9 G (actual 399.55)
1750605528161:## peanut         369.9 G (actual 397.45)
1750605528161:## peanut butter  360   G (actual 361.42)
1750605528161:## the smallest we can make is .72, (2) .73, .74, (2) .76
1750605528161:plain
1750605528165:plainOver <- 399.55 - 369.9 # (29.65, wow, over an ounce extra!)
1750605528165:## okay... well, I say we just add up a bunch from the vectors and make it even
1750605528165:x = sum(plain[1:419])
1750605528165:x
1750605528165:369.9 - x ## 3.98 (3.98 / 5 = .796)
1750605528166:.8 + .8 + .8 + .79 + .79
1750605528166:## SOLUTION TO PLAIN ##
1750605528166:## sort them by weight, descending. Take the first 419 M&Ms then numbers 430-434
1750605528166:## AND VIOLA, you have EXACT Weight. Don't worry about the profits or the customer...
1750605528166:## and since this is actually a cheap question that I've over-killed to not even find the desired solutions for
1750605528166:## (one answer that covers 2, and an algorithm that I didn't write which could solve all of them) I'm moving on
1750605528166:## #8
1750605528166:## Now we are going to revise the procedure:  color matters.  As you add M&Ms
1750605528166:## to the bag, you must first generate their color randomly and then use the
1750605528166:## parameters from that color (calculated in Step 1 B) to specify the values
1750605528166:## for weight and diameter randomly using a distribution.  Use the same
1750605528166:## assumptions for your previous bag samples. (20 points)
1750605528166:## plain / peanut / peanut butter weights
1750605528166:## blue       brown       green       orange      red         yellow
1750605528166:## 0.86023    0.87058     0.86989     0.86480     0.85448     0.86547
1750605528166:## 2.57593    2.57130     2.68074     2.57035     2.62650     2.56704
1750605528166:## 1.85250    1.80310     1.92029     1.73000     1.47048     1.73962
1750605528167:colors <- sort(colors)
1750605528167:colors
1750605528167:## plain color weights
1750605528167:pcw <- c(0.86023, 0.87058, 0.86989, 0.86480, 0.85448, 0.86547)
1750605528167:## pnut color weights
1750605528167:pncw <- c(2.57593, 2.57130, 2.68074, 2.57035, 2.62650, 2.56704)
1750605528167:## pnut butter color weights
1750605528167:pbcw <- c(1.85250, 1.80310, 1.92029, 1.73000, 1.47048, 1.73962)
1750605528167:## wait a minute... but the color distribution isn't flat...
1750605528167:makeOver <- function(weightVector, colorOrder, weight)
1750605528167:{
1750605528167:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750605528167:weight <- 0
1750605528167:colorDist <- rep(0, 6)
1750605528167:total <- 0
1750605528167:## repeat while under, this should execute once more bringing it over
1750605528167:while(weight < 369.9)
1750605528168:{
1750605528168:m <- sample(1:6, 1)
1750605528168:weight <- weight + weightVector[m]
1750605528168:colorDist[m] <- colorDist[m] + 1
1750605528168:total <- total + 1
1750605528168:}
1750605528168:cat(total, "M&M's for a weight of", weight)
1750605528168:for(x in 1:6)
1750605528168:{
1750605528168:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750605528168:}
1750605528168:}
1750605528168:makeOver(pcw, colors, 369.9)
1750605606791:makeOver(pncw, colors, 369.9)
1750605606797:makeOver(pbcw, colors, 360)
1750605656895:makeOver(pcw, colors, 369.9)
1750605656901:makeOver(pncw, colors, 369.9)
1750605656905:makeOver(pbcw, colors, 360)
1750605685968:## wait a minute... but the color distribution isn't flat...
1750605685968:makeOver <- function(weightVector, colorOrder, weight)
1750605685968:{
1750605685968:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750605685968:weight <- 0
1750605685969:colorDist <- rep(0, 6)
1750605685969:total <- 0
1750605685969:## repeat while under, this should execute once more bringing it over
1750605685970:while(weight < 369.9)
1750605685970:{
1750605685970:m <- sample(1:6, 1)
1750605685970:weight <- weight + weightVector[m]
1750605685971:colorDist[m] <- colorDist[m] + 1
1750605685971:total <- total + 1
1750605685971:}
1750605685972:cat(total, "M&M's for a weight of", weight, "\n")
1750605685972:for(x in 1:6)
1750605685972:{
1750605685972:cat("\nColor", colorOrder[x], "was picked", colorDist[x], "times")
1750605685972:}
1750605685972:}
1750605685973:makeOver(pcw, colors, 369.9)
1750605685986:makeOver(pncw, colors, 369.9)
1750605685988:makeOver(pbcw, colors, 360)
1750605703963:makeOver <- function(weightVector, colorOrder, weight)
1750605703963:{
1750605703963:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750605703964:weight <- 0
1750605703964:colorDist <- rep(0, 6)
1750605703964:total <- 0
1750605703964:## repeat while under, this should execute once more bringing it over
1750605703964:while(weight < 369.9)
1750605703964:{
1750605703964:m <- sample(1:6, 1)
1750605703964:weight <- weight + weightVector[m]
1750605703964:colorDist[m] <- colorDist[m] + 1
1750605703964:total <- total + 1
1750605703965:}
1750605703965:cat(total, "M&M's for a weight of", weight, "\n")
1750605703965:for(x in 1:6)
1750605703965:{
1750605703965:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750605703966:}
1750605703966:}
1750605703966:makeOver(pcw, colors, 369.9)
1750605703980:makeOver(pncw, colors, 369.9)
1750605703982:makeOver(pbcw, colors, 360)
1750606005053:## wait a minute... but the color distribution isn't flat...
1750606005054:makeOver <- function(weightVector, colorOrder, targetWeight)
1750606005054:{
1750606005054:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750606005054:weight <- 0
1750606005054:colorDist <- rep(0, 6)
1750606005054:total <- 0
1750606005054:## repeat while under, this should execute once more bringing it over
1750606005054:while(weight < targetWeight)
1750606005054:{
1750606005054:m <- sample(1:6, 1)
1750606005054:weight <- weight + weightVector[m]
1750606005055:colorDist[m] <- colorDist[m] + 1
1750606005055:total <- total + 1
1750606005056:}
1750606005056:cat(total, "M&M's for a weight of", weight, "\n")
1750606005056:for(x in 1:6)
1750606005056:{
1750606005056:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750606005056:}
1750606005057:}
1750606005057:makeOver(pcw, colors, 369.9)
1750606005069:makeOver(pncw, colors, 369.9)
1750606005072:makeOver(pbcw, colors, 360)
1750606047784:makeUnder <- function(weightVector, colorOrder, targetWeight)
1750606047784:{
1750606047784:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750606047784:weight <- 0
1750606047784:colorDist <- rep(0, 6)
1750606047784:total <- 0
1750606047784:## repeat while under,...
1750606047785:repeat
1750606047785:{
1750606047785:m <- sample(1:6, 1)
1750606047785:addedWeight <- weight + weightVector[m]
1750606047786:if(weight < targetWeight)
1750606047786:{
1750606047786:weight <- weight + addedWeight
1750606047787:}
1750606047787:else break
1750606047788:colorDist[m] <- colorDist[m] + 1
1750606047788:total <- total + 1
1750606047788:}
1750606047789:cat(total, "M&M's for a weight of", weight, "\n")
1750606047789:for(x in 1:6)
1750606047789:{
1750606047790:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750606047790:}
1750606047790:}
1750606047791:makeUnder(pcw, colors, 369.9)
1750606047802:makeUnder(pncw, colors, 369.9)
1750606047804:makeUnder(pbcw, colors, 360)
1750606209028:makeUnder <- function(weightVector, colorOrder, targetWeight)
1750606209028:{
1750606209028:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750606209028:weight <- 0
1750606209028:colorDist <- rep(0, 6)
1750606209028:total <- 0
1750606209028:## repeat while under,...
1750606209028:repeat
1750606209028:{
1750606209028:m <- sample(1:6, 1)
1750606209029:## sentinel value
1750606209029:if(weight + weightVector[m] > targetWeight)
1750606209030:{break}
1750606209031:## didn't break, add weight, add color tally and total
1750606209031:weight <- weight + weightVector[m]
1750606209032:colorDist[m] <- colorDist[m] + 1
1750606209032:total <- total + 1
1750606209032:}
1750606209033:cat(total, "M&M's for a weight of", weight, "\n")
1750606209034:for(x in 1:6)
1750606209034:{
1750606209034:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750606209034:}
1750606209034:}
1750606209035:makeUnder(pcw, colors, 369.9)
1750606209049:makeUnder(pncw, colors, 369.9)
1750606209051:makeUnder(pbcw, colors, 360)
1750789089154:paint <- read.csv(file.choose(), header=T)
1750789116511:paint <- read.csv(file.choose(), header=T)
1750789121391:paint
1750789285575:plot(paint)
1750789356043:names(paint)
1750789604278:plot(paint$RA, paint$R1)
1750789713941:cor(paint$RA, paint$R1)
1750789758716:incp = which(is.na(paint$RA) |is.na(paint$R1))
1750789762507:incp
1750789847076:attach(paint) ## make it easier to work with here
1750789965860:colnames
1750789980476:colnames = c(names(paint))
1750789980477:colnames
1750790023565:for(c in colnames)
1750790023565:{
1750790023565:for(c2 in colnames)
1750790023565:cor(c,c2)
1750790023565:}
1750790078747:for(c in colnames)
1750790078747:{
1750790078747:for(c2 in colnames)
1750790078748:{
1750790078748:if(is.numeric(c) & is.numeric(c2))
1750790078748:{cor(c,c2)}
1750790078748:}
1750790078748:}
1750790113925:for(c in colnames)
1750790113925:{
1750790113925:for(c2 in colnames)
1750790113925:{
1750790113925:if(is.numeric(c) & is.numeric(c2))
1750790113925:{cor(paint$c,paint$c2)}
1750790113925:}
1750790113925:}
1750790352622:cols <- colnames(data)
1750790352622:# Iterate over column names
1750790352623:for (i in 1:length(cols))
1750790352623:{
1750790352623:for (j in (i+1):length(cols))
1750790352623:{
1750790352623:cor(cols[i], cols[j])
1750790352623:# Store the result in the correlations data frame
1750790352623:correlations <- rbind(correlations, data.frame(Column1 = col1, Column2 = col2, Correlation = cor_value))
1750790352623:}
1750790352624:}
1750790373406:# Iterate over column names
1750790373407:for (i in 1:length(cols))
1750790373407:{
1750790373407:for (j in (i+1):length(cols))
1750790373407:{
1750790373407:cor(cols[i], cols[j])
1750790373407:}
1750790373407:}
1750790386615:cols <- colnames(data)
1750790386615:# Iterate over column names
1750790386615:for (i in 1:length(cols))
1750790386615:{
1750790386615:for (j in (i+1):length(cols))
1750790386615:{
1750790386616:cor(cols[i], cols[j])
1750790386616:}
1750790386616:}
1750790403839:detatch(paint)
1750790429527:detatch("paint", unload=T)
1750790438118:detach("paint", unload=T)
1750790449530:paint$RA
1750790551982:names(paint)
1750790652208:detach("paint")
1750790668547:detach("paint", unload=T)
1750790672366:attach(paint)
1750790672368:detach("paint", unload=T)
1750790693471:paint$RA
1750790719285:plot(paint$RA, paint$R1)
1750790809904:col_names <- colnames(paint)
1750790809904:# Create an empty data frame to store correlations
1750790809905:correlations <- data.frame()
1750790809905:# Iterate over column names
1750790809905:for (i in 1:length(col_names)) {
1750790809905:for (j in (i+1):length(col_names)) {
1750790809905:col1 <- col_names[i]
1750790809905:col2 <- col_names[j]
1750790809905:cor_value <- cor(data[[col1]], data[[col2]], use = "complete.obs")
1750790809905:# Store the result in the correlations data frame
1750790809906:correlations <- rbind(correlations, data.frame(Column1 = col1, Column2 = col2, Correlation = cor_value))
1750790809906:}
1750790809906:}
1750790943577:for(col in columns)
1750790943577:{
1750790943577:for(col2 in columns)
1750790943577:{
1750790943577:if(is.numeric(col) & is.numeric(col2))
1750790943577:{
1750790943578:cor(col, col2)
1750790943578:}
1750790943578:}
1750790943578:}
1750790948371:columns <- colnames(paint)
1750790948371:for(col in columns)
1750790948371:{
1750790948371:for(col2 in columns)
1750790948371:{
1750790948372:if(is.numeric(col) & is.numeric(col2))
1750790948372:{
1750790948372:cor(col, col2)
1750790948372:}
1750790948372:}
1750790948372:}
1750790956776:columns <- colnames(paint)
1750790956776:for(col in columns)
1750790956776:{
1750790956777:for(col2 in columns)
1750790956777:{
1750790956777:if(is.numeric(col) & is.numeric(col2))
1750790956777:{
1750790956777:cor(col, col2)
1750790956777:}
1750790956777:}
1750790956777:}
1750790995913:columns <- colnames(paint)
1750790995914:for(col in columns)
1750790995914:{
1750790995914:for(col2 in columns)
1750790995914:{
1750790995914:if(is.numeric(col) & is.numeric(col2))
1750790995914:{
1750790995914:cat("Correlation between",col, "and", col2, "is: ",cor(col, col2), "\n")
1750790995914:}
1750790995914:}
1750790995914:}
1750791017052:for(col in columns)
1750791017053:{
1750791017053:for(col2 in columns)
1750791017053:{
1750791017053:if(is.numeric(col) & is.numeric(col2))
1750791017053:{
1750791017053:print("Correlation between",col, "and", col2, "is: ",cor(col, col2), "\n")
1750791017054:}
1750791017054:}
1750791017054:}
1750791112082:library(MASS)
1750791121470:library(MASS)
1750791146876:plot(paint$RA~paint$R1)
1750791269052:cor(columns,columns)
1750791327603:for(col in columns)
1750791327603:{
1750791327603:if(is.numeric(col))
1750791327603:{
1750791327603:for(col2 in columns)
1750791327603:{
1750791327603:if(is.numeric(col2))
1750791327603:{
1750791327604:cor(col,col2)
1750791327604:}
1750791327604:}
1750791327604:}
1750791327604:}
1750791337622:print(cor(col,col2))
1750791345620:columns <- colnames(paint)
1750791345620:for(col in columns)
1750791345620:{
1750791345620:if(is.numeric(col))
1750791345620:{
1750791345620:for(col2 in columns)
1750791345620:{
1750791345620:if(is.numeric(col2))
1750791345621:{
1750791345621:print(cor(col,col2))
1750791345621:}
1750791345621:}
1750791345621:}
1750791345621:}
1750791381334:for (col in columns) {
1750791381334:if (is.numeric(data[[col]])) {  # Check if the column is numeric
1750791381334:for (col2 in columns) {
1750791381334:if (is.numeric(data[[col2]]) && col != col2) {  # Check if the second column is numeric and not the same as the first
1750791381334:correlation_value <- cor(data[[col]], data[[col2]], use = "complete.obs")  # Calculate correlation
1750791381335:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750791381335:}
1750791381335:}
1750791381335:}
1750791381335:}
1750791462844:# Assuming 'data' is your data frame
1750791462844:# Ensure that 'data' is a data frame
1750791462844:if (!exists("paint") || !is.data.frame(paint)) {
1750791462844:stop("The 'data' object does not exist or is not a data frame.")
1750791462845:}
1750791462845:# Get the column names of your data frame
1750791462845:columns <- colnames(paint)
1750791462845:# Iterate over the columns
1750791462845:for (col in columns) {
1750791462845:if (is.numeric(data[[col]])) {  # Check if the column is numeric
1750791462845:for (col2 in columns) {
1750791462845:if (is.numeric(data[[col2]]) && col != col2) {  # Check if the second column is numeric and not the same as the first
1750791462845:correlation_value <- cor(data[[col]], data[[col2]], use = "complete.obs")  # Calculate correlation
1750791462846:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750791462846:}
1750791462846:}
1750791462846:}
1750791462846:}
1750791485446:# Assuming 'data' is your data frame
1750791485446:# Ensure that 'data' is a data frame
1750791485446:if (!exists("paint") || !is.data.frame(paint)) {
1750791485447:stop("The 'data' object does not exist or is not a data frame.")
1750791485447:}
1750791485447:# Get the column names of your data frame
1750791485447:columns <- colnames(paint)
1750791485447:# Iterate over the columns
1750791485447:for (col in columns) {
1750791485448:if (is.numeric(paint[[col]])) {  # Check if the column is numeric
1750791485448:for (col2 in columns) {
1750791485448:if (is.numeric(paint[[col2]]) && col != col2) {  # Check if the second column is numeric and not the same as the first
1750791485448:correlation_value <- cor(paint[[col]], paint[[col2]], use = "complete.obs")  # Calculate correlation
1750791485448:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750791485448:}
1750791485448:}
1750791485448:}
1750791485448:}
1750791729185:#####################################################################
1750791729185:led <- read.csv(file.choose(), header=T)
1750791763977:names(led)
1750792006870:plot(led$R, led$R.LED.on.)
1750792006889:plot(led$B, led$B.LED.on.)
1750792006908:plot(led$g, led$G.LED.on.)
1750792056367:cor(led$R, led$R.LED.on.)
1750792056367:cor(led$B, led$B.LED.on.)
1750792056367:cor(led$g, led$G.LED.on.)
1750792069582:cor(led$g, led$G.LED.on.)
1750792092744:cor(led$R, led$R.LED.on.)
1750792092744:cor(led$B, led$B.LED.on.)
1750792092745:cor(led$G, led$G.LED.on.)
1750792092745:cor(led$R, led$R.Red.)
1750792092745:cor(led$B, led$B.Blue.)
1750792092745:cor(led$G,led$G.Green.)
1750792109001:##################################################################
1750792109001:led <- read.csv(file.choose(), header=T)
1750792115653:plot(led$R, led$R.LED.on.)
1750792115672:plot(led$B, led$B.LED.on.)
1750792115691:plot(led$G, led$G.LED.on.)
1750792115710:plot(led$R, led$R.Red.)
1750792115728:plot(led$B, led$B.Blue.)
1750792115748:plot(led$G, led$G.Green.)
1750792115766:cor(led$R, led$R.LED.on.)
1750792115767:cor(led$B, led$B.LED.on.)
1750792115767:cor(led$G, led$G.LED.on.)
1750792115767:cor(led$R, led$R.Red.)
1750792115767:cor(led$B, led$B.Blue.)
1750792115767:cor(led$G,led$G.Green.)
1750792252411:lr(paint$RA, paint$R1)
1750792307449:k =  lm(paint$RA, paint$R1)
1750792335182:k =  lm(paint$RA~paint$R1, data=paint)
1750792335184:k
1750792421896:## iterate over the columns
1750792421896:for (col in columns)
1750792421896:{
1750792421896:if (is.numeric(paint[[col]]))
1750792421896:{  # Check if the column is numeric
1750792421896:for (col2 in columns)
1750792421896:{
1750792421896:if (is.numeric(paint[[col2]]) && col != col2)
1750792421896:{  # Check if the second column is numeric and not the same as the first
1750792421897:correlation_value <- cor(paint[[col]], paint[[col2]], use = "complete.obs")  # Calculate correlation
1750792421897:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750792421897:k =  lm(paint[[col]]~paint[[col2]], data=paint)
1750792421897:k
1750792421897:}
1750792421897:}
1750792421897:}
1750792421897:}
1750792532474:## ooh, I think he wants this, not ^^ that... shit this is gunna take more time than I got..
1750792532474:k =  lm(paint$RA~paint$R1, data=paint)
1750792532475:k
1750792595770:survey(paint)
1750792610385:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750792613132:summary(paint)
1750856446450:#####################################################################
1750856446450:led <- read.csv(file.choose(), header=T)
1750856511371:########################
1750856511371:led <- read.csv(file.choose(), header=T)
1750856525163:plot(led$R, led$R.LED.on.)
1750856540730:library(MASS)
1750856540748:## idk if I need the library line in here. I wish I had time to play around...
1750856540749:paint <- read.csv(file.choose(), header=T)
1750856778823:## first part, use the RGB file
1750856778823:rgb = read.csv(file.choose(), header=T)
1750856942612:names(rgb
1750856942613:)
1750856965215:columns = names(rgb)
1750856965216:columns
1750857100351:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857105493:rr1
1750857168012:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857168014:summary(rr1)
1750857168027:plot(rgb$RA,rgb$R1)
1750857168084:abline(rr1, col = "red")
1750857241773:abline(rr1, col = "red")
1750857257054:## lm for the linear regression
1750857257054:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857257055:summary(rr1)
1750857257060:## see what it looks like
1750857257060:plot(rgb$RA,rgb$R1)
1750857257082:abline(rr1, col = "red")
1750857280765:# Sample data
1750857280765:your_data <- data.frame(x = c(1, 2, 3, 4, 5), y = c(2, 3, 5, 7, 11))
1750857280766:# Fit the model
1750857280766:model <- lm(y ~ x, data = your_data)
1750857280769:# Summary of the model
1750857280769:summary(model)
1750857280777:# Plot
1750857280777:plot(your_data$x, your_data$y)
1750857280809:abline(model, col = "red")
1750857297317:## lm for the linear regression
1750857297317:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857297319:summary(rr1)
1750857297324:## see what it looks like
1750857297325:plot(rgb$RA,rgb$R1)
1750857297346:abline(rr1, col = "red")
1750857320694:abline(rr1, col = "red")
1750857330262:abline(rr1, col = "blue")
1750857344798:abline(rr1, col = "red")
1750857414630:## lm for the linear regression
1750857414631:rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
1750857414634:summary(rr1)
1750857414640:## see what it looks like
1750857414640:plot(rgb$RA,rgb$R2)
1750857414659:abline(rr1, col = "red")
1750857440335:## lm for the linear regression
1750857440335:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857440336:summary(rr1)
1750857440342:## see what it looks like
1750857440342:plot(rgb$RA,rgb$R1)
1750857440364:abline(rr1, col = "red")
1750857440365:## lm for the linear regression
1750857440365:rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
1750857440366:summary(rr1)
1750857440370:## see what it looks like
1750857440371:plot(rgb$RA,rgb$R2)
1750857440392:abline(rr1, col = "red")
1750857440392:## lm for the linear regression
1750857440392:rr1 <- lm(rgb$R1~rgb$R2, data = rgb)
1750857440393:summary(rr1)
1750857440395:## see what it looks like
1750857440395:plot(rgb$R1,rgb$R2)
1750857440421:abline(rr1, col = "red")
1750857545887:## lm for the linear regression
1750857545887:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857545889:summary(rr1)
1750857545897:## see what it looks like
1750857545897:plot(rgb$RA,rgb$R1)
1750857545927:abline(rr1, col = "red")
1750857545927:## lm for the linear regression
1750857545927:rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
1750857545928:summary(rr1)
1750857545930:## see what it looks like
1750857545930:plot(rgb$RA,rgb$R2)
1750857545950:abline(rr2, col = "red")
1750857545950:## lm for the linear regression
1750857545950:r1r2 <- lm(rgb$R1~rgb$R2, data = rgb)
1750857545951:summary(rr1)
1750857545953:## see what it looks like
1750857545953:plot(rgb$R1,rgb$R2)
1750857545975:abline(r1r2, col = "red")
1750857693332:## lm for the linear regression
1750857693332:gg1 <- lm(rgb$GA~rgb$G1, data = rgb)
1750857693334:summary(gg1)
1750857693341:## see what it looks like
1750857693341:plot(rgb$GA,rgb$G1)
1750857693361:abline(gg1, col = "green")
1750857693361:## lm for the linear regression
1750857693361:gg2 <- lm(rgb$GA~rgb$G2, data = rgb)
1750857693362:summary(gg2)
1750857693365:## see what it looks like
1750857693365:plot(rgb$RA,rgb$R1)
1750857693384:abline(rr1, col = "green")
1750857693384:## lm for the linear regression
1750857693384:g1g2 <- lm(rgb$G1~rgb$G2, data = rgb)
1750857693385:summary(g1g2)
1750857693392:## see what it looks like
1750857693392:plot(rgb$G1,rgb$G2)
1750857693412:abline(g1g2, col = "green")
1750857860441:## lm for the linear regression
1750857860441:bb1 <- lm(rgb$BA~rgb$B1, data = rgb)
1750857860443:summary(bb1)
1750857860451:## see what it looks like
1750857860451:plot(rgb$BA,rgb$B1)
1750857860473:abline(bb1, col = "blue")
1750857860473:## lm for the linear regression
1750857860473:bb2 <- lm(rgb$BA~rgb$B2, data = rgb)
1750857860475:summary(bb2)
1750857860479:## see what it looks like
1750857860479:plot(rgb$BA,rgb$B2)
1750857860499:abline(bb2, col = "blue")
1750857860499:## lm for the linear regression
1750857860499:b1b2 <- lm(rgb$B1~rgb$B2, data = rgb)
1750857860500:summary(b1b2)
1750857860502:## see what it looks like
1750857860502:plot(rgb$B1,rgb$B2)
1750857860525:abline(b1b2, col = "red")
1750857871591:## lm for the linear regression
1750857871591:bb1 <- lm(rgb$BA~rgb$B1, data = rgb)
1750857871593:summary(bb1)
1750857871599:## see what it looks like
1750857871599:plot(rgb$BA,rgb$B1)
1750857871617:abline(bb1, col = "blue")
1750857871618:## lm for the linear regression
1750857871618:bb2 <- lm(rgb$BA~rgb$B2, data = rgb)
1750857871618:summary(bb2)
1750857871622:## see what it looks like
1750857871622:plot(rgb$BA,rgb$B2)
1750857871641:abline(bb2, col = "blue")
1750857871641:## lm for the linear regression
1750857871641:b1b2 <- lm(rgb$B1~rgb$B2, data = rgb)
1750857871642:summary(b1b2)
1750857871645:## see what it looks like
1750857871645:plot(rgb$B1,rgb$B2)
1750857871664:abline(b1b2, col = "blue")
1750858505140:polyRR1 <- lm(rgb$RA~poly(rgb$R1, 2), data = rgb)
1750858519761:plot(polyRR1)
1750858670497:lines(x_seq, predicted_y, col = "blue", lwd = 2)
1750858708061:polyRR1 <- lm(RA ~ poly(R1, 2), data = rgb)
1750858708063:# Plot the data points
1750858708063:plot(rgb$R1, rgb$RA, main = "Polynomial Regression Fit", xlab = "R1", ylab = "RA", pch = 19)
1750858708088:# Create a sequence of values for R1 to predict RA
1750858708088:x_seq <- seq(min(rgb$R1), max(rgb$R1), length.out = 100)
1750858708089:# Predict RA values using the polynomial regression model
1750858708089:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750858708090:# Add the polynomial fit to the plot
1750858708090:lines(x_seq, predicted_y, col = "blue", lwd = 2)
1750858920283:## polynomial regressions
1750858920283:## model <- lm(y ~ poly(x, degree), data)
1750858920283:polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)
1750858920286:## plot the points
1750858920286:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 19)
1750858920308:# Create a sequence of values for R1 to predict RA
1750858920308:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750858920308:# Predict RA values using the polynomial regression model
1750858920308:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750858966495:polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)
1750858973020:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 19)
1750858976576:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750858983762:# Predict RA values using the polynomial regression model
1750858983762:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq)
1750858988950:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750859001031:# Predict RA values using the polynomial regression model
1750859001031:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750859014206:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750859018338:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750859030995:## polynomial regressions
1750859030995:## model <- lm(y ~ poly(x, degree), data)
1750859030996:polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)
1750859030998:## plot the points
1750859030998:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 19)
1750859031022:# Create a sequence of values for R1 to predict RA
1750859031022:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750859031023:# Predict RA values using the polynomial regression model
1750859031023:predicted_y <- predict(polyRR1, newdata = data.frame(RA = x_seq))
1750859031024:# Add the polynomial fit to the plot
1750859031024:lines(x_seq, predicted_y, col = "red", lwd = 2)
1750859607883:## plot the points
1750859607883:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 1)
1750859614804:## plot the points
1750859614805:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 2)
1750859619410:## plot the points
1750859619410:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 3)
1750859623136:## plot the points
1750859623136:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 4)
1750859627426:## plot the points
1750859627426:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 5)
1750859631913:## plot the points
1750859631913:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 6)
1750859636022:## plot the points
1750859636023:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 7)
1750859641354:## plot the points
1750859641357:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 8)
1750859646273:## plot the points
1750859646273:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 9)
1750859651555:## plot the points
1750859651555:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 10)
1750859655868:## plot the points
1750859655868:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 11)
1750859662037:## plot the points
1750859662037:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 12)
1750859666856:## plot the points
1750859666856:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 13)
1750859671165:## plot the points
1750859671165:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 14)
1750859680476:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 15)
1750859684217:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 16)
1750859690086:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 17)
1750859694357:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 18)
1750859895879:## loop over the vectors in the clrs matrix thingy
1750859895880:for(color in clrs)
1750859895880:{
1750859895880:## set up the pairs of colors
1750859895880:one = c(color[1], color[2])
1750859895880:two = c(color[1], color[3])
1750859895880:thr = c(color[2], color[3])
1750859895880:pairs = c(one, two, thr) ## I feel like I'm going too many levels deep here
1750859895880:for(pair in pairs)
1750859895880:{
1750859895880:## do the poly-fit
1750859895880:poly <- lm(pair[1] ~ poly(pair[2], 2), data = rgb)
1750859895881:## plot the poitns
1750859895881:plot(rgb[[pair[1]]], rgb[[pair[2]]], main = cat(pair[1], " ~ ", pair[2]),
1750859895881:xlab = pair[1], ylab = pair[2], pch = 18)
1750859895881:## sequence a bunch of points along the x
1750859895882:x_seq <- seq(min(rgb[[pair[1]]]), max(rgb[[pair[1]]]), length.out = 100)
1750859895882:## fit the curve
1750859895882:predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))
1750859988444:## Set the colors and make a vector to iterate over those vectors
1750859988444:reds = c('RA', 'R1', 'R2')
1750859988444:grns = c('GA', 'G1', 'G2')
1750859988444:blus = c('BA', 'B1', 'B2')
1750859988444:clrs = list(reds, grns, blus)  # Use a list to hold color groups
1750859988444:## Loop over the vectors in the clrs list
1750859988445:for(color_group in clrs) {
1750859988445:## Set up the pairs of colors
1750859988445:one = c(color_group[1], color_group[2])
1750859988445:two = c(color_group[1], color_group[3])
1750859988445:thr = c(color_group[2], color_group[3])
1750859988445:pairs = list(one, two, thr)  # Use a list to store pairs
1750859988445:for(pair in pairs) {
1750859988445:## Do the polynomial fit
1750859988445:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)
1750859988446:## Plot the points
1750859988446:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750859988446:xlab = pair[2], ylab = pair[1], pch = 18)
1750859988447:## Sequence a bunch of points along the x
1750859988447:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750859988447:## Fit the curve
1750859988447:predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))
1750860056698:# Define color groups
1750860056698:reds = c('RA', 'R1', 'R2')
1750860056698:grns = c('GA', 'G1', 'G2')
1750860056698:blus = c('BA', 'B1', 'B2')
1750860056698:clrs = list(reds, grns, blus)  # List to hold color groups
1750860056698:# Loop over the color groups
1750860056699:for(color_group in clrs) {
1750860056699:# Set up pairs of colors
1750860056699:one = c(color_group[1], color_group[2])
1750860056699:two = c(color_group[1], color_group[3])
1750860056699:thr = c(color_group[2], color_group[3])
1750860056699:pairs = list(one, two, thr)  # Store pairs in a list
1750860056700:for(pair in pairs) {
1750860056700:# Perform polynomial fit
1750860056700:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)
1750860056700:# Plot the points
1750860056700:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860056701:xlab = pair[2], ylab = pair[1], pch = 18)
1750860056701:# Generate sequence of x values for prediction
1750860056701:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860056701:# Predict y values based on polynomial fit
1750860056701:predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))
1750860102014:# Define color groups
1750860102014:reds = c('RA', 'R1', 'R2')
1750860102014:grns = c('GA', 'G1', 'G2')
1750860102014:blus = c('BA', 'B1', 'B2')
1750860102015:clrs = list(reds, grns, blus)  # List to hold color groups
1750860102015:# Loop over the color groups
1750860102015:for(color_group in clrs) {
1750860102016:# Set up pairs of colors
1750860102016:one = c(color_group[1], color_group[2])
1750860102016:two = c(color_group[1], color_group[3])
1750860102016:thr = c(color_group[2], color_group[3])
1750860102016:pairs = list(one, two, thr)  # Store pairs in a list
1750860102017:for(pair in pairs) {
1750860102017:# Perform polynomial fit
1750860102017:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)
1750860102018:# Plot the points
1750860102018:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860102018:xlab = pair[2], ylab = pair[1], pch = 18)
1750860102018:# Generate sequence of x values for prediction
1750860102019:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860102019:# Create a data frame for prediction with named columns
1750860102019:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750860102019:# Predict y values based on polynomial fit
1750860102019:predicted_y <- predict(poly, newdata = new_data)
1750860102020:# Set color based on the group
1750860102020:if (all(color_group == reds)) {
1750860102020:use <- "red"
1750860102020:} else if (all(color_group == grns)) {
1750860102020:use <- "green"
1750860102021:} else {
1750860102021:use <- "blue"
1750860102021:}
1750860102021:# Add polynomial line to the plot
1750860102021:lines(x_seq, predicted_y, col = use, lwd = 2)
1750860102022:}
1750860102022:}
1750860451225:# Define color groups
1750860451225:reds = c('RA', 'R1', 'R2')
1750860451225:grns = c('GA', 'G1', 'G2')
1750860451226:blus = c('BA', 'B1', 'B2')
1750860451226:clrs = list(reds, grns, blus)  # List to hold color groups
1750860451226:# Loop over the color groups
1750860451226:for(color_group in clrs) {
1750860451226:# Set up pairs of colors
1750860451226:one = c(color_group[1], color_group[2])
1750860451226:two = c(color_group[1], color_group[3])
1750860451226:thr = c(color_group[2], color_group[3])
1750860451227:pairs = list(one, two, thr)  # Store pairs in a list
1750860451227:for(pair in pairs) {
1750860451227:# Perform logistic regression
1750860451227:logit_model <- glm(as.formula(paste(pair[1], "~", pair[2])), data = rgb, family = binomial)
1750860451228:# Plot the points
1750860451228:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860451228:xlab = pair[2], ylab = pair[1], pch = 18)
1750860451228:# Generate a sequence of x values for prediction
1750860451228:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860451228:# Create a data frame for prediction
1750860451229:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750860451229:# Predict probabilities using the logistic model
1750860451229:predicted_probs <- predict(logit_model, newdata = new_data, type = "response")
1750860451229:# Set color based on the group
1750860451230:if (all(color_group == reds)) {
1750860451230:use <- "red"
1750860451230:} else if (all(color_group == grns)) {
1750860451230:use <- "green"
1750860451230:} else {
1750860451230:use <- "blue"
1750860451231:}
1750860451231:# Add predicted probabilities as a line to the plot
1750860451231:lines(x_seq, predicted_probs, col = use, lwd = 2)
1750860451231:}
1750860451231:}
1750860521505:# Define color groups
1750860521505:reds = c('RA_binary', 'R1', 'R2')  # Ensure RA is binary
1750860521505:grns = c('GA_binary', 'G1', 'G2')   # Ensure GA is binary
1750860521505:blus = c('BA_binary', 'B1', 'B2')   # Ensure BA is binary
1750860521505:clrs = list(reds, grns, blus)  # List to hold color groups
1750860521506:# Loop over the color groups
1750860521506:for(color_group in clrs) {
1750860521506:# Set up pairs of colors
1750860521506:one = c(color_group[1], color_group[2])
1750860521506:two = c(color_group[1], color_group[3])
1750860521506:thr = c(color_group[2], color_group[3])
1750860521506:pairs = list(one, two, thr)  # Store pairs in a list
1750860521506:for(pair in pairs) {
1750860521507:# Perform logistic regression
1750860521507:logit_model <- glm(as.formula(paste(pair[1], "~", pair[2])), data = rgb, family = binomial)
1750860521507:# Plot the points
1750860521507:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860521508:xlab = pair[2], ylab = pair[1], pch = 18)
1750860521508:# Generate a sequence of x values for prediction
1750860521508:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860521509:# Create a data frame for prediction
1750860521509:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750860521509:# Predict probabilities using the logistic model
1750860521509:predicted_probs <- predict(logit_model, newdata = new_data, type = "response")
1750860521510:# Set color based on the group
1750860521510:if (all(color_group == reds)) {
1750860521510:use <- "red"
1750860521511:} else if (all(color_group == grns)) {
1750860521511:use <- "green"
1750860521511:} else {
1750860521511:use <- "blue"
1750860521512:}
1750860521512:# Add predicted probabilities as a line to the plot
1750860521512:lines(x_seq, predicted_probs, col = use, lwd = 2)
1750860521513:}
1750860521513:}
1750861281058:## use color calibration file
1750861281058:clrz = read.csv(file.choose())
1750861297683:names(clrz)
1750944793336:#################################################################################
1750944793336:## use color calibration file
1750944793336:clrz = read.csv(file.choose())
1750944802765:## correlate from R -> R.LED.On or R -> R.RED. or R.LED.on -> R.RED.?
1750944809171:names(clrz)
1750944826121:clr = clrz
1750944831360:names(clr)
1750945646795:## lm for the linear regression
1750945646795:rred <- lm(clr$R~clr$R.RED., data = clr)
1750945658679:## use color calibration file
1750945658679:clr <- read.csv(file.choose())
1750945665996:## correlate from C.LED.on. -> C.CLR.
1750945665997:## from ACTUAL to the COLORED light, and from LED to the appropriate color...
1750945665997:## ... (hardest part in this is figuring out what that means)
1750945665997:## R ~ R.RED. && R ~ R.LED.on.
1750945665997:## lm for the linear regression
1750945665997:rred <- lm(clr$R~clr$R.RED., data = clr)
1750945735829:rred <- lm(clr$R~clr$R.Red., data = clr)
1750945741426:summary(rred)
1750945785119:plot(clr$R, clr$R.Red.)
1750945788627:abline(rred,col = "red")
1750945873166:bblu <- lm(clr$B~clr$B.Blue., data = clr)
1750945873167:summary(bblu)
1750945873173:plot(clr$B, clr$B.Blue.)
1750945873196:abline(bblu, col="blue")
1750945887817:3
1750945971001:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750945971002:summary(ggrn)
1750945971010:plot(clr$G, clr$G.Green.)
1750945971030:abline(ggrn, col = 'green')
1750945989713:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750945989715:summary(ggrn)
1750945989720:plot(clr$G.Green., clr$G)
1750945989740:abline(ggrn, col = 'green')
1750946015360:## same as above, really
1750946015360:rred <- lm(clr$R~clr$R.Red., data = clr)
1750946015362:summary(rred)
1750946015367:plot(clr$R.Red., clr$R)
1750946015391:abline(rred,col = "red")
1750946015392:bblu <- lm(clr$B~clr$B.Blue., data = clr)
1750946015393:summary(bblu)
1750946015397:plot(clr$B.Blue., clr$B)
1750946015418:abline
1750946015419:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750946015419:summary(ggrn)
1750946015422:plot(clr$G.Green., clr$G)
1750946015447:abline(ggrn, col = 'green')
1750946046691:abline(bblu, col = "blue")
1750946289138:## and the LED ~ color
1750946289138:## same as above, really
1750946289138:rred <- lm(clr$R~clr$R.LED.on., data = clr)
1750946289139:summary(rred)
1750946289144:plot(clr$R.Red., clr$R)
1750946289173:abline(rred,col = "red")
1750946289174:bblu <- lm(clr$B~clr$B.LED.on., data = clr)
1750946289175:summary(bblu)
1750946289178:plot(clr$B.Blue., clr$B)
1750946289204:abline(bblu, col = "blue")
1750946289205:ggrn <- lm(clr$G~clr$G.LED.on., data = clr)
1750946289206:summary(ggrn)
1750946289210:plot(clr$G.Green., clr$G)
1750946289244:abline(ggrn, col = 'green')
1750946382672:## same as above, really
1750946382672:rred <- lm(clr$R~clr$R.Red., data = clr)
1750946382674:summary(rred)
1750946382679:plot(clr$R.Red., clr$R)
1750946382700:abline(rred,col = "red")
1750946382700:bblu <- lm(clr$B~clr$B.Blue., data = clr)
1750946382701:summary(bblu)
1750946382705:plot(clr$B.Blue., clr$B)
1750946382727:abline(bblu, col = "blue")
1750946382727:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750946382728:summary(ggrn)
1750946382730:plot(clr$G.Green., clr$G)
1750946382761:abline(ggrn, col = 'green')
1750946382761:## and the LED ~ color
1750946382761:## same as above, really
1750946382762:rled <- lm(clr$R~clr$R.LED.on., data = clr)
1750946382763:summary(rled)
1750946382766:plot(clr$R.LED.on., clr$R)
1750946382808:abline(rled,col = "red")
1750946382808:bled <- lm(clr$B~clr$B.LED.on., data = clr)
1750946382809:summary(bled)
1750946382813:plot(clr$B.LED.on., clr$B)
1750946382849:abline(bled, col = "blue")
1750946382850:gled <- lm(clr$G~clr$G.LED.on., data = clr)
1750946382851:summary(gled)
1750946382855:plot(clr$G.LED.on., clr$G)
1750946382877:abline(gled, col = 'green')
1750946578646:fitVals <- fitted(gled)
1750946578646:residuals <- residuals(gled)
1750946578647:plot( fitVals, residuals)
1750946578670:abline(h = 0, col = "magenta")
1750946651193:summary(gled)$r.squared
1750946659851:summary(gled)
1750947216421:# Define color groups
1750947216421:reds = c('R', 'R.LED.on.', 'R.Red.')
1750947216421:grns = c('G', 'G.LED.on.', 'G.Green.')
1750947216421:blus = c('B', 'B.LED.on.', 'B.Blue.')
1750947216421:clrs = list(reds, grns, blus)  # List to hold color groups
1750947216422:# Loop over the color groups
1750947216422:for(color_group in clrs) {
1750947216422:# Set up pairs of colors
1750947216422:one = c(color_group[1], color_group[2])
1750947216422:two = c(color_group[1], color_group[3])
1750947216422:thr = c(color_group[2], color_group[3])
1750947216422:pairs = list(one, two, thr)  # Store pairs in a list
1750947216422:for(pair in pairs) {
1750947216422:# Perform polynomial fit
1750947216423:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = clr)
1750947216423:# Plot the points
1750947216423:plot(clr[[pair[2]]], clr[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750947216423:xlab = pair[2], ylab = pair[1], pch = 18)
1750947216424:# Generate sequence of x values for prediction
1750947216424:x_seq <- seq(min(clr[[pair[2]]]), max(clr[[pair[2]]]), length.out = 100)
1750947216424:# Create a data frame for prediction with named columns
1750947216424:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750947216425:# Predict y values based on polynomial fit
1750947216425:predicted_y <- predict(poly, newdata = new_data)
1750947216425:# Set color based on the group
1750947216425:if (all(color_group == reds)) {
1750947216425:use <- "red"
1750947216426:} else if (all(color_group == grns)) {
1750947216426:use <- "green"
1750947216426:} else {
1750947216426:use <- "blue"
1750947216427:}
1750947216427:# Add polynomial line to the plot
1750947216427:lines(x_seq, predicted_y, col = use, lwd = 2)
1750947216428:}
1750947216428:}
1750947397393:## used boob-cancer thingy
1750947397393:B <- read.csv(file.choose())
1750947431888:names(B)
1750947550268:unique(B$BenignMalignant)
1750947661128:## BenignMalignant has two values, 2 & 4
1750947661128:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750947661128:columns <- names(B)
1750947666145:## BenignMalignant has two values, 2 & 4
1750947666145:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750947666145:columns <- names(B)
1750947670463:columns <- names(B)
1750947674707:columns[-1, -11]
1750947777537:columns[-c(1,11)]
1750948005029:B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750948015862:str(B)
1750948607641:str(B)
1750948607655:for(col in columns)
1750948607655:{
1750948607656:ben <- B$BenignMalignant
1750948607656:## create the plots
1750948607656:lin <- lm(ben ~ B[[col]], data = B)
1750948607656:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750948607656:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750948607657:newD <- data.frame(setNames(list(xseq), col))
1750948607657:prdy <- predict(poly, newdata = newD)
1750948607657:lines(xseq, prdy, col = "magenta", lwd = 2)
1750948607657:}
1750959383742:## used boob-cancer thingy
1750959383742:B <- read.csv(file.choose()) ## (cause B looks like uneven, sideways boobs)
1750959389540:names(B)
1750959389541:## [1] "ID"                   "ClumpThickness"       "CellSizeUniformity"   "CellShapeUniformity"
1750959389541:## [5] "MarginalAdhesion"     "SingleEpithelialCell" "BareNuclei"           "BlandChromatin"
1750959389541:## [9] "NormalNucleoli"       "Mitoses"              "BenignMalignant"
1750959389541:## BenignMalignant has two values, 2 & 4
1750959389541:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959389541:columns <- names(B)
1750959389542:## a little syntax help from ecosia chat
1750959389542:columns[-c(1,11)]
1750959389543:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959389543:B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959389543:## doublecheck the structure took
1750959389544:str(B)
1750959389566:for(col in columns)
1750959389566:{
1750959389566:ben <- B$BenignMalignant
1750959389566:## create the plots
1750959389567:lin <- lm(ben ~ B[[col]], data = B)
1750959389567:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959389567:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959389567:newD <- data.frame(setNames(list(xseq), col))
1750959389567:prdy <- predict(poly, newdata = newD)
1750959389567:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959389567:}
1750959424561:## BenignMalignant has two values, 2 & 4
1750959424562:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959424562:columns <- names(B)
1750959424562:## a little syntax help from ecosia chat
1750959424562:columns[-c(1,11)]
1750959424563:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959424563:#B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959424563:## doublecheck the structure took
1750959424564:#str(B)
1750959424564:for(col in columns)
1750959424565:{
1750959424565:ben <- B$BenignMalignant
1750959424565:## create the plots
1750959424568:lin <- lm(ben ~ B[[col]], data = B)
1750959424569:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959424569:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959424569:newD <- data.frame(setNames(list(xseq), col))
1750959424569:prdy <- predict(poly, newdata = newD)
1750959424570:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959424570:}
1750959426990:## BenignMalignant has two values, 2 & 4
1750959426990:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959426990:columns <- names(B)
1750959426990:## a little syntax help from ecosia chat
1750959426991:columns[-c(1,11)]
1750959426992:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959426992:#B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959426993:## doublecheck the structure took
1750959426993:#str(B)
1750959426994:for(col in columns)
1750959426994:{
1750959426994:ben <- B$BenignMalignant
1750959426994:## create the plots
1750959426995:lin <- lm(ben ~ B[[col]], data = B)
1750959426995:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959426995:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959426995:newD <- data.frame(setNames(list(xseq), col))
1750959426996:prdy <- predict(poly, newdata = newD)
1750959426996:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959426996:}
1750959432671:# used boob-cancer thingy
1750959432671:B <- read.csv(file.choose()) ## (cause B looks like uneven, sideways boobs)
1750959436494:names(B)
1750959436494:##
1750959442356:## BenignMalignant has two values, 2 & 4
1750959442357:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959442357:columns <- names(B)
1750959442357:## a little syntax help from ecosia chat
1750959442357:columns[-c(1,11)]
1750959442359:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959442361:#B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959442361:## doublecheck the structure took
1750959442363:#str(B)
1750959442364:for(col in columns)
1750959442364:{
1750959442364:ben <- B$BenignMalignant
1750959442365:## create the plots
1750959442365:lin <- lm(ben ~ B[[col]], data = B)
1750959442365:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959442365:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959442366:newD <- data.frame(setNames(list(xseq), col))
1750959442366:prdy <- predict(poly, newdata = newD)
1750959442367:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959442367:}
1750959476956:for(col in columns)
1750959476956:{
1750959476956:ben <- B$BenignMalignant
1750959476956:## create the plots
1750959476956:lin <- lm(ben ~ B[[col]], data = B)
1750959476956:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959476957:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959476957:newD <- data.frame(setNames(list(xseq), col))
1750959476957:#prdy <- predict(poly, newdata = newD)
1750959476959:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959476959:}
1750959490455:#lines(xseq, prdy, col = "magenta", lwd = 2)
1750959490455:}
1750959498493:for(col in columns)
1750959498493:{
1750959498493:ben <- B$BenignMalignant
1750959498493:## create the plots
1750959498493:lin <- lm(ben ~ B[[col]], data = B)
1750959498493:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959498494:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959498494:newD <- data.frame(setNames(list(xseq), col))
1750959498494:#prdy <- predict(poly, newdata = newD)
1750959498494:#lines(xseq, prdy, col = "magenta", lwd = 2)
1750959498494:}
1750959532904:for(col in columns)
1750959532904:{
1750959532904:ben <- B$BenignMalignant
1750959532904:## create the plots
1750959532904:lin <- lm(ben ~ B[[col]], data = B)
1750959532904:#ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959532905:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959532905:newD <- data.frame(setNames(list(xseq), col))
1750959532905:#prdy <- predict(poly, newdata = newD)
1750959532905:#lines(xseq, prdy, col = "magenta", lwd = 2)
1750959532906:}
1750960346113:names(B)
1750960503494:library(ggplot)
1750960510786:library(ggplot2)
1750960526195:library(dplyr)
1750960917124:install.packages(ggplot2)
1750960922509:install.packages("ggplot2")
1750961270977:# Summary statistics
1750961270977:B %>%
1750961270978:group_by(BenignMalignant) %>%
1750961270978:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961283905:# Summary statistics
1750961283905:data %>%
1750961283905:group_by(BenignMalignant) %>%
1750961283905:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961305699:install.packages("dplyr")
1750961325332:# Summary statistics
1750961325332:data %>%
1750961325333:group_by(BenignMalignant) %>%
1750961325333:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961340168:# Summary statistics
1750961340168:B %>%
1750961340168:group_by(BenignMalignant) %>%
1750961340168:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961367815:correlation_matrix <- cor(B[,-1], use = "complete.obs")  # Exclude ID column
1750961367816:print(correlation_matrix)
1750961414027:model <- glm(BenignMalignant ~ ., data = data, family = binomial)
1750961424155:model <- glm(BenignMalignant ~ ., data = B, family = binomial)
1750961460908:library(party)
1750961478969:install.packages("party")
1750961483413:library(party)
1750961484728:# Fit a conditional inference tree
1750961484728:ctree_model <- ctree(BenignMalignant ~ ., data = data)
1750961498556:# Fit a conditional inference tree
1750961498556:ctree_model <- ctree(BenignMalignant ~ ., data = B)
1750961498846:plot(ctree_model)
1750961570343:install.packages("randomForest")
1750961571223:library(randomForest)
1750961571234:# Fit the Random Forest model
1750961571235:rf_model <- randomForest(BenignMalignant ~ ., data = data, importance = TRUE)
<<<<<<< HEAD
1751981137122:q()
1751981194616:library(igraph)
1751981201871:install.packages(igraph)
1751981209387:install.packages("igraph")
1751981218368:library(igraph)
1751981223001:library('igraph')
1751981232651:library(igraph)
1751981286957:g<- graph(c(1,2, 1,3, 2,3, 3,5))
1751981303580:g<- graph(c(1,2, 1,3, 2,3, 3,5) n =5)
1751981314994:g<- graph(c(1,2, 1,3, 2,3, 3,5), n=5)
1751981332327:library(igraph)
1751981367291:library(igraph)
1751981406659:library(igraph)
1751981462593:ldconfig -p | grep libglpk
1751981476496:install.packages("igraph")
1751981510024:library(igraph)
1751981556056:igraph
1751981561407:help(igraph)
1751981567615:??igraph
1751981653650:system("ldconfig -p | grep libglpk")
1751981723914:install.packages("Rcpp")
1751982199533:install.packages("igraph")
1751982207505:library(igraph)
1751982210532:library("igraph")
1751982652394:g <- make_graph(c(1,2, 1,3, 2,3, 3,5), n=5))
1751982668351:g<- make_graph(c(1,2, 1,3, 2,3, 3,5), n=5)
1752001560834:install.packages("igraph")
1752001562616:library(igraph)
1752088343117:install.packages("igraph")
1752088344571:library(igraph)
1752088424507:flights <- read.csv(file.choose(), header=true)
1752088436863:flights <- read.csv(file.choose(), header=TRUE)
1752088477992:g <- graph_from_data_frame(flights, directed = TRUE)
1752088501651:View(flights)
1752088565264:install.packages(c("raster", "rgdal", "rasterVis", "profvis"))
1752088618753:library(raster)
1752088629889:library(rgdal)
1752088637042:library(rasterVis)
1752156701464:install.packages(c("ggmap", "sp", "randomcoloR", "sf", "shapefiles", "lwgeom"))
1752156794701:library(ggmap)
1752156795644:library(sp)
1752156795877:library(sf)
1752156818837:isntall.packages("sf")
1752156831715:install.packages("sf")
1752156856692:library(sf)
1752238754521:install.packages(c("ggmap", "sp", "randomcoloR", "sf", "shapefiles", "lwgeom"))
1752238758077:library(ggmap)
1752238758723:library(sp)
1752238758856:library(sf)
1752238854417:library(randomcoloR)
1752238854535:library(shapefiles)
1752238854548:library(lwgeom)
1752238864009:source("/workspaces/r_dev_container/shapefileProcessing(lecture).R")
1752238869216:install.packages(c("ggmap", "sp", "randomcoloR", "sf", "shapefiles", "lwgeom"))
1752760871477:install.libraries("ggmap")
1752760904431:install.packages("ggmap")
1752760917810:install.packages("sp")
1752760924757:install.packages("sf")
1752760931643:install.packages("randomcoloR") # meh
1752760935098:install.packages("shapfiles")
1752760950075:install.packages("shapefiles")
1752760955035:install.packages("lwgeom")
1752760989896:library(ggmap)
1752761006518:library(sp)
1752761009800:library(sf)
1752761015898:library(randomcoloR)
1752761017195:library(shapefiles)
1752761028789:library(lwgeom)
1752761606956:hscsv <- read.csv("Data Files/MaineHighSchools.csv") ## header = TRUE default
1752761620345:names(hscsv)
1752761689368:hscsv[1]['Mailing.Address']
1752761700681:hscsv['Mailing.Address'][1]
1752761716745:hscsv['Mailing.Address'][2]
1752761773206:hscsv[1,'Mailing.Address']
1752762193259:for (i in 1:length(hscsv))
1752762193259:{ hscsv[i, "Geo.Code.This"] <- cat(hscsv[i,"Mailing.Address"],", USA", sep="") }
1752762324662:## add the ",USA" just in case?
1752762324662:hscsv$Geo.Code.This <- paste(hscsv$Mailing.Address, ", USA", sep = "")
1752762344060:hscsv[1,'Geo.Code.This']
=======
1750961614876:# Fit the Random Forest model
1750961614876:rf_model <- randomForest(BenignMalignant ~ ., data = B, importance = TRUE)
1750961615653:print(importance(rf_model))
1750961662854:install.packages("dplyr", "ggplot2")
1750961735504:# Convert BenignMalignant to a factor for better visualization
1750961735504:B$BenignMalignant <- as.factor(B$BenignMalignant)
1750961735505:# Summary statistics
1750961735505:B %>%
1750961735505:group_by(BenignMalignant) %>%
1750961735505:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961781214:# Summary statistics
1750961781214:summary_stats <- B %>%
1750961781214:group_by(BenignMalignant) %>%
1750961781214:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961799878:install.packages("dplyr")
1750961819121:# Summary statistics
1750961819121:summary_stats <- B %>%
1750961819121:group_by(BenignMalignant) %>%
1750961819121:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961864653:library(magrittr)  # Explicitly load magrittr for the pipe operator
1750961886976:# Summary statistics
1750961886976:summary_stats <- B %>%
1750961886976:group_by(BenignMalignant) %>%
1750961886976:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961901417:# Summary statistics
1750961901417:summary_stats <- B %>%
1750961901417:group_by(BenignMalignant) %>%
1750961901417:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961996651:# Load required libraries
1750961996651:library(dplyr)
1750961997331:library(magrittr)  # Load magrittr for the pipe operator
1750961997331:library(ggplot2)   # Load ggplot2 for visualization
1750961997477:# Convert BenignMalignant to a factor for better visualization
1750961997477:B$BenignMalignant <- as.factor(B$BenignMalignant)
1750961997478:# Summary statistics
1750961997478:summary_stats <- B %>%
1750961997478:group_by(BenignMalignant) %>%
1750961997478:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961997618:print(summary_stats)
1750961997649:# Boxplots for visual comparison
1750961997649:ggplot(B, aes(x = BenignMalignant, y = ClumpThickness)) +
1750961997649:geom_boxplot() +
1750961997649:labs(title = "Clump Thickness by Tumor Type")
1750962574069:library(party)
1750962578035:# Fit a conditional inference tree
1750962578035:ctree_model <- ctree(BenignMalignant ~ ., data = data)
1750962586124:# Fit a conditional inference tree
1750962586124:ctree_model <- ctree(BenignMalignant ~ ., data = B)
1750962586138:plot(ctree_model)
>>>>>>> e3b0892 (A7?)
1753035938234:install.packages("rgdal")                             ## fail
1753035943820:library(ggmap)                                        ## google says 'please site'
1753035945030:library(sp)                                           ## good
1753035947537:library(sf)                                           ## not so good
1753035951403:library(randomcoloR)                                  ## good
1753035953145:library(shapefiles)                                   ## maybe not so good?
1753035954545:library(lwgeom)                                       ## not so good... 3/6, 4/6, I've seen worse
1753035957226:library(purrr)                                        ## no
1753035971421:library(purrr)                                        ## yes?
1753035973209:library(rgdal)                                        ## nooo 3/8... =[
1753189229362:packageVersion("roxygen2")
1753189239089:install.packages("roxygen2")
1753189253135:packageVersion("roxygen2")
1753191640692:text <- readLines("../textFiles/TestText.txt")
1753191689447:text <-readLines(file.choose())
1753191761250:text <-supressWarnings(readLines(file.choose()))
1753191772835:text <-suppressWarnings(readLines(file.choose()))
1753191781832:print(text)
1753191871236:getwd()
1753192291736:## read the file
1753192291736:if(file.exists(path)){ redlines <- readLines(path) }
1753192297442:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753192297442:## read the file
1753192297442:if(file.exists(path)){ redlines <- readLines(path) }
1753192297442:else{ stop("Shit... something fucked up.") }
1753192988617:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753192988617:## read the file
1753192988617:if(file.exists(path)){
1753192988617:redlines <- readLines(path)
1753192988617:} else {
1753192988617:stop("Shit... something fucked up.")
1753192988618:} ## gawdy... I hate the unaligned brackets. ugly ugly ugly
1753192994683:## get the filepath from
1753192994684:## HapaxLegomena/R/TestText.R -> HapaxLegomena/textFiles/TestText.txt
1753192994684:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753193007656:<- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753193016359:## read the file
1753193016359:if(file.exists(path)){
1753193016359:redlines = readLines(path)
1753193016359:} else {
1753193016359:stop("Shit... something fucked up.")
1753193016359:} ## gawdy... I hate the unaligned brackets. ugly ugly ugly
1753193597787:help(HapaxLegomena)
1753193897439:timesTwo(c(3,4,23))
1753193909132:library(HapaxLegomena)
1753193919423:install.packages("HapaxLegomena")
1753193944636:install.packages("finalProject")
1753208012456:install.packages("HapaxLegomena")
1753208025322:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753208025322:## read the file
1753208025323:if(file.exists(path)){
1753208025323:redlines = readLines(path)
1753208025323:} else {
1753208025323:stop("Shit... something fucked up.")
1753208025323:} ## gawdy... I hate the unaligned brackets. ugly ugly ugly
1753209000465:library(devtools)
1753209012927:install.packages("devtools")
1753209042629:library(devtools)
1753209100307:use_package("ggplot")
1753209124881:use_package("ggplot")
1753209138642:use_package("ggplot")
1753209185277:use_package("ggplot")
1753209226525:install.packages("qgplot")
1753209274782:install.packages('qplot')
1753209293726:use_packages('qplot')
1753209305867:use_package('qplot')
1753210952346:use_data(TestText.txt)
1753211050723:text <- file.choose()
1753211062654:use_data(text)
1753211096266:TexTesT <- file.choose()
1753211110983:use_data(TexTesT)
1753211289579:use_r('TexTesT')
1753211692154:data("TexTesT")
1753211719039:rm(TextTesT)
1753211726931:rm("TexTesT")
1753211734664:rm("text")
1753211741654:data("TexTesT")
1753211759948:data("someText")
1753211767931:textFiles("someText")
1753211817988:?TexTest
1753211827417:?TexTesT
1753211848196:??TexTesT’
1753212419396:use_vignette("HapaxLegomena", title="Hapax Legomena")
1753213437858:use_r(basicButDependedOn)
1753213453746:use_r("basicButDependedOn")
1753213517395:use_testthat()
1753213570772:use_test()
1753213779215:library(testthat)
1753213816558:devtools::load_all("~/finalProject/HapaxLegomena")
