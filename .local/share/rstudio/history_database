1747865150700:vec <- c(12,13,5)
1749070209682:q
1749070212916:new
1749070985998:hello()
1749070994126:+ Shift + T'
1749070994126:hello <- function() {
1749070994126:print("Hello, world!")
1749070994126:}
1749070994127:hello()
1749071003739:hello
1749071007870:hello()
1749071015104:2+4
1749071020930:r = 4
1749071022885:r
1749071029473:new
1749071032978:news()
1749071038742:quit
1749071042167:hello()
1749071047450:hello()
1749071048774:hello()
1749071057890:function
1749071063480:hello <- function() {
1749071063480:print("Hello, world!")
1749071063481:}
1749071180450:hello <- function() {
1749071180450:print("Hello, world!")
1749071180450:}
1749071182352:hello <- function() {
1749071182352:print("Hello, world!")
1749071182352:}
1749071193513:-
1749071195200:+
1749071197373:+++++++
1749071201236:quit
1749071203678:quit()
1749071206203:renew
1749071214364:newClassRepresentation(
1749071214364:)
1749071229378:goodbye <- function(){}
1749071235221:quit
1749071236951:Q
1749071256374:newconsole
1749071275584:new
1749071294770:ready
1749071299008:3=4
1749071320942:2==3
1749071327108:3>4
1749071329320:3
1749071334431:r = 3
1749071339002:r += 4
1749071340207:r
1749071373361:r = 4
1749071373362:r+= 4
1749071373362:r
1749071376218:r = 4
1749071376218:r+= 4
1749071376218:r
1749071376842:r = 4
1749071376843:r+= 4
1749071376843:r
1749071377364:r = 4
1749071377364:r+= 4
1749071377364:r
1749071378375:r = 4
1749071378375:r+= 4
1749071378375:r
1749071378919:r = 4
1749071378919:r+= 4
1749071378919:r
1749071379120:r = 4
1749071379120:r+= 4
1749071379120:r
1749071379280:r = 4
1749071379281:r+= 4
1749071379281:r
1749071379460:r = 4
1749071379460:r+= 4
1749071379460:r
1749071379632:r = 4
1749071379632:r+= 4
1749071379632:r
1749071379808:r = 4
1749071379808:r+= 4
1749071379808:r
1749071379971:r = 4
1749071379971:r+= 4
1749071379971:r
1749071382825:r = 4
1749071382826:r+= 4
1749071382826:r
1749071385986:r
1749071390713:source("~/.active-rstudio-document")
1749071426298:newConsole()
1749071480035:factorial <- function(n) {
1749071480036:if (n == 0) {
1749071480036:return(1)
1749071480036:} else {
1749071480036:return(n * factorial(n - 1))
1749071480036:}
1749071480036:}
1749071480036:result <- factorial(5)
1749071480037:print(paste("Factorial of 5 is:", result))
1749071486499:source("~/r_code.r")
1749071487350:source("~/r_code.r")
1749071487786:source("~/r_code.r")
1749071490677:source("~/r_code.r", echo = TRUE)
1749071501528:factorial <- function(n) {
1749071501528:if (n == 0) {
1749071501528:return(1)
1749071501528:} else {
1749071501529:return(n * factorial(n - 1))
1749071501529:}
1749071501529:}
1749071501530:result <- factorial(5)
1749071501530:print(paste("Factorial of 5 is:", result))
1749071507646:result <- factorial(5)
1749071507647:print(paste("Factorial of 5 is:", result))
1749071511474:result <- factorial(5)
1749071511474:print(paste("Factorial of 5 is:", result))
1749071600215:}}}
1749071636215:3+4
1749071646039:factorial <- function(n) {
1749071646039:if (n == 0) {
1749071646040:return(1)
1749071646040:} else {
1749071646040:return(n * factorial(n - 1))
1749071646040:}
1749071646041:}
1749071646041:result <- factorial(5)
1749071646048:print(paste("Factorial of 5 is:", result))
1749071732080:4+5
1749073792098:library()
1749073854238:install.packages("roxygen2","devtools")
1749073881892:install.packages("roxygen2")
1749073905197:install.packages("devtools")
1749165933838:install.packages("roxygen2")
1749166072587:sphereToRec(3,4,2)
1749166180185:library('roxygen2')
1749166183972:library()
1749166224250:install.packages("CoordinateConversions")
1749166775499:recToPolar(3,4)
1749166965451:polarToRec(5, 0.9272952)
1749167006091:recToCyl(4,3,8)
1749167050220:cylToRec(5,.6435011, 8)
1749167104608:recToSphere(9,2,11)
1749167113012:recToSphere(9,2,11)
1749167182630:recToSphere(9,2,11)
1749167245965:sphereToRec(14.3527001,0.2186689,0.6539187)
1749167276417:recToSphere(3,4,5)
1749167297853:sphereToRec(7.0710678, 0.9272952, 0.6154797)
1749167333184:cylToSphere(5,2,7)
1749167375472:spheretoCyl(8.6023253,2,0.6202495)
1749167392399:sphereToCyl(8.6023253,2,0.6202495)
1749167439869:normalize(3)
1749167458082:normalize(7)
1749167531144:normalize(23)
1749167546225:normalize <- function(a)
1749167546225:{
1749167546225:if(a > 2 * pi || a < 0)
1749167546225:{
1749167546225:print("Please ensure that angle is in RADIANS. /n
1749167546225:If necessary, use yourAngleHere*pi/180 and run again.")
1749167546226:a = (a %% 2 * pi)
1749167546226:}
1749167546226:return (a)
1749167546226:}
1749167546228:normalize(33)
1749167585798:normalize <- function(a)
1749167585798:{
1749167585798:if(a > 2 * pi || a < 0)
1749167585798:{
1749167585798:print("Please ensure that angle is in RADIANS.")
1749167585798:print("If necessary, use:")
1749167585799:print("yourAngleHere*pi/180 and run again.")
1749167585799:a = (a %% 2 * pi)
1749167585799:}
1749167585799:return (a)
1749167585799:}
1749167585800:normalize(33)
1749167689637:normalize <- function(a)
1749167689637:{
1749167689637:if(a > 2 * pi || a < 0)
1749167689637:{
1749167689637:print("Please ensure that angle is in RADIANS.")
1749167689637:print("If necessary, run again using:")
1749167689637:print("    ( (degree measure) * pi / 180 )")
1749167689637:a = (a %% 2 * pi)
1749167689638:}
1749167689638:return (a)
1749167689638:}
1749167689639:normalize(7)
1749167836665:normalize <- function(a)
1749167836665:{
1749167836665:if(a > 2 * pi || a < 0)
1749167836665:{
1749167836665:print("Please ensure that angle is in RADIANS.")
1749167836665:print("If necessary, run again using:")
1749167836665:print("    ( (degree measure) * pi / 180 )")
1749167836665:a = (a %% (2 * pi))
1749167836666:}
1749167836666:return (a)
1749167836666:}
1749167836666:normalize(7)
1749323234324:install.packages('sqldf')
1749323247410:library(sqldf)
1749328081174:install.packages("sqldf")
1749328132489:nfl = read.csv(choose.file(), header = TRUE)
1749328163339:nfl = read.csv(file.choose(), header = TRUE)
1749328226132:Shipping = read.csv(file.choose(), header = TRUE)
1749328239000:Person = read.csv(file.choose(), header = TRUE)
1749328256008:Parent = read.csv(file.choose(), header = TRUE)
1749328271160:Spouse = read.csv(file.choose(), header = TRUE)
1749328283265:Large = read.csv(file.choose(), header = TRUE)
1749328294175:Government = read.csv(file.choose(), header = TRUE)
1749328312613:TicketToRide = read.csv(file.choose(), header = TRUE)
1749328443637:# nfl = read.csv(file.choose(), header = TRUE)
1749328443637:# Shipping = read.csv(file.choose(), header = TRUE)
1749328443637:# Person = read.csv(file.choose(), header = TRUE)
1749328443637:# Parent = read.csv(file.choose(), header = TRUE)
1749328443637:# Spouse = read.csv(file.choose(), header = TRUE)
1749328443638:# Large = read.csv(file.choose(), header = TRUE)
1749328443638:# Government = read.csv(file.choose(), header = TRUE)
1749328443638:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328443638:query ="
1749328443638:SELECT *
1749328443639:FROM nfl
1749328443639:WHERE conference = 'A'
1749328443639:"
1749328443639:sqldf(query)
1749328516175:library(sqldf)
1749328528014:# nfl = read.csv(file.choose(), header = TRUE)
1749328528015:# Shipping = read.csv(file.choose(), header = TRUE)
1749328528015:# Person = read.csv(file.choose(), header = TRUE)
1749328528015:# Parent = read.csv(file.choose(), header = TRUE)
1749328528015:# Spouse = read.csv(file.choose(), header = TRUE)
1749328528015:# Large = read.csv(file.choose(), header = TRUE)
1749328528015:# Government = read.csv(file.choose(), header = TRUE)
1749328528015:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328528015:query ="
1749328528015:SELECT *
1749328528015:FROM nfl
1749328528016:WHERE conference = 'A'
1749328528016:"
1749328528016:sqldf(query)
1749328661213:# nfl = read.csv(file.choose(), header = TRUE)
1749328661214:# Shipping = read.csv(file.choose(), header = TRUE)
1749328661214:# Person = read.csv(file.choose(), header = TRUE)
1749328661214:# Parent = read.csv(file.choose(), header = TRUE)
1749328661214:# Spouse = read.csv(file.choose(), header = TRUE)
1749328661214:# Large = read.csv(file.choose(), header = TRUE)
1749328661214:# Government = read.csv(file.choose(), header = TRUE)
1749328661214:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328661215:query ="
1749328661215:SELECT team
1749328661215:FROM nfl
1749328661215:WHERE city = 'Los Angeles'
1749328661215:"
1749328661215:sqldf(query)
1749328788606:# nfl = read.csv(file.choose(), header = TRUE)
1749328788606:# Shipping = read.csv(file.choose(), header = TRUE)
1749328788606:# Person = read.csv(file.choose(), header = TRUE)
1749328788606:# Parent = read.csv(file.choose(), header = TRUE)
1749328788606:# Spouse = read.csv(file.choose(), header = TRUE)
1749328788606:# Large = read.csv(file.choose(), header = TRUE)
1749328788606:# Government = read.csv(file.choose(), header = TRUE)
1749328788606:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328788606:query ="
1749328788607:SELECT city, team
1749328788607:FROM nfl
1749328788607:WHERE W > L
1749328788607:"
1749328788608:sqldf(query)
1749328830313:# nfl = read.csv(file.choose(), header = TRUE)
1749328830313:# Shipping = read.csv(file.choose(), header = TRUE)
1749328830313:# Person = read.csv(file.choose(), header = TRUE)
1749328830313:# Parent = read.csv(file.choose(), header = TRUE)
1749328830313:# Spouse = read.csv(file.choose(), header = TRUE)
1749328830313:# Large = read.csv(file.choose(), header = TRUE)
1749328830313:# Government = read.csv(file.choose(), header = TRUE)
1749328830314:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328830314:query ="
1749328830314:SELECT city, team
1749328830314:FROM nfl
1749328830314:WHERE W > 8
1749328830314:"
1749328830314:sqldf(query)
1749328871326:# nfl = read.csv(file.choose(), header = TRUE)
1749328871326:# Shipping = read.csv(file.choose(), header = TRUE)
1749328871326:# Person = read.csv(file.choose(), header = TRUE)
1749328871326:# Parent = read.csv(file.choose(), header = TRUE)
1749328871326:# Spouse = read.csv(file.choose(), header = TRUE)
1749328871326:# Large = read.csv(file.choose(), header = TRUE)
1749328871326:# Government = read.csv(file.choose(), header = TRUE)
1749328871327:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328871327:query ="
1749328871327:SELECT city, team
1749328871328:FROM nfl
1749328871328:WHERE W > L
1749328871328:"
1749328871328:queryTwo ="
1749328871328:SELECT city, team
1749328871328:FROM nfl
1749328871329:WHERE W > 8
1749328871329:"
1749328871329:sqldf(query)
1749328871349:sqldf(queryTwo)
1749328969830:# nfl = read.csv(file.choose(), header = TRUE)
1749328969830:# Shipping = read.csv(file.choose(), header = TRUE)
1749328969830:# Person = read.csv(file.choose(), header = TRUE)
1749328969830:# Parent = read.csv(file.choose(), header = TRUE)
1749328969830:# Spouse = read.csv(file.choose(), header = TRUE)
1749328969831:# Large = read.csv(file.choose(), header = TRUE)
1749328969831:# Government = read.csv(file.choose(), header = TRUE)
1749328969831:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328969831:query ="
1749328969831:SELECT city, team
1749328969831:FROM nfl
1749328969831:WHERE conference = 'A' AND division = 'E'
1749328969832:"
1749328969832:sqldf(query)
1749328998502:# nfl = read.csv(file.choose(), header = TRUE)
1749328998502:# Shipping = read.csv(file.choose(), header = TRUE)
1749328998502:# Person = read.csv(file.choose(), header = TRUE)
1749328998502:# Parent = read.csv(file.choose(), header = TRUE)
1749328998502:# Spouse = read.csv(file.choose(), header = TRUE)
1749328998502:# Large = read.csv(file.choose(), header = TRUE)
1749328998502:# Government = read.csv(file.choose(), header = TRUE)
1749328998503:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749328998503:query ="
1749328998503:SELECT city, team, divW, divL, divT
1749328998503:FROM nfl
1749328998503:WHERE conference = 'A' AND division = 'E'
1749328998504:"
1749328998504:sqldf(query)
1749329027306:# nfl = read.csv(file.choose(), header = TRUE)
1749329027306:# Shipping = read.csv(file.choose(), header = TRUE)
1749329027306:# Person = read.csv(file.choose(), header = TRUE)
1749329027306:# Parent = read.csv(file.choose(), header = TRUE)
1749329027306:# Spouse = read.csv(file.choose(), header = TRUE)
1749329027307:# Large = read.csv(file.choose(), header = TRUE)
1749329027307:# Government = read.csv(file.choose(), header = TRUE)
1749329027307:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329027308:query ="
1749329027308:SELECT city, team, divW, divL, divT, W, L, T
1749329027308:FROM nfl
1749329027309:WHERE conference = 'A' AND division = 'E'
1749329027309:"
1749329027309:sqldf(query)
1749329083702:# nfl = read.csv(file.choose(), header = TRUE)
1749329083702:# Shipping = read.csv(file.choose(), header = TRUE)
1749329083702:# Person = read.csv(file.choose(), header = TRUE)
1749329083702:# Parent = read.csv(file.choose(), header = TRUE)
1749329083702:# Spouse = read.csv(file.choose(), header = TRUE)
1749329083702:# Large = read.csv(file.choose(), header = TRUE)
1749329083702:# Government = read.csv(file.choose(), header = TRUE)
1749329083702:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329083703:query ="
1749329083703:SELECT city, team, W, L, T
1749329083703:FROM nfl
1749329083703:WHERE homeW > homeL OR roadW > roadL
1749329083703:"
1749329083703:sqldf(query)
1749329094165:# nfl = read.csv(file.choose(), header = TRUE)
1749329094165:# Shipping = read.csv(file.choose(), header = TRUE)
1749329094165:# Person = read.csv(file.choose(), header = TRUE)
1749329094165:# Parent = read.csv(file.choose(), header = TRUE)
1749329094165:# Spouse = read.csv(file.choose(), header = TRUE)
1749329094165:# Large = read.csv(file.choose(), header = TRUE)
1749329094165:# Government = read.csv(file.choose(), header = TRUE)
1749329094165:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329094166:query ="
1749329094166:SELECT city, team, W, L, T
1749329094166:FROM nfl
1749329094166:WHERE homeW > homeL or roadW > roadL
1749329094166:"
1749329094166:sqldf(query)
1749329131859:# nfl = read.csv(file.choose(), header = TRUE)
1749329131859:# Shipping = read.csv(file.choose(), header = TRUE)
1749329131859:# Person = read.csv(file.choose(), header = TRUE)
1749329131859:# Parent = read.csv(file.choose(), header = TRUE)
1749329131860:# Spouse = read.csv(file.choose(), header = TRUE)
1749329131860:# Large = read.csv(file.choose(), header = TRUE)
1749329131860:# Government = read.csv(file.choose(), header = TRUE)
1749329131860:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329131860:query ="
1749329131860:select team from nfl where not(city = 'New England')
1749329131860:"
1749329131861:sqldf(query)
1749329139792:query ="
1749329139792:select team from nfl where not(city = 'New EnGLand')
1749329139792:"
1749329143521:# nfl = read.csv(file.choose(), header = TRUE)
1749329143521:# Shipping = read.csv(file.choose(), header = TRUE)
1749329143521:# Person = read.csv(file.choose(), header = TRUE)
1749329143521:# Parent = read.csv(file.choose(), header = TRUE)
1749329143521:# Spouse = read.csv(file.choose(), header = TRUE)
1749329143522:# Large = read.csv(file.choose(), header = TRUE)
1749329143522:# Government = read.csv(file.choose(), header = TRUE)
1749329143522:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329143523:query ="
1749329143523:select team from nfl where not(city = 'New EnGLand')
1749329143523:"
1749329143524:sqldf(query)
1749329169555:# nfl = read.csv(file.choose(), header = TRUE)
1749329169555:# Shipping = read.csv(file.choose(), header = TRUE)
1749329169555:# Person = read.csv(file.choose(), header = TRUE)
1749329169555:# Parent = read.csv(file.choose(), header = TRUE)
1749329169555:# Spouse = read.csv(file.choose(), header = TRUE)
1749329169555:# Large = read.csv(file.choose(), header = TRUE)
1749329169555:# Government = read.csv(file.choose(), header = TRUE)
1749329169556:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329169556:query ="
1749329169556:select team from nfl where not(city = 'New England')
1749329169556:"
1749329169557:sqldf(query)
1749329322884:# nfl = read.csv(file.choose(), header = TRUE)
1749329322884:# Shipping = read.csv(file.choose(), header = TRUE)
1749329322884:# Person = read.csv(file.choose(), header = TRUE)
1749329322885:# Parent = read.csv(file.choose(), header = TRUE)
1749329322885:# Spouse = read.csv(file.choose(), header = TRUE)
1749329322885:# Large = read.csv(file.choose(), header = TRUE)
1749329322885:# Government = read.csv(file.choose(), header = TRUE)
1749329322885:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329322885:query ="
1749329322885:select distinct converence, division
1749329322885:"
1749329322885:sqldf(query)
1749329329729:# nfl = read.csv(file.choose(), header = TRUE)
1749329329729:# Shipping = read.csv(file.choose(), header = TRUE)
1749329329729:# Person = read.csv(file.choose(), header = TRUE)
1749329329729:# Parent = read.csv(file.choose(), header = TRUE)
1749329329729:# Spouse = read.csv(file.choose(), header = TRUE)
1749329329729:# Large = read.csv(file.choose(), header = TRUE)
1749329329729:# Government = read.csv(file.choose(), header = TRUE)
1749329329729:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329329730:query ="
1749329329730:select distinct conference, division
1749329329730:"
1749329329730:sqldf(query)
1749329369396:names(nfl)
1749329377282:# nfl = read.csv(file.choose(), header = TRUE)
1749329377282:# Shipping = read.csv(file.choose(), header = TRUE)
1749329377282:# Person = read.csv(file.choose(), header = TRUE)
1749329377283:# Parent = read.csv(file.choose(), header = TRUE)
1749329377283:# Spouse = read.csv(file.choose(), header = TRUE)
1749329377283:# Large = read.csv(file.choose(), header = TRUE)
1749329377283:# Government = read.csv(file.choose(), header = TRUE)
1749329377283:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329377283:query ="
1749329377283:select distinct Conference, division
1749329377283:"
1749329377283:sqldf(query)
1749329409355:query ="
1749329409355:select distinct conference, division
1749329409355:"
1749329419885:# nfl = read.csv(file.choose(), header = TRUE)
1749329419885:# Shipping = read.csv(file.choose(), header = TRUE)
1749329419885:# Person = read.csv(file.choose(), header = TRUE)
1749329419885:# Parent = read.csv(file.choose(), header = TRUE)
1749329419885:# Spouse = read.csv(file.choose(), header = TRUE)
1749329419885:# Large = read.csv(file.choose(), header = TRUE)
1749329419885:# Government = read.csv(file.choose(), header = TRUE)
1749329419885:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329419886:query ="
1749329419886:select distinct conference, division
1749329419886:FROM nfl
1749329419886:"
1749329419887:sqldf(query)
1749329445590:# nfl = read.csv(file.choose(), header = TRUE)
1749329445590:# Shipping = read.csv(file.choose(), header = TRUE)
1749329445590:# Person = read.csv(file.choose(), header = TRUE)
1749329445591:# Parent = read.csv(file.choose(), header = TRUE)
1749329445591:# Spouse = read.csv(file.choose(), header = TRUE)
1749329445591:# Large = read.csv(file.choose(), header = TRUE)
1749329445591:# Government = read.csv(file.choose(), header = TRUE)
1749329445591:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329445591:query ="
1749329445591:select  conference, division
1749329445591:FROM nfl
1749329445592:"
1749329445592:sqldf(query)
1749329496746:# nfl = read.csv(file.choose(), header = TRUE)
1749329496746:# Shipping = read.csv(file.choose(), header = TRUE)
1749329496746:# Person = read.csv(file.choose(), header = TRUE)
1749329496746:# Parent = read.csv(file.choose(), header = TRUE)
1749329496746:# Spouse = read.csv(file.choose(), header = TRUE)
1749329496746:# Large = read.csv(file.choose(), header = TRUE)
1749329496747:# Government = read.csv(file.choose(), header = TRUE)
1749329496747:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329496747:query ="
1749329496747:select city
1749329496748:FROM nfl
1749329496748:where city like 'W%'
1749329496748:"
1749329496748:sqldf(query)
1749329555002:# nfl = read.csv(file.choose(), header = TRUE)
1749329555002:# Shipping = read.csv(file.choose(), header = TRUE)
1749329555002:# Person = read.csv(file.choose(), header = TRUE)
1749329555002:# Parent = read.csv(file.choose(), header = TRUE)
1749329555002:# Spouse = read.csv(file.choose(), header = TRUE)
1749329555002:# Large = read.csv(file.choose(), header = TRUE)
1749329555002:# Government = read.csv(file.choose(), header = TRUE)
1749329555002:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329555002:query ="
1749329555002:select city
1749329555003:FROM nfl
1749329555003:where city like '%s'
1749329555003:"
1749329555003:sqldf(query)
1749329610615:# nfl = read.csv(file.choose(), header = TRUE)
1749329610615:# Shipping = read.csv(file.choose(), header = TRUE)
1749329610615:# Person = read.csv(file.choose(), header = TRUE)
1749329610615:# Parent = read.csv(file.choose(), header = TRUE)
1749329610616:# Spouse = read.csv(file.choose(), header = TRUE)
1749329610616:# Large = read.csv(file.choose(), header = TRUE)
1749329610616:# Government = read.csv(file.choose(), header = TRUE)
1749329610616:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329610616:query ="
1749329610616:select city
1749329610616:FROM nfl
1749329610616:where city like '%ee%'
1749329610616:"
1749329610618:sqldf(query)
1749329626823:# nfl = read.csv(file.choose(), header = TRUE)
1749329626823:# Shipping = read.csv(file.choose(), header = TRUE)
1749329626823:# Person = read.csv(file.choose(), header = TRUE)
1749329626823:# Parent = read.csv(file.choose(), header = TRUE)
1749329626823:# Spouse = read.csv(file.choose(), header = TRUE)
1749329626823:# Large = read.csv(file.choose(), header = TRUE)
1749329626823:# Government = read.csv(file.choose(), header = TRUE)
1749329626823:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329626824:query ="
1749329626824:select city
1749329626824:FROM nfl
1749329626824:where team like '%ee%'
1749329626824:"
1749329626824:sqldf(query)
1749329648573:# nfl = read.csv(file.choose(), header = TRUE)
1749329648573:# Shipping = read.csv(file.choose(), header = TRUE)
1749329648573:# Person = read.csv(file.choose(), header = TRUE)
1749329648573:# Parent = read.csv(file.choose(), header = TRUE)
1749329648574:# Spouse = read.csv(file.choose(), header = TRUE)
1749329648574:# Large = read.csv(file.choose(), header = TRUE)
1749329648574:# Government = read.csv(file.choose(), header = TRUE)
1749329648574:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329648574:query ="
1749329648574:select city
1749329648574:FROM nfl
1749329648574:where team like '_ets'
1749329648574:"
1749329648575:sqldf(query)
1749329657685:# nfl = read.csv(file.choose(), header = TRUE)
1749329657685:# Shipping = read.csv(file.choose(), header = TRUE)
1749329657685:# Person = read.csv(file.choose(), header = TRUE)
1749329657685:# Parent = read.csv(file.choose(), header = TRUE)
1749329657685:# Spouse = read.csv(file.choose(), header = TRUE)
1749329657685:# Large = read.csv(file.choose(), header = TRUE)
1749329657686:# Government = read.csv(file.choose(), header = TRUE)
1749329657686:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329657686:query ="
1749329657686:select city, team
1749329657686:FROM nfl
1749329657686:where team like '_ets'
1749329657686:"
1749329657687:sqldf(query)
1749329735343:# nfl = read.csv(file.choose(), header = TRUE)
1749329735343:# Shipping = read.csv(file.choose(), header = TRUE)
1749329735343:# Person = read.csv(file.choose(), header = TRUE)
1749329735343:# Parent = read.csv(file.choose(), header = TRUE)
1749329735343:# Spouse = read.csv(file.choose(), header = TRUE)
1749329735343:# Large = read.csv(file.choose(), header = TRUE)
1749329735343:# Government = read.csv(file.choose(), header = TRUE)
1749329735343:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329735344:query ="
1749329735344:select city, team
1749329735344:FROM nfl
1749329735344:where w between 7 and 9
1749329735344:"
1749329735345:sqldf(query)
1749329759018:# nfl = read.csv(file.choose(), header = TRUE)
1749329759018:# Shipping = read.csv(file.choose(), header = TRUE)
1749329759018:# Person = read.csv(file.choose(), header = TRUE)
1749329759018:# Parent = read.csv(file.choose(), header = TRUE)
1749329759018:# Spouse = read.csv(file.choose(), header = TRUE)
1749329759018:# Large = read.csv(file.choose(), header = TRUE)
1749329759019:# Government = read.csv(file.choose(), header = TRUE)
1749329759019:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749329759019:query ="
1749329759019:select city, team, w , l
1749329759019:FROM nfl
1749329759019:where w between 7 and 9
1749329759019:"
1749329759019:sqldf(query)
1749330147863:# nfl = read.csv(file.choose(), header = TRUE)
1749330147863:# Shipping = read.csv(file.choose(), header = TRUE)
1749330147863:# Person = read.csv(file.choose(), header = TRUE)
1749330147863:# Parent = read.csv(file.choose(), header = TRUE)
1749330147863:# Spouse = read.csv(file.choose(), header = TRUE)
1749330147863:# Large = read.csv(file.choose(), header = TRUE)
1749330147863:# Government = read.csv(file.choose(), header = TRUE)
1749330147863:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330147863:query ="
1749330147864:select *
1749330147864:from Shipping
1749330147864:where values not null
1749330147864:"
1749330147864:sqldf(query)
1749330322005:names(Shipping)
1749330683052:# nfl = read.csv(file.choose(), header = TRUE)
1749330683052:# Shipping = read.csv(file.choose(), header = TRUE)
1749330683053:# Person = read.csv(file.choose(), header = TRUE)
1749330683053:# Parent = read.csv(file.choose(), header = TRUE)
1749330683054:# Spouse = read.csv(file.choose(), header = TRUE)
1749330683054:# Large = read.csv(file.choose(), header = TRUE)
1749330683054:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330683054:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330683054:## surface area
1749330683054:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330683055:## volume
1749330683055:v = "Height * Length * Width"
1749330683056:## density
1749330683056:d = "Mass / Volume"
1749330683056:query =
1749330683056:"
1749330683056:SELECT *
1749330683056:FROM shipping
1749330683056:WHERE Weight = ''
1749330683057:"
1749330683057:sqldf(query)
1749330691301:# nfl = read.csv(file.choose(), header = TRUE)
1749330691301:# Shipping = read.csv(file.choose(), header = TRUE)
1749330691301:# Person = read.csv(file.choose(), header = TRUE)
1749330691301:# Parent = read.csv(file.choose(), header = TRUE)
1749330691301:# Spouse = read.csv(file.choose(), header = TRUE)
1749330691301:# Large = read.csv(file.choose(), header = TRUE)
1749330691301:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330691301:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330691302:## surface area
1749330691302:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330691302:## volume
1749330691303:v = "Height * Length * Width"
1749330691303:## density
1749330691303:d = "Mass / Volume"
1749330691304:query =
1749330691304:"
1749330691304:SELECT *
1749330691304:FROM Shipping
1749330691304:WHERE Weight = ''
1749330691304:"
1749330691304:sqldf(query)
1749330732271:# nfl = read.csv(file.choose(), header = TRUE)
1749330732271:# Shipping = read.csv(file.choose(), header = TRUE)
1749330732271:# Person = read.csv(file.choose(), header = TRUE)
1749330732271:# Parent = read.csv(file.choose(), header = TRUE)
1749330732271:# Spouse = read.csv(file.choose(), header = TRUE)
1749330732271:# Large = read.csv(file.choose(), header = TRUE)
1749330732271:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330732271:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330732272:## surface area
1749330732272:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330732272:## volume
1749330732272:v = "Height * Length * Width"
1749330732273:## density
1749330732273:d = "Mass / Volume"
1749330732273:query =
1749330732273:"
1749330732274:SELECT  *
1749330732274:FROM    Shipping
1749330732274:WHERE   Mname = ''
1749330732274:"
1749330732274:sqldf(query)
1749330762637:# nfl = read.csv(file.choose(), header = TRUE)
1749330762637:# Shipping = read.csv(file.choose(), header = TRUE)
1749330762637:# Person = read.csv(file.choose(), header = TRUE)
1749330762637:# Parent = read.csv(file.choose(), header = TRUE)
1749330762637:# Spouse = read.csv(file.choose(), header = TRUE)
1749330762637:# Large = read.csv(file.choose(), header = TRUE)
1749330762637:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330762638:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330762638:## surface area
1749330762638:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330762638:## volume
1749330762638:v = "Height * Length * Width"
1749330762638:## density
1749330762639:d = "Mass / Volume"
1749330762639:query =
1749330762639:"
1749330762639:SELECT  *
1749330762639:FROM    Shipping
1749330762640:WHERE   Mname != ''
1749330762640:"
1749330762640:sqldf(query)
1749330815332:# nfl = read.csv(file.choose(), header = TRUE)
1749330815332:# Shipping = read.csv(file.choose(), header = TRUE)
1749330815333:# Person = read.csv(file.choose(), header = TRUE)
1749330815333:# Parent = read.csv(file.choose(), header = TRUE)
1749330815333:# Spouse = read.csv(file.choose(), header = TRUE)
1749330815333:# Large = read.csv(file.choose(), header = TRUE)
1749330815333:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330815333:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330815334:## surface area
1749330815334:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330815334:## volume
1749330815334:v = "Height * Length * Width"
1749330815334:## density
1749330815335:d = "Mass / Volume"
1749330815335:query =
1749330815335:"
1749330815335:SELECT  Fname, Mname, Lname
1749330815335:FROM    Shipping
1749330815335:WHERE   Mname != ''
1749330815336:"
1749330815336:sqldf(query)
1749330824842:# nfl = read.csv(file.choose(), header = TRUE)
1749330824842:# Shipping = read.csv(file.choose(), header = TRUE)
1749330824842:# Person = read.csv(file.choose(), header = TRUE)
1749330824842:# Parent = read.csv(file.choose(), header = TRUE)
1749330824842:# Spouse = read.csv(file.choose(), header = TRUE)
1749330824842:# Large = read.csv(file.choose(), header = TRUE)
1749330824842:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330824842:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330824842:## surface area
1749330824843:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330824844:## volume
1749330824844:v = "Height * Length * Width"
1749330824844:## density
1749330824844:d = "Mass / Volume"
1749330824844:query =
1749330824845:"
1749330824845:SELECT  Fname, Mname, Lname
1749330824845:FROM    Shipping
1749330824845:WHERE   Mname = ''
1749330824845:"
1749330824845:sqldf(query)
1749330840224:# nfl = read.csv(file.choose(), header = TRUE)
1749330840224:# Shipping = read.csv(file.choose(), header = TRUE)
1749330840224:# Person = read.csv(file.choose(), header = TRUE)
1749330840224:# Parent = read.csv(file.choose(), header = TRUE)
1749330840224:# Spouse = read.csv(file.choose(), header = TRUE)
1749330840224:# Large = read.csv(file.choose(), header = TRUE)
1749330840224:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330840224:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330840225:## surface area
1749330840225:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330840225:## volume
1749330840225:v = "Height * Length * Width"
1749330840226:## density
1749330840226:d = "Mass / Volume"
1749330840226:query =
1749330840226:"
1749330840226:SELECT  Fname, Mname, Lname
1749330840226:FROM    Shipping
1749330840226:WHERE   Mname == ''
1749330840226:"
1749330840226:sqldf(query)
1749330891278:# nfl = read.csv(file.choose(), header = TRUE)
1749330891278:# Shipping = read.csv(file.choose(), header = TRUE)
1749330891279:# Person = read.csv(file.choose(), header = TRUE)
1749330891279:# Parent = read.csv(file.choose(), header = TRUE)
1749330891279:# Spouse = read.csv(file.choose(), header = TRUE)
1749330891279:# Large = read.csv(file.choose(), header = TRUE)
1749330891279:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330891280:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330891280:## surface area
1749330891280:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330891281:## volume
1749330891281:v = "Height * Length * Width"
1749330891281:## density
1749330891281:d = "Mass / Volume"
1749330891282:query =
1749330891282:"
1749330891282:SELECT  Lname
1749330891282:FROM    Shipping
1749330891282:WHERE   Mname == ''
1749330891282:"
1749330891282:sqldf(query)
1749330913030:# nfl = read.csv(file.choose(), header = TRUE)
1749330913030:# Shipping = read.csv(file.choose(), header = TRUE)
1749330913030:# Person = read.csv(file.choose(), header = TRUE)
1749330913030:# Parent = read.csv(file.choose(), header = TRUE)
1749330913030:# Spouse = read.csv(file.choose(), header = TRUE)
1749330913030:# Large = read.csv(file.choose(), header = TRUE)
1749330913030:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330913031:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330913031:## surface area
1749330913031:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330913031:## volume
1749330913032:v = "Height * Length * Width"
1749330913032:## density
1749330913032:d = "Mass / Volume"
1749330913032:query =
1749330913033:"
1749330913033:SELECT  *
1749330913033:FROM    Shipping
1749330913033:WHERE   Lname == 'Herman'
1749330913034:"
1749330913034:sqldf(query)
1749330921922:# nfl = read.csv(file.choose(), header = TRUE)
1749330921923:# Shipping = read.csv(file.choose(), header = TRUE)
1749330921923:# Person = read.csv(file.choose(), header = TRUE)
1749330921923:# Parent = read.csv(file.choose(), header = TRUE)
1749330921923:# Spouse = read.csv(file.choose(), header = TRUE)
1749330921923:# Large = read.csv(file.choose(), header = TRUE)
1749330921923:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330921923:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330921924:## surface area
1749330921924:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330921924:## volume
1749330921924:v = "Height * Length * Width"
1749330921924:## density
1749330921924:d = "Mass / Volume"
1749330921924:query =
1749330921925:"
1749330921925:SELECT  *
1749330921925:FROM    Shipping
1749330921925:WHERE   Lname = 'Herman'
1749330921925:"
1749330921925:sqldf(query)
1749330937888:# nfl = read.csv(file.choose(), header = TRUE)
1749330937888:# Shipping = read.csv(file.choose(), header = TRUE)
1749330937888:# Person = read.csv(file.choose(), header = TRUE)
1749330937889:# Parent = read.csv(file.choose(), header = TRUE)
1749330937889:# Spouse = read.csv(file.choose(), header = TRUE)
1749330937889:# Large = read.csv(file.choose(), header = TRUE)
1749330937889:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330937889:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330937889:## surface area
1749330937889:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330937890:## volume
1749330937890:v = "Height * Length * Width"
1749330937891:## density
1749330937891:d = "Mass / Volume"
1749330937891:query =
1749330937891:"
1749330937891:SELECT  *
1749330937891:FROM    Shipping
1749330937891:WHERE   Lname = 'Herman \xa0'
1749330937891:"
1749330937892:sqldf(query)
1749330955726:# nfl = read.csv(file.choose(), header = TRUE)
1749330955726:# Shipping = read.csv(file.choose(), header = TRUE)
1749330955726:# Person = read.csv(file.choose(), header = TRUE)
1749330955726:# Parent = read.csv(file.choose(), header = TRUE)
1749330955726:# Spouse = read.csv(file.choose(), header = TRUE)
1749330955726:# Large = read.csv(file.choose(), header = TRUE)
1749330955726:# Government = read.csv(file.c//hoose(), header = TRUE)
1749330955726:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749330955726:## surface area
1749330955727:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749330955727:## volume
1749330955727:v = "Height * Length * Width"
1749330955728:## density
1749330955728:d = "Mass / Volume"
1749330955728:query =
1749330955728:"
1749330955729:SELECT  *
1749330955729:FROM    Shipping
1749330955729:WHERE   Lname = 'Herman'
1749330955729:"
1749330955729:sqldf(query)
1749331000194:# nfl = read.csv(file.choose(), header = TRUE)
1749331000194:# Shipping = read.csv(file.choose(), header = TRUE)
1749331000194:# Person = read.csv(file.choose(), header = TRUE)
1749331000195:# Parent = read.csv(file.choose(), header = TRUE)
1749331000195:# Spouse = read.csv(file.choose(), header = TRUE)
1749331000195:# Large = read.csv(file.choose(), header = TRUE)
1749331000195:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331000195:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331000195:## surface area
1749331000195:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331000196:## volume
1749331000196:v = "Height * Length * Width"
1749331000196:## density
1749331000196:d = "Mass / Volume"
1749331000196:query =
1749331000196:"
1749331000196:SELECT  Lname
1749331000197:FROM    Shipping
1749331000197:WHERE   Lname = '%Herman%'
1749331000197:"
1749331000197:sqldf(query)
1749331035376:# nfl = read.csv(file.choose(), header = TRUE)
1749331035376:# Shipping = read.csv(file.choose(), header = TRUE)
1749331035376:# Person = read.csv(file.choose(), header = TRUE)
1749331035376:# Parent = read.csv(file.choose(), header = TRUE)
1749331035376:# Spouse = read.csv(file.choose(), header = TRUE)
1749331035376:# Large = read.csv(file.choose(), header = TRUE)
1749331035376:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331035376:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331035377:## surface area
1749331035377:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331035377:## volume
1749331035377:v = "Height * Length * Width"
1749331035377:## density
1749331035377:d = "Mass / Volume"
1749331035377:query =
1749331035377:"
1749331035378:SELECT    Lname
1749331035378:FROM      Shipping
1749331035378:Order by  OriginState
1749331035378:"
1749331035378:sqldf(query)
1749331056492:# nfl = read.csv(file.choose(), header = TRUE)
1749331056492:# Shipping = read.csv(file.choose(), header = TRUE)
1749331056492:# Person = read.csv(file.choose(), header = TRUE)
1749331056492:# Parent = read.csv(file.choose(), header = TRUE)
1749331056493:# Spouse = read.csv(file.choose(), header = TRUE)
1749331056493:# Large = read.csv(file.choose(), header = TRUE)
1749331056493:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331056493:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331056493:## surface area
1749331056493:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331056493:## volume
1749331056493:v = "Height * Length * Width"
1749331056494:## density
1749331056494:d = "Mass / Volume"
1749331056495:query =
1749331056495:"
1749331056495:SELECT    OriginState
1749331056495:FROM      Shipping
1749331056495:Order by  OriginState
1749331056495:"
1749331056496:sqldf(query)
1749331074556:# nfl = read.csv(file.choose(), header = TRUE)
1749331074556:# Shipping = read.csv(file.choose(), header = TRUE)
1749331074556:# Person = read.csv(file.choose(), header = TRUE)
1749331074556:# Parent = read.csv(file.choose(), header = TRUE)
1749331074557:# Spouse = read.csv(file.choose(), header = TRUE)
1749331074557:# Large = read.csv(file.choose(), header = TRUE)
1749331074557:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331074557:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331074557:## surface area
1749331074557:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331074558:## volume
1749331074558:v = "Height * Length * Width"
1749331074558:## density
1749331074558:d = "Mass / Volume"
1749331074558:query =
1749331074559:"
1749331074559:SELECT OriginState
1749331074559:FROM Shipping
1749331074559:Order by OriginState
1749331074559:"
1749331074559:sqldf(query)
1749331085734:# nfl = read.csv(file.choose(), header = TRUE)
1749331085735:# Shipping = read.csv(file.choose(), header = TRUE)
1749331085735:# Person = read.csv(file.choose(), header = TRUE)
1749331085735:# Parent = read.csv(file.choose(), header = TRUE)
1749331085735:# Spouse = read.csv(file.choose(), header = TRUE)
1749331085735:# Large = read.csv(file.choose(), header = TRUE)
1749331085735:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331085735:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331085735:## surface area
1749331085735:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331085738:## volume
1749331085738:v = "Height * Length * Width"
1749331085738:## density
1749331085738:d = "Mass / Volume"
1749331085739:query =
1749331085739:"
1749331085739:SELECT OriginState, Lname
1749331085739:FROM Shipping
1749331085739:Order by OriginState
1749331085739:"
1749331085739:sqldf(query)
1749331101012:Shipping
1749331212350:# nfl = read.csv(file.choose(), header = TRUE)
1749331212350:# Shipping = read.csv(file.choose(), header = TRUE)
1749331212350:# Person = read.csv(file.choose(), header = TRUE)
1749331212350:# Parent = read.csv(file.choose(), header = TRUE)
1749331212350:# Spouse = read.csv(file.choose(), header = TRUE)
1749331212350:# Large = read.csv(file.choose(), header = TRUE)
1749331212350:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331212351:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331212351:## surface area
1749331212351:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331212352:## volume
1749331212352:v = "Height * Length * Width"
1749331212352:## density
1749331212353:d = "Mass / Volume"
1749331212353:query =
1749331212353:"
1749331212353:SELECT OriginState, State
1749331212353:FROM Shipping
1749331212353:Order by OriginState, State
1749331212353:"
1749331212354:sqldf(query)
1749331223516:# nfl = read.csv(file.choose(), header = TRUE)
1749331223517:# Shipping = read.csv(file.choose(), header = TRUE)
1749331223517:# Person = read.csv(file.choose(), header = TRUE)
1749331223517:# Parent = read.csv(file.choose(), header = TRUE)
1749331223517:# Spouse = read.csv(file.choose(), header = TRUE)
1749331223517:# Large = read.csv(file.choose(), header = TRUE)
1749331223517:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331223517:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331223517:## surface area
1749331223517:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331223519:## volume
1749331223520:v = "Height * Length * Width"
1749331223520:## density
1749331223520:d = "Mass / Volume"
1749331223521:query =
1749331223521:"
1749331223521:SELECT OriginState, State
1749331223521:FROM Shipping
1749331223522:Order by OriginState, State
1749331223522:Where OriginState = State
1749331223522:"
1749331223522:sqldf(query)
1749331235188:# nfl = read.csv(file.choose(), header = TRUE)
1749331235188:# Shipping = read.csv(file.choose(), header = TRUE)
1749331235188:# Person = read.csv(file.choose(), header = TRUE)
1749331235189:# Parent = read.csv(file.choose(), header = TRUE)
1749331235189:# Spouse = read.csv(file.choose(), header = TRUE)
1749331235189:# Large = read.csv(file.choose(), header = TRUE)
1749331235189:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331235189:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331235189:## surface area
1749331235189:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331235189:## volume
1749331235189:v = "Height * Length * Width"
1749331235189:## density
1749331235190:d = "Mass / Volume"
1749331235190:query =
1749331235190:"
1749331235190:SELECT OriginState, State
1749331235190:FROM Shipping
1749331235190:Order by OriginState, State
1749331235191:WHERE OriginState == State
1749331235191:"
1749331235191:sqldf(query)
1749331243847:# nfl = read.csv(file.choose(), header = TRUE)
1749331243847:# Shipping = read.csv(file.choose(), header = TRUE)
1749331243847:# Person = read.csv(file.choose(), header = TRUE)
1749331243847:# Parent = read.csv(file.choose(), header = TRUE)
1749331243847:# Spouse = read.csv(file.choose(), header = TRUE)
1749331243847:# Large = read.csv(file.choose(), header = TRUE)
1749331243847:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331243848:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331243848:## surface area
1749331243848:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331243848:## volume
1749331243848:v = "Height * Length * Width"
1749331243848:## density
1749331243849:d = "Mass / Volume"
1749331243849:query =
1749331243849:"
1749331243849:SELECT OriginState, State
1749331243849:FROM Shipping
1749331243849:Order by OriginState, State
1749331243849:"
1749331243849:sqldf(query)
1749331314760:# nfl = read.csv(file.choose(), header = TRUE)
1749331314761:# Shipping = read.csv(file.choose(), header = TRUE)
1749331314761:# Person = read.csv(file.choose(), header = TRUE)
1749331314761:# Parent = read.csv(file.choose(), header = TRUE)
1749331314761:# Spouse = read.csv(file.choose(), header = TRUE)
1749331314761:# Large = read.csv(file.choose(), header = TRUE)
1749331314761:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331314761:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331314761:## surface area
1749331314761:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331314762:## volume
1749331314762:v = "Height * Length * Width"
1749331314762:## density
1749331314763:d = "Mass / Volume"
1749331314763:query =
1749331314763:"
1749331314763:SELECT OriginState, State
1749331314764:FROM Shipping
1749331314764:where OriginState = State
1749331314764:"
1749331314765:sqldf(query)
1749331332456:# nfl = read.csv(file.choose(), header = TRUE)
1749331332456:# Shipping = read.csv(file.choose(), header = TRUE)
1749331332456:# Person = read.csv(file.choose(), header = TRUE)
1749331332456:# Parent = read.csv(file.choose(), header = TRUE)
1749331332456:# Spouse = read.csv(file.choose(), header = TRUE)
1749331332456:# Large = read.csv(file.choose(), header = TRUE)
1749331332456:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331332456:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331332456:## surface area
1749331332457:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331332457:## volume
1749331332457:v = "Height * Length * Width"
1749331332457:## density
1749331332457:d = "Mass / Volume"
1749331332457:query =
1749331332458:"
1749331332458:SELECT OriginState, State
1749331332458:FROM Shipping
1749331332458:order by OriginState, State
1749331332458:"
1749331332459:sqldf(query)
1749331391531:# nfl = read.csv(file.choose(), header = TRUE)
1749331391531:# Shipping = read.csv(file.choose(), header = TRUE)
1749331391531:# Person = read.csv(file.choose(), header = TRUE)
1749331391531:# Parent = read.csv(file.choose(), header = TRUE)
1749331391531:# Spouse = read.csv(file.choose(), header = TRUE)
1749331391531:# Large = read.csv(file.choose(), header = TRUE)
1749331391531:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331391531:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331391532:## surface area
1749331391532:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331391532:## volume
1749331391532:v = "Height * Length * Width"
1749331391532:## density
1749331391532:d = "Mass / Volume"
1749331391533:query =
1749331391533:"
1749331391533:SELECT count(*)
1749331391533:FROM Shipping
1749331391533:Where weight = ''
1749331391534:"
1749331391534:sqldf(query)
1749331406544:# nfl = read.csv(file.choose(), header = TRUE)
1749331406545:# Shipping = read.csv(file.choose(), header = TRUE)
1749331406545:# Person = read.csv(file.choose(), header = TRUE)
1749331406545:# Parent = read.csv(file.choose(), header = TRUE)
1749331406545:# Spouse = read.csv(file.choose(), header = TRUE)
1749331406545:# Large = read.csv(file.choose(), header = TRUE)
1749331406545:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331406545:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331406545:## surface area
1749331406545:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331406546:## volume
1749331406546:v = "Height * Length * Width"
1749331406546:## density
1749331406546:d = "Mass / Volume"
1749331406546:query =
1749331406547:"
1749331406547:SELECT count(*)
1749331406547:FROM Shipping
1749331406547:Where OriginState = State
1749331406547:"
1749331406547:sqldf(query)
1749331459463:# nfl = read.csv(file.choose(), header = TRUE)
1749331459463:# Shipping = read.csv(file.choose(), header = TRUE)
1749331459463:# Person = read.csv(file.choose(), header = TRUE)
1749331459463:# Parent = read.csv(file.choose(), header = TRUE)
1749331459463:# Spouse = read.csv(file.choose(), header = TRUE)
1749331459463:# Large = read.csv(file.choose(), header = TRUE)
1749331459463:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331459463:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331459464:## surface area
1749331459464:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331459464:## volume
1749331459464:v = "Height * Length * Width"
1749331459464:## density
1749331459465:d = "Mass / Volume"
1749331459465:query =
1749331459465:"
1749331459466:SELECT count(*)
1749331459466:FROM Shipping
1749331459466:Group by OriginState
1749331459467:Order by OriginState
1749331459467:"
1749331459467:sqldf(query)
1749331483611:# nfl = read.csv(file.choose(), header = TRUE)
1749331483611:# Shipping = read.csv(file.choose(), header = TRUE)
1749331483611:# Person = read.csv(file.choose(), header = TRUE)
1749331483611:# Parent = read.csv(file.choose(), header = TRUE)
1749331483611:# Spouse = read.csv(file.choose(), header = TRUE)
1749331483612:# Large = read.csv(file.choose(), header = TRUE)
1749331483612:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331483612:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331483612:## surface area
1749331483612:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331483612:## volume
1749331483612:v = "Height * Length * Width"
1749331483613:## density
1749331483613:d = "Mass / Volume"
1749331483613:query =
1749331483613:"
1749331483614:SELECT count(*) state
1749331483614:FROM Shipping
1749331483614:Group by OriginState
1749331483614:Order by OriginState
1749331483614:"
1749331483615:sqldf(query)
1749331494592:# nfl = read.csv(file.choose(), header = TRUE)
1749331494592:# Shipping = read.csv(file.choose(), header = TRUE)
1749331494592:# Person = read.csv(file.choose(), header = TRUE)
1749331494592:# Parent = read.csv(file.choose(), header = TRUE)
1749331494593:# Spouse = read.csv(file.choose(), header = TRUE)
1749331494593:# Large = read.csv(file.choose(), header = TRUE)
1749331494593:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331494593:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331494594:## surface area
1749331494594:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331494594:## volume
1749331494594:v = "Height * Length * Width"
1749331494595:## density
1749331494595:d = "Mass / Volume"
1749331494595:query =
1749331494595:"
1749331494595:SELECT count(*) Name
1749331494595:FROM Shipping
1749331494596:Group by OriginState
1749331494596:Order by OriginState
1749331494596:"
1749331494596:sqldf(query)
1749331516989:# nfl = read.csv(file.choose(), header = TRUE)
1749331516989:# Shipping = read.csv(file.choose(), header = TRUE)
1749331516989:# Person = read.csv(file.choose(), header = TRUE)
1749331516989:# Parent = read.csv(file.choose(), header = TRUE)
1749331516989:# Spouse = read.csv(file.choose(), header = TRUE)
1749331516989:# Large = read.csv(file.choose(), header = TRUE)
1749331516989:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331516989:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331516989:## surface area
1749331516989:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331516991:## volume
1749331516991:v = "Height * Length * Width"
1749331516992:## density
1749331516992:d = "Mass / Volume"
1749331516993:query =
1749331516993:"
1749331516993:SELECT state, count(*)
1749331516993:FROM Shipping
1749331516994:Group by OriginState
1749331516994:Order by OriginState
1749331516994:"
1749331516994:sqldf(query)
1749331526534:# nfl = read.csv(file.choose(), header = TRUE)
1749331526535:# Shipping = read.csv(file.choose(), header = TRUE)
1749331526535:# Person = read.csv(file.choose(), header = TRUE)
1749331526535:# Parent = read.csv(file.choose(), header = TRUE)
1749331526535:# Spouse = read.csv(file.choose(), header = TRUE)
1749331526535:# Large = read.csv(file.choose(), header = TRUE)
1749331526536:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331526536:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331526536:## surface area
1749331526536:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331526536:## volume
1749331526536:v = "Height * Length * Width"
1749331526536:## density
1749331526537:d = "Mass / Volume"
1749331526537:query =
1749331526537:"
1749331526537:SELECT state, count(*), originstate
1749331526537:FROM Shipping
1749331526538:Group by OriginState
1749331526538:Order by OriginState
1749331526538:"
1749331526538:sqldf(query)
1749331635296:# nfl = read.csv(file.choose(), header = TRUE)
1749331635296:# Shipping = read.csv(file.choose(), header = TRUE)
1749331635296:# Person = read.csv(file.choose(), header = TRUE)
1749331635297:# Parent = read.csv(file.choose(), header = TRUE)
1749331635297:# Spouse = read.csv(file.choose(), header = TRUE)
1749331635297:# Large = read.csv(file.choose(), header = TRUE)
1749331635297:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331635297:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331635297:## surface area
1749331635297:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331635298:## volume
1749331635298:v = "Height * Length * Width"
1749331635298:## density
1749331635298:d = "Mass / Volume"
1749331635298:query =
1749331635298:"
1749331635298:select originstate, count(*) as NumberOfPackages
1749331635299:from shipping
1749331635299:group by originstate
1749331635299:order by numberofpackages desc
1749331635299:"
1749331635299:sqldf(query)
1749331642576:# nfl = read.csv(file.choose(), header = TRUE)
1749331642576:# Shipping = read.csv(file.choose(), header = TRUE)
1749331642576:# Person = read.csv(file.choose(), header = TRUE)
1749331642576:# Parent = read.csv(file.choose(), header = TRUE)
1749331642577:# Spouse = read.csv(file.choose(), header = TRUE)
1749331642577:# Large = read.csv(file.choose(), header = TRUE)
1749331642577:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331642577:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331642577:## surface area
1749331642577:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331642577:## volume
1749331642577:v = "Height * Length * Width"
1749331642577:## density
1749331642577:d = "Mass / Volume"
1749331642578:query =
1749331642578:"
1749331642578:select originstate, count(*) as NumberOfPackages
1749331642578:from Shipping
1749331642578:group by originstate
1749331642578:order by numberofpackages desc
1749331642579:"
1749331642579:sqldf(query)
1749331668926:names(Shipping)
1749331715610:# nfl = read.csv(file.choose(), header = TRUE)
1749331715610:# Shipping = read.csv(file.choose(), header = TRUE)
1749331715610:# Person = read.csv(file.choose(), header = TRUE)
1749331715610:# Parent = read.csv(file.choose(), header = TRUE)
1749331715610:# Spouse = read.csv(file.choose(), header = TRUE)
1749331715610:# Large = read.csv(file.choose(), header = TRUE)
1749331715610:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331715610:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331715610:## surface area
1749331715611:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331715611:## volume
1749331715611:v = "Height * Length * Width"
1749331715611:## density
1749331715611:d = "Mass / Volume"
1749331715612:query =
1749331715612:"
1749331715612:select originstate, count(*) as NumberOfPackages
1749331715612:from Shipping
1749331715612:group by originstate, state
1749331715612:order by numberofpackages desc
1749331715612:"
1749331715612:sqldf(query)
1749331735199:# nfl = read.csv(file.choose(), header = TRUE)
1749331735200:# Shipping = read.csv(file.choose(), header = TRUE)
1749331735200:# Person = read.csv(file.choose(), header = TRUE)
1749331735200:# Parent = read.csv(file.choose(), header = TRUE)
1749331735200:# Spouse = read.csv(file.choose(), header = TRUE)
1749331735200:# Large = read.csv(file.choose(), header = TRUE)
1749331735200:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331735200:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331735200:## surface area
1749331735200:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331735201:## volume
1749331735201:v = "Height * Length * Width"
1749331735201:## density
1749331735201:d = "Mass / Volume"
1749331735202:query =
1749331735202:"
1749331735202:select originstate, state, count(*) as NumberOfPackages
1749331735202:from Shipping
1749331735202:group by originstate, state
1749331735202:order by numberofpackages desc
1749331735203:"
1749331735203:sqldf(query)
1749331883315:# nfl = read.csv(file.choose(), header = TRUE)
1749331883315:# Shipping = read.csv(file.choose(), header = TRUE)
1749331883315:# Person = read.csv(file.choose(), header = TRUE)
1749331883315:# Parent = read.csv(file.choose(), header = TRUE)
1749331883315:# Spouse = read.csv(file.choose(), header = TRUE)
1749331883315:# Large = read.csv(file.choose(), header = TRUE)
1749331883315:# Government = read.csv(file.c//hoose(), header = TRUE)
1749331883316:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749331883316:## surface area
1749331883316:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749331883317:## volume
1749331883317:v = "Height * Length * Width"
1749331883318:## density
1749331883318:d = "Mass / Volume"
1749331883318:query =
1749331883318:"
1749331883319:select originstate, state, count(*) as NumberOfPackages
1749331883319:from Shipping
1749331883319:Group by originstate, state
1749331883319:having count(*) > 1
1749331883319:order by NumberOfPackages desc
1749331883320:"
1749331883320:sqldf(query)
1749332092266:# nfl = read.csv(file.choose(), header = TRUE)
1749332092266:# Shipping = read.csv(file.choose(), header = TRUE)
1749332092266:# Person = read.csv(file.choose(), header = TRUE)
1749332092266:# Parent = read.csv(file.choose(), header = TRUE)
1749332092267:# Spouse = read.csv(file.choose(), header = TRUE)
1749332092267:# Large = read.csv(file.choose(), header = TRUE)
1749332092267:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332092267:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332092267:## surface area
1749332092267:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332092268:## volume
1749332092268:v = "Height * Length * Width"
1749332092268:## density
1749332092268:d = "Mass / Volume"
1749332092268:query =
1749332092269:"
1749332092269:select " + sa + " as SurfaceArea
1749332092269:from Shipping
1749332092269:"
1749332112524:# nfl = read.csv(file.choose(), header = TRUE)
1749332112524:# Shipping = read.csv(file.choose(), header = TRUE)
1749332112524:# Person = read.csv(file.choose(), header = TRUE)
1749332112525:# Parent = read.csv(file.choose(), header = TRUE)
1749332112525:# Spouse = read.csv(file.choose(), header = TRUE)
1749332112525:# Large = read.csv(file.choose(), header = TRUE)
1749332112525:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332112526:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332112526:## surface area
1749332112526:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332112526:## volume
1749332112527:v = "Height * Length * Width"
1749332112527:## density
1749332112527:d = "Mass / Volume"
1749332112528:query =
1749332112528:"
1749332112528:select 2 * Height * Width + 2 * Length * Width * 2 * Height * Length
1749332112529:from Shipping
1749332112529:"
1749332112529:sqldf(query)
1749332133017:# nfl = read.csv(file.choose(), header = TRUE)
1749332133017:# Shipping = read.csv(file.choose(), header = TRUE)
1749332133017:# Person = read.csv(file.choose(), header = TRUE)
1749332133017:# Parent = read.csv(file.choose(), header = TRUE)
1749332133017:# Spouse = read.csv(file.choose(), header = TRUE)
1749332133017:# Large = read.csv(file.choose(), header = TRUE)
1749332133017:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332133017:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332133018:## surface area
1749332133018:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332133018:## volume
1749332133018:v = "Height * Length * Width"
1749332133019:## density
1749332133019:d = "Mass / Volume"
1749332133019:query =
1749332133019:"
1749332133019:select 2 * Height * Width + 2 * Length * Width * 2 * Height * Length
1749332133020:as SurfaceArea
1749332133020:from Shipping
1749332133020:"
1749332133020:sqldf(query)
1749332179381:names(Shipping)
1749332510059:# nfl = read.csv(file.choose(), header = TRUE)
1749332510059:# Shipping = read.csv(file.choose(), header = TRUE)
1749332510059:# Person = read.csv(file.choose(), header = TRUE)
1749332510059:# Parent = read.csv(file.choose(), header = TRUE)
1749332510060:# Spouse = read.csv(file.choose(), header = TRUE)
1749332510060:# Large = read.csv(file.choose(), header = TRUE)
1749332510060:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332510060:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332510060:## surface area
1749332510060:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332510060:## volume
1749332510060:v = "Height * Length * Width"
1749332510060:## density
1749332510060:d = "Mass / Volume"
1749332510061:query =
1749332510061:"
1749332510061:select sum(Weight)/sum(length*width*height) as density
1749332510062:from Shipping
1749332510062:"
1749332510062:sqldf(query)
1749332522737:# nfl = read.csv(file.choose(), header = TRUE)
1749332522737:# Shipping = read.csv(file.choose(), header = TRUE)
1749332522737:# Person = read.csv(file.choose(), header = TRUE)
1749332522737:# Parent = read.csv(file.choose(), header = TRUE)
1749332522737:# Spouse = read.csv(file.choose(), header = TRUE)
1749332522738:# Large = read.csv(file.choose(), header = TRUE)
1749332522738:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332522738:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332522738:## surface area
1749332522738:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332522739:## volume
1749332522739:v = "Height * Length * Width"
1749332522739:## density
1749332522739:d = "Mass / Volume"
1749332522739:query =
1749332522739:"
1749332522739:select sum(Weight)/sum(Length*Width*Height) as density
1749332522739:from Shipping
1749332522739:"
1749332522740:sqldf(query)
1749332530226:# nfl = read.csv(file.choose(), header = TRUE)
1749332530227:# Shipping = read.csv(file.choose(), header = TRUE)
1749332530227:# Person = read.csv(file.choose(), header = TRUE)
1749332530227:# Parent = read.csv(file.choose(), header = TRUE)
1749332530227:# Spouse = read.csv(file.choose(), header = TRUE)
1749332530227:# Large = read.csv(file.choose(), header = TRUE)
1749332530227:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332530228:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332530228:## surface area
1749332530229:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332530229:## volume
1749332530229:v = "Height * Length * Width"
1749332530229:## density
1749332530229:d = "Mass / Volume"
1749332530230:query =
1749332530230:"
1749332530230:select sum(Length*Width*Height) as density
1749332530231:from Shipping
1749332530231:"
1749332530231:sqldf(query)
1749332545816:# nfl = read.csv(file.choose(), header = TRUE)
1749332545817:# Shipping = read.csv(file.choose(), header = TRUE)
1749332545817:# Person = read.csv(file.choose(), header = TRUE)
1749332545817:# Parent = read.csv(file.choose(), header = TRUE)
1749332545817:# Spouse = read.csv(file.choose(), header = TRUE)
1749332545817:# Large = read.csv(file.choose(), header = TRUE)
1749332545817:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332545817:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332545817:## surface area
1749332545817:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332545818:## volume
1749332545818:v = "Height * Length * Width"
1749332545818:## density
1749332545818:d = "Mass / Volume"
1749332545818:query =
1749332545818:"
1749332545818:select sum(weight) + sum(Length*Width*Height) as density
1749332545819:from Shipping
1749332545819:"
1749332545819:sqldf(query)
1749332582130:# nfl = read.csv(file.choose(), header = TRUE)
1749332582131:# Shipping = read.csv(file.choose(), header = TRUE)
1749332582131:# Person = read.csv(file.choose(), header = TRUE)
1749332582131:# Parent = read.csv(file.choose(), header = TRUE)
1749332582131:# Spouse = read.csv(file.choose(), header = TRUE)
1749332582131:# Large = read.csv(file.choose(), header = TRUE)
1749332582131:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332582131:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332582131:## surface area
1749332582131:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332582131:## volume
1749332582132:v = "Height * Length * Width"
1749332582132:## density
1749332582132:d = "Mass / Volume"
1749332582133:query =
1749332582133:"
1749332582133:select (sum(weight)/sum(Length*Width*Height)) as density
1749332582133:from Shipping
1749332582133:"
1749332582134:sqldf(query)
1749332595055:# nfl = read.csv(file.choose(), header = TRUE)
1749332595056:# Shipping = read.csv(file.choose(), header = TRUE)
1749332595056:# Person = read.csv(file.choose(), header = TRUE)
1749332595056:# Parent = read.csv(file.choose(), header = TRUE)
1749332595056:# Spouse = read.csv(file.choose(), header = TRUE)
1749332595056:# Large = read.csv(file.choose(), header = TRUE)
1749332595057:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332595057:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332595057:## surface area
1749332595057:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332595057:## volume
1749332595057:v = "Height * Length * Width"
1749332595058:## density
1749332595058:d = "Mass / Volume"
1749332595058:query =
1749332595058:"
1749332595059:select float(sum(weight)/sum(Length*Width*Height)) as density
1749332595059:from Shipping
1749332595059:"
1749332595059:sqldf(query)
1749332674033:# nfl = read.csv(file.choose(), header = TRUE)
1749332674033:# Shipping = read.csv(file.choose(), header = TRUE)
1749332674033:# Person = read.csv(file.choose(), header = TRUE)
1749332674033:# Parent = read.csv(file.choose(), header = TRUE)
1749332674034:# Spouse = read.csv(file.choose(), header = TRUE)
1749332674034:# Large = read.csv(file.choose(), header = TRUE)
1749332674034:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332674035:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332674035:## surface area
1749332674035:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332674035:## volume
1749332674035:v = "Height * Length * Width"
1749332674036:## density
1749332674036:d = "Mass / Volume"
1749332674036:query =
1749332674036:"
1749332674036:select as.double(sum(weight)/sum(Length*Width*Height)) as density
1749332674037:from Shipping
1749332674037:"
1749332674037:sqldf(query)
1749332742220:Shipping$Weight = as.double(Shipping$Weight)
1749332749955:# nfl = read.csv(file.choose(), header = TRUE)
1749332749955:# Shipping = read.csv(file.choose(), header = TRUE)
1749332749955:# Person = read.csv(file.choose(), header = TRUE)
1749332749955:# Parent = read.csv(file.choose(), header = TRUE)
1749332749955:# Spouse = read.csv(file.choose(), header = TRUE)
1749332749955:# Large = read.csv(file.choose(), header = TRUE)
1749332749955:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332749955:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332749955:## surface area
1749332749955:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332749956:## volume
1749332749956:v = "Height * Length * Width"
1749332749956:## density
1749332749956:d = "Mass / Volume"
1749332749957:query =
1749332749957:"
1749332749957:select (sum(weight)/sum(Length*Width*Height)) as density
1749332749957:from Shipping
1749332749958:"
1749332749958:sqldf(query)
1749332767319:# nfl = read.csv(file.choose(), header = TRUE)
1749332767320:# Shipping = read.csv(file.choose(), header = TRUE)
1749332767320:# Person = read.csv(file.choose(), header = TRUE)
1749332767320:# Parent = read.csv(file.choose(), header = TRUE)
1749332767320:# Spouse = read.csv(file.choose(), header = TRUE)
1749332767320:# Large = read.csv(file.choose(), header = TRUE)
1749332767320:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332767320:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332767320:## surface area
1749332767320:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332767321:## volume
1749332767321:v = "Height * Length * Width"
1749332767321:## density
1749332767321:d = "Mass / Volume"
1749332767321:query =
1749332767321:"
1749332767321:select (sum(weight)/sum(Length*Width*Height)) as density
1749332767321:from Shipping
1749332767321:where originstate = 'mi'
1749332767322:"
1749332767322:sqldf(query)
1749332775958:# nfl = read.csv(file.choose(), header = TRUE)
1749332775958:# Shipping = read.csv(file.choose(), header = TRUE)
1749332775958:# Person = read.csv(file.choose(), header = TRUE)
1749332775958:# Parent = read.csv(file.choose(), header = TRUE)
1749332775958:# Spouse = read.csv(file.choose(), header = TRUE)
1749332775958:# Large = read.csv(file.choose(), header = TRUE)
1749332775958:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332775958:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332775958:## surface area
1749332775959:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332775959:## volume
1749332775959:v = "Height * Length * Width"
1749332775959:## density
1749332775960:d = "Mass / Volume"
1749332775960:query =
1749332775960:"
1749332775960:select (sum(weight)/sum(Length*Width*Height)) as density
1749332775960:from Shipping
1749332775961:where originstate = 'MI'
1749332775961:"
1749332775961:sqldf(query)
1749332901539:# nfl = read.csv(file.choose(), header = TRUE)
1749332901539:# Shipping = read.csv(file.choose(), header = TRUE)
1749332901539:# Person = read.csv(file.choose(), header = TRUE)
1749332901539:# Parent = read.csv(file.choose(), header = TRUE)
1749332901539:# Spouse = read.csv(file.choose(), header = TRUE)
1749332901540:# Large = read.csv(file.choose(), header = TRUE)
1749332901540:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332901540:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332901540:## surface area
1749332901540:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332901541:## volume
1749332901541:v = "Height * Length * Width"
1749332901541:## density
1749332901541:d = "Mass / Volume"
1749332901541:query =
1749332901542:"
1749332901542:Select Fname, Lname
1749332901542:From Shipping
1749332901542:Where Mname = ''
1749332901542:And
1749332901542:Weight In
1749332901542:(
1749332901542:Select Weight
1749332901543:From Shipping
1749332901543:Where Weight > 100000
1749332901543:)
1749332901543:"
1749332901543:sqldf(query)
1749332921440:# nfl = read.csv(file.choose(), header = TRUE)
1749332921441:# Shipping = read.csv(file.choose(), header = TRUE)
1749332921441:# Person = read.csv(file.choose(), header = TRUE)
1749332921441:# Parent = read.csv(file.choose(), header = TRUE)
1749332921441:# Spouse = read.csv(file.choose(), header = TRUE)
1749332921441:# Large = read.csv(file.choose(), header = TRUE)
1749332921441:# Government = read.csv(file.c//hoose(), header = TRUE)
1749332921441:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749332921442:## surface area
1749332921442:sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749332921442:## volume
1749332921443:v = "Height * Length * Width"
1749332921443:## density
1749332921443:d = "Mass / Volume"
1749332921443:query =
1749332921443:"
1749332921443:Select Fname, Lname
1749332921443:From Shipping
1749332921443:Where Mname != ''
1749332921444:And
1749332921444:Weight In
1749332921444:(
1749332921444:Select Weight
1749332921444:From Shipping
1749332921444:Where Weight > 100000
1749332921444:)
1749332921445:"
1749332921445:sqldf(query)
1749334106431:# nfl = read.csv(file.choose(), header = TRUE)
1749334106431:# Shipping = read.csv(file.choose(), header = TRUE)
1749334106431:# Person = read.csv(file.choose(), header = TRUE)
1749334106431:# Parent = read.csv(file.choose(), header = TRUE)
1749334106431:# Spouse = read.csv(file.choose(), header = TRUE)
1749334106431:# Large = read.csv(file.choose(), header = TRUE)
1749334106431:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334106432:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334106432:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334106432:## surface area
1749334106432:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334106432:## volume
1749334106432:#v = "Height * Length * Width"
1749334106432:## density
1749334106432:#d = "Mass / Volume"
1749334106432:query =
1749334106432:"
1749334106432:select Person1.Name, Person2.Name
1749334106432:From Person As Person1, Person As Person2
1749334106433:Where Person1.Person != Person2.Person
1749334106433:"
1749334106433:sqldf(query)
1749334474382:# nfl = read.csv(file.choose(), header = TRUE)
1749334474383:# Shipping = read.csv(file.choose(), header = TRUE)
1749334474383:# Person = read.csv(file.choose(), header = TRUE)
1749334474383:# Parent = read.csv(file.choose(), header = TRUE)
1749334474383:# Spouse = read.csv(file.choose(), header = TRUE)
1749334474383:# Large = read.csv(file.choose(), header = TRUE)
1749334474384:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334474384:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334474384:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334474384:## surface area
1749334474384:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334474384:## volume
1749334474385:#v = "Height * Length * Width"
1749334474385:## density
1749334474385:#d = "Mass / Volume"
1749334474385:query =
1749334474385:"
1749334474385:SELECT Parent1.Parent, Parent2.Parent
1749334474385:From Parent as Parent1
1749334474385:Inner Join
1749334474385:Parent as Parent2
1749334474385:On Parent1.Person = Paren2.Person
1749334474385:Where Parent1.Parent != Parent2.Parent
1749334474386:"
1749334474386:sqldf(query)
1749334484730:# nfl = read.csv(file.choose(), header = TRUE)
1749334484730:# Shipping = read.csv(file.choose(), header = TRUE)
1749334484730:# Person = read.csv(file.choose(), header = TRUE)
1749334484730:# Parent = read.csv(file.choose(), header = TRUE)
1749334484730:# Spouse = read.csv(file.choose(), header = TRUE)
1749334484730:# Large = read.csv(file.choose(), header = TRUE)
1749334484730:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334484730:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334484731:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334484731:## surface area
1749334484732:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334484732:## volume
1749334484732:#v = "Height * Length * Width"
1749334484732:## density
1749334484732:#d = "Mass / Volume"
1749334484732:query =
1749334484732:"
1749334484732:SELECT Parent1.Parent, Parent2.Parent
1749334484732:From Parent as Parent1
1749334484733:Inner Join
1749334484733:Parent as Parent2
1749334484733:On Parent1.Person = Parent2.Person
1749334484733:Where Parent1.Parent != Parent2.Parent
1749334484733:"
1749334484733:sqldf(query)
1749334505587:# nfl = read.csv(file.choose(), header = TRUE)
1749334505587:# Shipping = read.csv(file.choose(), header = TRUE)
1749334505587:# Person = read.csv(file.choose(), header = TRUE)
1749334505587:# Parent = read.csv(file.choose(), header = TRUE)
1749334505587:# Spouse = read.csv(file.choose(), header = TRUE)
1749334505587:# Large = read.csv(file.choose(), header = TRUE)
1749334505587:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334505587:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334505587:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334505587:## surface area
1749334505588:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334505588:## volume
1749334505588:#v = "Height * Length * Width"
1749334505588:## density
1749334505589:#d = "Mass / Volume"
1749334505590:query =
1749334505590:"
1749334505590:SELECT Parent1.Parent, Parent2.Parent, name
1749334505590:From Parent as Parent1
1749334505590:Inner Join
1749334505590:Parent as Parent2
1749334505590:On Parent1.Person = Parent2.Person
1749334505590:Where Parent1.Parent != Parent2.Parent
1749334505590:"
1749334505590:sqldf(query)
1749334541524:# nfl = read.csv(file.choose(), header = TRUE)
1749334541525:# Shipping = read.csv(file.choose(), header = TRUE)
1749334541525:# Person = read.csv(file.choose(), header = TRUE)
1749334541525:# Parent = read.csv(file.choose(), header = TRUE)
1749334541525:# Spouse = read.csv(file.choose(), header = TRUE)
1749334541525:# Large = read.csv(file.choose(), header = TRUE)
1749334541525:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334541525:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334541525:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334541525:## surface area
1749334541525:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334541525:## volume
1749334541525:#v = "Height * Length * Width"
1749334541526:## density
1749334541526:#d = "Mass / Volume"
1749334541526:query =
1749334541526:"
1749334541526:SELECT Parent1.Parent, Parent2.Parent, Person.Name
1749334541526:From Parent as Parent1
1749334541527:Inner Join
1749334541527:Parent as Parent2
1749334541527:On Parent1.Person = Parent2.Person
1749334541527:Where Parent1.Parent != Parent2.Parent
1749334541527:"
1749334541528:sqldf(query)
1749334556913:# nfl = read.csv(file.choose(), header = TRUE)
1749334556913:# Shipping = read.csv(file.choose(), header = TRUE)
1749334556913:# Person = read.csv(file.choose(), header = TRUE)
1749334556914:# Parent = read.csv(file.choose(), header = TRUE)
1749334556914:# Spouse = read.csv(file.choose(), header = TRUE)
1749334556914:# Large = read.csv(file.choose(), header = TRUE)
1749334556914:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334556914:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334556914:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334556914:## surface area
1749334556915:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334556915:## volume
1749334556915:#v = "Height * Length * Width"
1749334556915:## density
1749334556915:#d = "Mass / Volume"
1749334556915:query =
1749334556915:"
1749334556915:SELECT Parent1.Parent, Parent2.Parent, Name.Person
1749334556916:From Parent as Parent1
1749334556916:Inner Join
1749334556916:Parent as Parent2
1749334556916:On Parent1.Person = Parent2.Person
1749334556916:Where Parent1.Parent != Parent2.Parent
1749334556916:"
1749334556916:sqldf(query)
1749334570355:# nfl = read.csv(file.choose(), header = TRUE)
1749334570355:# Shipping = read.csv(file.choose(), header = TRUE)
1749334570355:# Person = read.csv(file.choose(), header = TRUE)
1749334570356:# Parent = read.csv(file.choose(), header = TRUE)
1749334570356:# Spouse = read.csv(file.choose(), header = TRUE)
1749334570356:# Large = read.csv(file.choose(), header = TRUE)
1749334570356:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334570356:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334570356:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334570356:## surface area
1749334570356:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334570356:## volume
1749334570356:#v = "Height * Length * Width"
1749334570356:## density
1749334570357:#d = "Mass / Volume"
1749334570357:query =
1749334570357:"
1749334570357:SELECT Parent1.Parent, Parent2.Parent, Name
1749334570357:From Parent as Parent1, Person
1749334570357:Inner Join
1749334570357:Parent as Parent2
1749334570358:On Parent1.Person = Parent2.Person
1749334570358:Where Parent1.Parent != Parent2.Parent
1749334570358:"
1749334570359:sqldf(query)
1749334620954:# nfl = read.csv(file.choose(), header = TRUE)
1749334620954:# Shipping = read.csv(file.choose(), header = TRUE)
1749334620955:# Person = read.csv(file.choose(), header = TRUE)
1749334620955:# Parent = read.csv(file.choose(), header = TRUE)
1749334620955:# Spouse = read.csv(file.choose(), header = TRUE)
1749334620955:# Large = read.csv(file.choose(), header = TRUE)
1749334620955:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334620955:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334620955:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334620955:## surface area
1749334620955:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334620955:## volume
1749334620955:#v = "Height * Length * Width"
1749334620955:## density
1749334620956:#d = "Mass / Volume"
1749334620956:query =
1749334620956:"
1749334620957:SELECT Parent1.Parent, Name, Parent2.Parent, Name, Name
1749334620957:From Parent as Parent1, Person
1749334620957:Inner Join
1749334620957:Parent as Parent2
1749334620957:On Parent1.Person = Parent2.Person
1749334620958:Where Parent1.Parent != Parent2.Parent
1749334620958:"
1749334620958:sqldf(query)
1749334644440:# nfl = read.csv(file.choose(), header = TRUE)
1749334644441:# Shipping = read.csv(file.choose(), header = TRUE)
1749334644441:# Person = read.csv(file.choose(), header = TRUE)
1749334644441:# Parent = read.csv(file.choose(), header = TRUE)
1749334644441:# Spouse = read.csv(file.choose(), header = TRUE)
1749334644441:# Large = read.csv(file.choose(), header = TRUE)
1749334644442:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334644442:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334644442:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334644442:## surface area
1749334644443:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334644443:## volume
1749334644443:#v = "Height * Length * Width"
1749334644443:## density
1749334644443:#d = "Mass / Volume"
1749334644443:query =
1749334644443:"
1749334644444:SELECT Parent1.Parent, Parent2.Parent
1749334644444:From Parent as Parent1, Person, Parent
1749334644444:Inner Join
1749334644444:Parent as Parent2
1749334644444:On Parent1.Person = Parent2.Person
1749334644444:Where Parent1.Parent != Parent2.Parent
1749334644444:"
1749334644445:sqldf(query)
1749334653843:# nfl = read.csv(file.choose(), header = TRUE)
1749334653843:# Shipping = read.csv(file.choose(), header = TRUE)
1749334653844:# Person = read.csv(file.choose(), header = TRUE)
1749334653844:# Parent = read.csv(file.choose(), header = TRUE)
1749334653844:# Spouse = read.csv(file.choose(), header = TRUE)
1749334653844:# Large = read.csv(file.choose(), header = TRUE)
1749334653844:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334653844:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334653844:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334653844:## surface area
1749334653844:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334653844:## volume
1749334653845:#v = "Height * Length * Width"
1749334653845:## density
1749334653845:#d = "Mass / Volume"
1749334653845:query =
1749334653845:"
1749334653845:SELECT Parent1.Parent, Parent2.Parent
1749334653845:From Parent as Parent1
1749334653845:Inner Join
1749334653846:Parent as Parent2
1749334653846:On Parent1.Person = Parent2.Person
1749334653846:Where Parent1.Parent != Parent2.Parent
1749334653846:"
1749334653846:sqldf(query)
1749334713137:# nfl = read.csv(file.choose(), header = TRUE)
1749334713137:# Shipping = read.csv(file.choose(), header = TRUE)
1749334713137:# Person = read.csv(file.choose(), header = TRUE)
1749334713137:# Parent = read.csv(file.choose(), header = TRUE)
1749334713137:# Spouse = read.csv(file.choose(), header = TRUE)
1749334713137:# Large = read.csv(file.choose(), header = TRUE)
1749334713137:# Government = read.csv(file.c//hoose(), header = TRUE)
1749334713138:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749334713138:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749334713138:## surface area
1749334713138:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749334713138:## volume
1749334713138:#v = "Height * Length * Width"
1749334713138:## density
1749334713138:#d = "Mass / Volume"
1749334713138:query =
1749334713138:"
1749334713139:SELECT Distinct Parent1.Parent, Parent2.Parent
1749334713139:From Parent as Parent1
1749334713139:Inner Join
1749334713139:Parent as Parent2
1749334713139:On Parent1.Person = Parent2.Person
1749334713139:Where Parent1.Parent != Parent2.Parent
1749334713139:"
1749334713140:sqldf(query)
1749335194921:# nfl = read.csv(file.choose(), header = TRUE)
1749335194921:# Shipping = read.csv(file.choose(), header = TRUE)
1749335194921:# Person = read.csv(file.choose(), header = TRUE)
1749335194921:# Parent = read.csv(file.choose(), header = TRUE)
1749335194921:# Spouse = read.csv(file.choose(), header = TRUE)
1749335194921:# Large = read.csv(file.choose(), header = TRUE)
1749335194921:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335194921:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335194921:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335194922:## surface area
1749335194922:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335194923:## volume
1749335194923:#v = "Height * Length * Width"
1749335194923:## density
1749335194923:#d = "Mass / Volume"
1749335194924:query =
1749335194924:"
1749335194924:SELECT Distinct Parent1.Parent, Parent2.Parent
1749335194924:From Parent as Parent1
1749335194924:Inner Join
1749335194924:Parent as Parent2
1749335194924:On (Parent1.Person = Parent2.Person)
1749335194924:Inner Join
1749335194925:Person as Person1
1749335194925:On
1749335194925:(Parent1.Parent = Person1.Person)
1749335194925:Inner Joine Person as Person2
1749335194925:On
1749335194925:(Parent2.Parent = Person2.Person)
1749335194925:Where Parent1.Parent != Parent2.Parent
1749335194925:And
1749335194925:Person1.Sex = 'F'
1749335194926:And
1749335194926:Person2.Sex = 'M'
1749335194926:"
1749335194926:sqldf(query)
1749335228720:# nfl = read.csv(file.choose(), header = TRUE)
1749335228720:# Shipping = read.csv(file.choose(), header = TRUE)
1749335228720:# Person = read.csv(file.choose(), header = TRUE)
1749335228720:# Parent = read.csv(file.choose(), header = TRUE)
1749335228721:# Spouse = read.csv(file.choose(), header = TRUE)
1749335228721:# Large = read.csv(file.choose(), header = TRUE)
1749335228721:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335228721:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335228721:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335228721:## surface area
1749335228721:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335228721:## volume
1749335228721:#v = "Height * Length * Width"
1749335228721:## density
1749335228721:#d = "Mass / Volume"
1749335228722:query =
1749335228722:"
1749335228722:SELECT Distinct Parent1.Parent, Parent2.Parent
1749335228722:From Parent AS Parent1
1749335228722:Inner Join
1749335228722:Parent AS Parent2
1749335228723:On (Parent1.Person = Parent2.Person)
1749335228723:Inner Join
1749335228723:Person AS Person1
1749335228723:On
1749335228723:(Parent1.Parent = Person1.Person)
1749335228723:Inner Joine Person AS Person2
1749335228724:On
1749335228724:(Parent2.Parent = Person2.Person)
1749335228724:Where Parent1.Parent != Parent2.Parent
1749335228724:And
1749335228724:Person1.Sex = 'F'
1749335228724:And
1749335228725:Person2.Sex = 'M'
1749335228725:"
1749335228725:sqldf(query)
1749335251240:# nfl = read.csv(file.choose(), header = TRUE)
1749335251240:# Shipping = read.csv(file.choose(), header = TRUE)
1749335251240:# Person = read.csv(file.choose(), header = TRUE)
1749335251240:# Parent = read.csv(file.choose(), header = TRUE)
1749335251240:# Spouse = read.csv(file.choose(), header = TRUE)
1749335251240:# Large = read.csv(file.choose(), header = TRUE)
1749335251240:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335251240:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335251241:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335251241:## surface area
1749335251241:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335251241:## volume
1749335251241:#v = "Height * Length * Width"
1749335251241:## density
1749335251241:#d = "Mass / Volume"
1749335251242:query =
1749335251242:"
1749335251242:SELECT Distinct Parent1.Parent, Parent2.Parent
1749335251243:From Parent as Parent1
1749335251243:Inner Join
1749335251243:Parent as Parent2
1749335251243:On (Parent1.Person = Parent2.Person)
1749335251243:Inner Join
1749335251244:Person as Person1
1749335251244:On
1749335251244:(Parent1.Parent = Person1.Person)
1749335251244:Inner Join Person as Person2
1749335251244:On
1749335251245:(Parent2.Parent = Person2.Person)
1749335251245:Where Parent1.Parent != Parent2.Parent
1749335251245:And
1749335251245:Person1.Sex = 'F'
1749335251245:And
1749335251246:Person2.Sex = 'M'
1749335251246:"
1749335251246:sqldf(query)
1749335347004:## confusing as fuck
1749335347004:query =
1749335347004:"
1749335347004:SELECT Distinct Person1.Name, Person2.Name
1749335347004:From Parent as Parent1
1749335347004:Inner Join
1749335347004:Parent as Parent2
1749335347004:On (Parent1.Person = Parent2.Person)
1749335347004:Inner Join
1749335347005:Person as Person1
1749335347005:On
1749335347005:(Parent1.Parent = Person1.Person)
1749335347005:Inner Join Person as Person2
1749335347005:On
1749335347005:(Parent2.Parent = Person2.Person)
1749335347006:Where Parent1.Parent != Parent2.Parent
1749335347006:And
1749335347006:Person1.Sex = 'F'
1749335347006:And
1749335347006:Person2.Sex = 'M'
1749335347007:"
1749335347007:sqldf(query)
1749335675111:# nfl = read.csv(file.choose(), header = TRUE)
1749335675112:# Shipping = read.csv(file.choose(), header = TRUE)
1749335675112:# Person = read.csv(file.choose(), header = TRUE)
1749335675112:# Parent = read.csv(file.choose(), header = TRUE)
1749335675113:# Spouse = read.csv(file.choose(), header = TRUE)
1749335675113:# Large = read.csv(file.choose(), header = TRUE)
1749335675113:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335675113:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335675113:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335675114:## surface area
1749335675114:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335675114:## volume
1749335675114:#v = "Height * Length * Width"
1749335675115:## density
1749335675115:#d = "Mass / Volume"
1749335675115:query =
1749335675115:"
1749335675115:select person1.name, person2.name
1749335675116:from person as person1
1749335675116:left outer join
1749335675116:parent
1749335675116:on (person1.person = parent.parent)
1749335675116:left outer join
1749335675116:person as person2
1749335675116:on
1749335675116:(parent.person = person2.person)
1749335675116:where person1.sex = 'f'
1749335675117:order by person1.person
1749335675117:"
1749335675117:sqldf(query)
1749335683977:# nfl = read.csv(file.choose(), header = TRUE)
1749335683977:# Shipping = read.csv(file.choose(), header = TRUE)
1749335683977:# Person = read.csv(file.choose(), header = TRUE)
1749335683977:# Parent = read.csv(file.choose(), header = TRUE)
1749335683977:# Spouse = read.csv(file.choose(), header = TRUE)
1749335683977:# Large = read.csv(file.choose(), header = TRUE)
1749335683978:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335683978:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335683978:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335683978:## surface area
1749335683978:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335683978:## volume
1749335683978:#v = "Height * Length * Width"
1749335683978:## density
1749335683979:#d = "Mass / Volume"
1749335683979:query =
1749335683979:"
1749335683979:select person1.name, person2.name
1749335683979:from Person as person1
1749335683979:left outer join
1749335683979:parent
1749335683979:on (person1.person = parent.parent)
1749335683980:left outer join
1749335683980:person as person2
1749335683980:on
1749335683980:(parent.person = person2.person)
1749335683980:where person1.sex = 'f'
1749335683980:order by person1.person
1749335683980:"
1749335683981:sqldf(query)
1749335880116:# nfl = read.csv(file.choose(), header = TRUE)
1749335880116:# Shipping = read.csv(file.choose(), header = TRUE)
1749335880116:# Person = read.csv(file.choose(), header = TRUE)
1749335880116:# Parent = read.csv(file.choose(), header = TRUE)
1749335880116:# Spouse = read.csv(file.choose(), header = TRUE)
1749335880116:# Large = read.csv(file.choose(), header = TRUE)
1749335880116:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335880116:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335880117:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335880117:## surface area
1749335880117:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335880117:## volume
1749335880117:#v = "Height * Length * Width"
1749335880117:## density
1749335880117:#d = "Mass / Volume"
1749335880117:query =
1749335880117:"
1749335880118:select person1.name, person2.name
1749335880118:from Person as person1
1749335880118:left outer join
1749335880118:Parent
1749335880118:on (person1.person = parent.parent)
1749335880118:left outer join
1749335880118:person as person2
1749335880118:on
1749335880118:(parent.person = person2.person)
1749335880118:where person1.sex = 'f'
1749335880119:order by person1.person
1749335880119:"
1749335880119:sqldf(query)
1749335937129:# nfl = read.csv(file.choose(), header = TRUE)
1749335937129:# Shipping = read.csv(file.choose(), header = TRUE)
1749335937129:# Person = read.csv(file.choose(), header = TRUE)
1749335937129:# Parent = read.csv(file.choose(), header = TRUE)
1749335937129:# Spouse = read.csv(file.choose(), header = TRUE)
1749335937129:# Large = read.csv(file.choose(), header = TRUE)
1749335937129:# Government = read.csv(file.c//hoose(), header = TRUE)
1749335937129:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749335937129:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749335937129:## surface area
1749335937130:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749335937130:## volume
1749335937130:#v = "Height * Length * Width"
1749335937130:## density
1749335937131:#d = "Mass / Volume"
1749335937131:query =
1749335937132:"
1749335937132:select person1.name, person2.name
1749335937132:from Person as Person1
1749335937132:left outer join
1749335937132:Parent
1749335937132:on (Person1.Person = Parent.Parent)
1749335937133:left outer join
1749335937133:Person as Person2
1749335937133:on
1749335937133:(Parent.Person = Person2.Person)
1749335937134:where Person1.sex = 'f'
1749335937134:order by Person1.Person
1749335937134:"
1749335937134:sqldf(query)
1749336091193:# nfl = read.csv(file.choose(), header = TRUE)
1749336091193:# Shipping = read.csv(file.choose(), header = TRUE)
1749336091193:# Person = read.csv(file.choose(), header = TRUE)
1749336091193:# Parent = read.csv(file.choose(), header = TRUE)
1749336091193:# Spouse = read.csv(file.choose(), header = TRUE)
1749336091193:# Large = read.csv(file.choose(), header = TRUE)
1749336091193:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336091193:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336091194:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336091194:## surface area
1749336091194:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336091194:## volume
1749336091194:#v = "Height * Length * Width"
1749336091194:## density
1749336091194:#d = "Mass / Volume"
1749336091195:query =
1749336091195:"
1749336091195:SELECT Person1.Name, Person2.Name
1749336091196:FROM Person AS Person1 LEFT OUTER JOIN Parent ON
1749336091196:(Person1.Person = Parent.Parent) LEFT OUTER JOIN
1749336091196:Person AS Person2 ON(Parent.Person = Person2.Person)
1749336091196:WHERE Person1.Sex = 'F'
1749336091196:ORDER BY Person1.Person
1749336091196:"
1749336091197:sqldf(query)
1749336288415:# nfl = read.csv(file.choose(), header = TRUE)
1749336288415:# Shipping = read.csv(file.choose(), header = TRUE)
1749336288415:# Person = read.csv(file.choose(), header = TRUE)
1749336288415:# Parent = read.csv(file.choose(), header = TRUE)
1749336288415:# Spouse = read.csv(file.choose(), header = TRUE)
1749336288415:# Large = read.csv(file.choose(), header = TRUE)
1749336288415:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336288416:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336288416:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336288416:## surface area
1749336288416:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336288416:## volume
1749336288416:#v = "Height * Length * Width"
1749336288417:## density
1749336288417:#d = "Mass / Volume"
1749336288417:query =
1749336288417:"
1749336288417:SELECT Spouse.Spouse1, Parent.*
1749336288417:FROM Spouse
1749336288417:RIGHT OUTER JOIN
1749336288417:Parent ON Spouse.Spouse2 = Parent.Parent
1749336288418:INNER JOIN
1749336288418:Person ON Parent.Parent = Person.Person
1749336288418:WHERE Person1.Sex = 'F'
1749336288418:ORDER BY Person1.Person
1749336288418:"
1749336288418:sqldf(query)
1749336299897:# nfl = read.csv(file.choose(), header = TRUE)
1749336299897:# Shipping = read.csv(file.choose(), header = TRUE)
1749336299897:# Person = read.csv(file.choose(), header = TRUE)
1749336299897:# Parent = read.csv(file.choose(), header = TRUE)
1749336299897:# Spouse = read.csv(file.choose(), header = TRUE)
1749336299897:# Large = read.csv(file.choose(), header = TRUE)
1749336299897:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336299897:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336299897:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336299898:## surface area
1749336299898:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336299898:## volume
1749336299898:#v = "Height * Length * Width"
1749336299898:## density
1749336299898:#d = "Mass / Volume"
1749336299899:query =
1749336299899:"
1749336299899:SELECT Spouse.Spouse1, Parent.*
1749336299899:FROM Spouse
1749336299899:RIGHT OUTER JOIN
1749336299900:Parent ON Spouse.Spouse2 = Parent.Parent
1749336299900:INNER JOIN
1749336299900:Person ON Parent.Parent = Person.Person
1749336299900:WHERE Person.Sex = 'F'
1749336299901:ORDER BY Person1.Person
1749336299901:"
1749336299901:sqldf(query)
1749336310944:# nfl = read.csv(file.choose(), header = TRUE)
1749336310944:# Shipping = read.csv(file.choose(), header = TRUE)
1749336310944:# Person = read.csv(file.choose(), header = TRUE)
1749336310944:# Parent = read.csv(file.choose(), header = TRUE)
1749336310944:# Spouse = read.csv(file.choose(), header = TRUE)
1749336310944:# Large = read.csv(file.choose(), header = TRUE)
1749336310944:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336310944:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336310944:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336310945:## surface area
1749336310945:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336310945:## volume
1749336310945:#v = "Height * Length * Width"
1749336310945:## density
1749336310945:#d = "Mass / Volume"
1749336310945:query =
1749336310945:"
1749336310945:SELECT Spouse.Spouse1, Parent.*
1749336310945:FROM Spouse
1749336310945:RIGHT OUTER JOIN
1749336310946:Parent ON Spouse.Spouse2 = Parent.Parent
1749336310946:INNER JOIN
1749336310946:Person ON Parent.Parent = Person.Person
1749336310946:WHERE Person.Sex = 'F'
1749336310947:"
1749336310947:sqldf(query)
1749336601924:# nfl = read.csv(file.choose(), header = TRUE)
1749336601924:# Shipping = read.csv(file.choose(), header = TRUE)
1749336601924:# Person = read.csv(file.choose(), header = TRUE)
1749336601925:# Parent = read.csv(file.choose(), header = TRUE)
1749336601925:# Spouse = read.csv(file.choose(), header = TRUE)
1749336601925:# Large = read.csv(file.choose(), header = TRUE)
1749336601925:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336601925:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336601925:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336601925:## surface area
1749336601925:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336601926:## volume
1749336601926:#v = "Height * Length * Width"
1749336601926:## density
1749336601926:#d = "Mass / Volume"
1749336601926:query =
1749336601926:"
1749336601926:Select Person.Name
1749336601926:From Person
1749336601926:Where Sex = 'M'
1749336601927:And Exists
1749336601927:(
1749336601927:Select Parent.Parent
1749336601927:From Parent
1749336601927:Where Person.Person = Parent.Parent
1749336601927:)
1749336601927:"
1749336601927:sqldf(query)
1749336671163:# nfl = read.csv(file.choose(), header = TRUE)
1749336671164:# Shipping = read.csv(file.choose(), header = TRUE)
1749336671164:# Person = read.csv(file.choose(), header = TRUE)
1749336671164:# Parent = read.csv(file.choose(), header = TRUE)
1749336671164:# Spouse = read.csv(file.choose(), header = TRUE)
1749336671164:# Large = read.csv(file.choose(), header = TRUE)
1749336671164:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336671164:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336671164:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336671164:## surface area
1749336671165:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336671165:## volume
1749336671165:#v = "Height * Length * Width"
1749336671165:## density
1749336671165:#d = "Mass / Volume"
1749336671165:query =
1749336671165:"
1749336671166:Select Person.Name
1749336671166:From Person
1749336671166:Where Sex = 'F'
1749336671166:And Exists
1749336671166:(
1749336671166:Select Parent.Parent
1749336671166:From Parent
1749336671166:Where Person.Person = Parent.Parent
1749336671166:)
1749336671166:"
1749336671167:sqldf(query)
1749336814903:# nfl = read.csv(file.choose(), header = TRUE)
1749336814903:# Shipping = read.csv(file.choose(), header = TRUE)
1749336814903:# Person = read.csv(file.choose(), header = TRUE)
1749336814904:# Parent = read.csv(file.choose(), header = TRUE)
1749336814904:# Spouse = read.csv(file.choose(), header = TRUE)
1749336814904:# Large = read.csv(file.choose(), header = TRUE)
1749336814904:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336814904:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336814904:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336814904:## surface area
1749336814904:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336814904:## volume
1749336814904:#v = "Height * Length * Width"
1749336814904:## density
1749336814905:#d = "Mass / Volume"
1749336814905:query =
1749336814905:"
1749336814905:Select Person.Name
1749336814905:From Person
1749336814905:Where Sex = 'F'
1749336814905:And Note Exists
1749336814905:(
1749336814906:Select Spouse.Spouse1
1749336814906:From Spouse
1749336814906:Where Person.Person = Spouse.Spouse1
1749336814906:)
1749336814906:"
1749336814906:sqldf(query)
1749336827798:# nfl = read.csv(file.choose(), header = TRUE)
1749336827799:# Shipping = read.csv(file.choose(), header = TRUE)
1749336827799:# Person = read.csv(file.choose(), header = TRUE)
1749336827799:# Parent = read.csv(file.choose(), header = TRUE)
1749336827799:# Spouse = read.csv(file.choose(), header = TRUE)
1749336827799:# Large = read.csv(file.choose(), header = TRUE)
1749336827799:# Government = read.csv(file.c//hoose(), header = TRUE)
1749336827799:# TicketToRide = read.csv(file.choose(), header = TRUE)
1749336827799:#"Select Fname, Lname#From Shipping#Where Mname != ''#And#Weight In#(Select Weight#From Shipping#Where Weight > 100000)"
1749336827799:## surface area
1749336827799:#sa = "2 * Height * Width + 2 * Length * Width * 2 * Height * Length"
1749336827800:## volume
1749336827800:#v = "Height * Length * Width"
1749336827800:## density
1749336827800:#d = "Mass / Volume"
1749336827800:query =
1749336827800:"
1749336827801:Select Person.Name
1749336827801:From Person
1749336827801:Where Sex = 'F'
1749336827801:And Not Exists
1749336827801:(
1749336827802:Select Spouse.Spouse1
1749336827802:From Spouse
1749336827802:Where Person.Person = Spouse.Spouse1
1749336827802:)
1749336827802:"
1749336827803:sqldf(query)
1749337220723:names(Largest)
1749337236112:names(Large)
1749337419038:script =
1749337419038:"
1749337419039:select
1749337419039:*
1749337419039:from
1749337419039:Large, Government, TicketToRide
1749337419039:where
1749337419039:Like %
1749337419039:"
1749337419039:sqldf(script)
1749337428929:script =
1749337428930:"
1749337428930:select
1749337428930:*
1749337428930:from
1749337428930:Large, Government, TicketToRide
1749337428930:where
1749337428930:Like '%'
1749337428930:"
1749337428930:sqldf(script)
1749337439496:script =
1749337439496:"
1749337439496:select
1749337439496:*
1749337439496:from
1749337439496:Large, Government, TicketToRide
1749337439496:where
1749337439497:Like '%s%'
1749337439497:"
1749337439497:sqldf(script)
1749337628015:script =
1749337628015:"
1749337628015:Select State, FirstCity, County As City, 1 as RankInState
1749337628015:From Large
1749337628015:Union
1749337628015:Select State, SecondCity, Country, 2
1749337628016:From Large
1749337628016:Union
1749337628017:Select State, ThirdCity, County, 3
1749337628018:From Large
1749337628018:"
1749337628019:sqldf(script)
1749337635833:script =
1749337635833:"
1749337635833:Select State, FirstCity, County As City, 1 as RankInState
1749337635833:From Large
1749337635833:Union
1749337635833:Select State, SecondCity, Country, 2
1749337635833:From Large
1749337635833:Union
1749337635834:Select State, ThirdCity, Country, 3
1749337635834:From Large
1749337635834:"
1749337635834:sqldf(script)
1749337642266:script =
1749337642267:"
1749337642267:Select State, FirstCity, Country As City, 1 as RankInState
1749337642267:From Large
1749337642267:Union
1749337642267:Select State, SecondCity, Country, 2
1749337642267:From Large
1749337642267:Union
1749337642267:Select State, ThirdCity, Country, 3
1749337642267:From Large
1749337642268:"
1749337642268:sqldf(script)
1749337696221:script =
1749337696221:"
1749337696221:Select State, FirstCity As City, Country, 1 as RankInState
1749337696221:From Large
1749337696221:Union
1749337696221:Select State, SecondCity, Country, 2
1749337696221:From Large
1749337696222:Union
1749337696222:Select State, ThirdCity, Country, 3
1749337696222:From Large
1749337696223:"
1749337696223:sqldf(script)
1749337980685:CapitalAndLargest =
1749337980685:"
1749337980685:Select City, State, 'Capital' As Designation
1749337980685:From Government
1749337980686:Where Country = 'US'
1749337980686:Union
1749337980687:Select FirstCity, State, 'Largest' As Designation
1749337980687:From Large
1749337980687:Where Country = 'US'
1749337980687:"
1749337980688:sqldf(CapitalAndLargest)
1749337996184:names(Government)
1749338009335:Rowify =
1749338009335:"
1749338009336:Select State, FirstCity As City, Country, 1 as RankInState
1749338009336:From Large
1749338009336:Union
1749338009336:Select State, SecondCity, Country, 2
1749338009336:From Large
1749338009336:Union
1749338009337:Select State, ThirdCity, Country, 3
1749338009337:From Large
1749338009337:"
1749338009337:CapitalAndLargest =
1749338009337:"
1749338009337:Select Capital, State, 'Capital' As Designation
1749338009337:From Government
1749338009338:Where Country = 'US'
1749338009338:Union
1749338009338:Select FirstCity, State, 'Largest' As Designation
1749338009338:From Large
1749338009338:Where Country = 'US'
1749338009338:"
1749338009339:sqldf(CapitalAndLargest)
1749338032835:Rowify =
1749338032835:"
1749338032835:Select State, FirstCity As City, Country, 1 as RankInState
1749338032835:From Large
1749338032835:Union
1749338032835:Select State, SecondCity, Country, 2
1749338032835:From Large
1749338032836:Union
1749338032836:Select State, ThirdCity, Country, 3
1749338032836:From Large
1749338032836:"
1749338032836:CapitalAndLargest =
1749338032836:"
1749338032836:Select Capital, State, 'Capital' As Designation
1749338032836:From Government
1749338032836:Where Country = 'US'
1749338032837:Union
1749338032837:Select FirstCity, State, 'Largest' As Designation
1749338032837:From Large
1749338032837:Where Country = 'US'
1749338032837:Order by State
1749338032838:"
1749338032838:sqldf(CapitalAndLargest)
1749338366425:crossroads =
1749338366425:"
1749338366425:Select Capital, State
1749338366425:From Governenment
1749338366426:Intersect
1749338366426:Select FirstCity, State
1749338366426:From Large
1749338366426:"
1749338390441:crossroads =
1749338390441:"
1749338390441:Select Capital, State
1749338390441:From Governenment
1749338390441:Intersect
1749338390442:Select FirstCity, State
1749338390442:From Large
1749338390442:"
1749338390443:sqldf(crossroads)
1749338399763:crossroads =
1749338399763:"
1749338399764:Select Capital, State
1749338399764:From Government
1749338399764:Intersect
1749338399764:Select FirstCity, State
1749338399764:From Large
1749338399764:"
1749338399765:sqldf(crossroads)
1749338518667:simple =
1749338518667:"
1749338518667:Select State
1749338518667:From Government
1749338518668:Where LowerHouse = UpperHouse
1749338518668:"
1749338518669:sqldf(simple)
1749338570931:crossroads =
1749338570932:"
1749338570932:Select Capital, State
1749338570932:From Government
1749338570932:Intersect
1749338570932:Select FirstCity, State
1749338570932:From Large
1749338570932:"
1749338570932:simple =
1749338570933:"
1749338570933:Select State, Country
1749338570933:From Government
1749338570933:Where LowerHouse = UpperHouse
1749338570933:"
1749338570933:sqldf(simple)
1749338726315:crossroads =
1749338726315:"
1749338726315:Select Capital, State
1749338726315:From Government
1749338726316:Intersect
1749338726316:Select FirstCity, State
1749338726316:From Large
1749338726316:"
1749338726316:simple =
1749338726316:"
1749338726316:Select State, Country
1749338726316:From Government
1749338726316:Where LowerHouse = UpperHouse
1749338726317:"
1749338726317:complex =
1749338726317:"
1749338726317:select State
1749338726317:from Government
1749338726317:where LowerHouse = 'R'
1749338726318:Intersect
1749338726318:select State
1749338726318:from Government
1749338726318:where UpperHouse = 'R'
1749338726318:union
1749338726318:select State
1749338726318:from Government
1749338726319:where LowerHouse = 'D'
1749338726319:Intersect
1749338726319:select State
1749338726319:from Government
1749338726319:where UpperHouse = 'D'
1749338726319:"
1749338726320:sqldf(simple)
1749338750229:complex =
1749338750229:"
1749338750229:select State
1749338750229:from Government
1749338750229:where LowerHouse = 'R'
1749338750230:Intersect
1749338750230:select State
1749338750230:from Government
1749338750230:where UpperHouse = 'R'
1749338750230:union
1749338750230:select State
1749338750230:from Government
1749338750230:where LowerHouse = 'D'
1749338750230:Intersect
1749338750231:select State
1749338750231:from Government
1749338750231:where UpperHouse = 'D'
1749338750231:"
1749338753188:crossroads =
1749338753189:"
1749338753189:Select Capital, State
1749338753189:From Government
1749338753189:Intersect
1749338753189:Select FirstCity, State
1749338753189:From Large
1749338753190:"
1749338753190:simple =
1749338753191:"
1749338753191:Select State, Country
1749338753191:From Government
1749338753191:Where LowerHouse = UpperHouse
1749338753191:"
1749338753192:complex =
1749338753192:"
1749338753192:select State
1749338753192:from Government
1749338753192:where LowerHouse = 'R'
1749338753192:Intersect
1749338753192:select State
1749338753193:from Government
1749338753193:where UpperHouse = 'R'
1749338753193:union
1749338753193:select State
1749338753194:from Government
1749338753194:where LowerHouse = 'D'
1749338753194:Intersect
1749338753195:select State
1749338753195:from Government
1749338753195:where UpperHouse = 'D'
1749338753195:"
1749338753196:sqldf(complex)
1749338833521:crossroads =
1749338833521:"
1749338833521:Select Capital, State
1749338833521:From Government
1749338833522:Intersect
1749338833522:Select FirstCity, State
1749338833522:From Large
1749338833522:"
1749338833523:simple =
1749338833523:"
1749338833523:Select State, Country
1749338833523:From Government
1749338833523:Where LowerHouse = UpperHouse
1749338833523:"
1749338833523:complex =
1749338833523:"
1749338833523:select State
1749338833524:from Government
1749338833524:where LowerHouse = 'R'
1749338833524:Intersect
1749338833524:select State
1749338833524:from Government
1749338833524:where UpperHouse = 'R'
1749338833524:union
1749338833524:select State
1749338833524:from Government
1749338833525:where LowerHouse = 'D'
1749338833525:Intersect
1749338833525:select State
1749338833525:from Government
1749338833525:where UpperHouse = 'D'
1749338833525:"
1749338833526:lowercaseNotCapital =
1749338833526:"
1749338833526:Select City, State
1749338833526:From TicketToRide
1749338833526:Except
1749338833526:Select Capital, State
1749338833526:From Government
1749338833527:"
1749338833527:sqldf(lowercaseNotCapital)
1749338853156:crossroads =
1749338853156:"
1749338853156:Select Capital, State
1749338853156:From Government
1749338853156:Intersect
1749338853156:Select FirstCity, State
1749338853157:From Large
1749338853157:"
1749338853157:simple =
1749338853157:"
1749338853158:Select State, Country
1749338853158:From Government
1749338853158:Where LowerHouse = UpperHouse
1749338853158:"
1749338853158:complex =
1749338853158:"
1749338853158:select State
1749338853158:from Government
1749338853158:where LowerHouse = 'R'
1749338853159:Intersect
1749338853159:select State
1749338853159:from Government
1749338853159:where UpperHouse = 'R'
1749338853159:union
1749338853159:select State
1749338853159:from Government
1749338853159:where LowerHouse = 'D'
1749338853160:Intersect
1749338853160:select State
1749338853160:from Government
1749338853160:where UpperHouse = 'D'
1749338853160:"
1749338853160:lowercaseNotCapital =
1749338853160:"
1749338853161:Select City, State
1749338853161:From TicketToRide
1749338853161:Except
1749338853161:Select Capital, State
1749338853161:From Government
1749338853161:order by state
1749338853161:"
1749338853162:sqldf(lowercaseNotCapital)
1749339732161:install.packages("sqldf")
1749339740184:libary(sqldf)
1749339746794:library('sqldf')
1749339785527:locations = read.csv(file.select(), header=T)
1749339797087:locations = read.csv(file.choose(), header=T)
1749339828484:customers = read.csv(file.choose(),header=T)
1749339858977:flavors = read.csv(file.choose(),header=T)
1749339879137:orders = read.csv(file.choose(),header=T)
1749339905997:toppings = read.csv(fild.choose(),header=T)
1749339912408:toppings = read.csv(file.choose(),header=T)
1749340252218:## confirm all 500 orders have a first scoop
1749340252219:fiveHunFirstScoop =
1749340252219:"
1749340252219:select count(Scoop1)
1749340252219:from orders
1749340252219:"
1749340252219:sqldf(fiveHunFirstScoop)
1749340474729:## 2.) site names by sales, descending
1749340474729:mostSales =
1749340474729:"
1749340474729:select City
1749340474729:from locations
1749340474729:order by count(Site) in orders
1749340474729:"
1749340474730:sqldf(mostSales)
1749340530711:## 2.) site names by sales, descending
1749340530711:mostSales =
1749340530711:"
1749340530711:select count(Site)
1749340530712:from orders
1749340530712:order by DESC
1749340530712:"
1749340530712:sqldf(mostSales)
1749340547651:## 2.) site names by sales, descending
1749340547651:mostSales =
1749340547651:"
1749340547651:select count(Site)
1749340547652:from orders
1749340547652:order desc
1749340547652:"
1749340547652:sqldf(mostSales)
1749340568503:te names by sales, descending
1749340576942:## 2.) site names by sales, descending
1749340576943:mostSales =
1749340576943:"
1749340576943:select count(Site)
1749340576943:from orders
1749340576943:order by count DESC
1749340576943:"
1749340576943:sqldf(mostSales)
1749340588753:mostSales =
1749340588753:"
1749340588753:select count(Site)
1749340588753:from orders
1749340588754:"
1749340588754:sqldf(mostSales)
1749340628467:mostSales =
1749340628467:"
1749340628467:select distinct count(Site)
1749340628467:from orders
1749340628467:"
1749340628467:sqldf(mostSales)
1749340641031:mostSales =
1749340641031:"
1749340641031:select distinct Site
1749340641031:from orders
1749340641031:"
1749340641031:sqldf(mostSales)
1749340725090:mostSales =
1749340725091:"
1749340725091:Select distinct Site as spot
1749340725091:From orders
1749340725091:order by Count(spot)
1749340725091:"
1749340725091:sqldf(mostSales)
1749475877438:install.packages('sqldf')
1749475892759:library('sqldf')
1749475959677:locations = read.csv(file.choose(), header=T)
1749475964910:customers = read.csv(file.choose(),header=T)
1749475969861:flavors = read.csv(file.choose(),header=T)
1749475974389:orders = read.csv(file.choose(),header=T)
1749475976092:toppings = read.csv(file.choose(),header=T)
1749475993391:names(locations)
1749476037233:names(customers)
1749476061722:names(flavors)
1749476082174:names(orders)
1749476105260:names(toppings)
1749476304245:## 2.) site names by sales, descending
1749476304245:mostSales =
1749476304245:"
1749476304245:Select 1.location,
1749476304245:Count(o.ID) as TotalSales
1749476304245:From orders o
1749476304245:Join locations 1 On o.Site = 1.ID
1749476304245:Order By TotalSales DESC
1749476304246:"
1749476304246:sqldf(mostSales)
1749476384223:## 2.) site names by sales, descending
1749476384224:mostSales =
1749476384224:"
1749476384224:Select l.location,
1749476384224:Count(o.ID) as TotalSales
1749476384224:From orders o
1749476384224:Join locations l On o.Site = l.ID
1749476384224:Order By TotalSales DESC
1749476384225:"
1749476384225:sqldf(mostSales)
1749476403696:## 2.) site names by sales, descending
1749476403696:mostSales =
1749476403696:"
1749476403696:Select location,
1749476403696:Count(ID) as TotalSales
1749476403697:From orders o
1749476403697:Join locations On Site = ID
1749476403697:Order By TotalSales DESC
1749476403697:"
1749476403698:sqldf(mostSales)
1749476576065:## 2.) site names by sales, descending
1749476576065:mostSales =
1749476576065:"
1749476576065:select distinct count(sales)
1749476576065:from orders
1749476576066:"
1749476576066:sqldf(mostSales)
1749476593758:names(sales)
1749476606613:names(orders)
1749476627234:## 2.) site names by sales, descending
1749476627234:mostSales =
1749476627234:"
1749476627234:select distinct ID count(ID)
1749476627234:from orders
1749476627234:"
1749476627235:sqldf(mostSales)
1749476641986:mostSales =
1749476641986:"
1749476641986:select distinct ID count(ID)
1749476641986:from orders
1749476641987:"
1749476641987:sqldf(mostSales)
1749476661491:3-3
1749476670445:mostSales =
1749476670445:"
1749476670445:select distinct ID count(ID)
1749476670445:from orders
1749476670445:"
1749476670446:sqldf(mostSales)
1749476687281:mostSales =
1749476687281:"
1749476687281:select distinct ID count(ID)
1749476687282:from orders
1749476687282:"
1749476687282:sqldf(mostSales)
1749476708560:fiveHunFirstScoop =
1749476708560:"
1749476708560:Select count(Scoop1)
1749476708560:From orders
1749476708560:"
1749476708560:sqldf(fiveHunFirstScoop)
1749476719850:## 2.) site names by sales, descending
1749476719851:mostSales =
1749476719851:"
1749476719851:select distinct ID count(ID)
1749476719851:from orders
1749476719851:"
1749476719851:sqldf(mostSales)
1749476767876:sqldf(mostSales)
1749476783708:sqldf(mostSales)
1749476788611:sqldf(mostSales)
1749476815851:mostSales =
1749476815852:"
1749476815852:select distinct(ID) count(ID)
1749476815852:from orders
1749476815852:"
1749476815852:sqldf(mostSales)
1749476875719:mostSales =
1749476875719:"
1749476875719:select count(ID) as orderCount
1749476875719:from orders
1749476875719:"
1749476875720:sqldf(mostSales)
1749476900654:mostSales =
1749476900655:"
1749476900655:select count(distinct ID) as orderCount
1749476900655:from orders
1749476900655:"
1749476900655:sqldf(mostSales)
1749476915309:names(orders)
1749476925264:mostSales =
1749476925264:"
1749476925264:select count(distinct Site) as orderCount
1749476925265:from orders
1749476925265:"
1749476925265:sqldf(mostSales)
1749476935312:mostSales =
1749476935312:"
1749476935312:select count(Site) as orderCount
1749476935312:from orders
1749476935312:"
1749476935313:sqldf(mostSales)
1749476960578:locations
1749477025038:mostSales =
1749477025038:"
1749477025039:select
1749477025039:count(Site == 1) as SkowCount
1749477025039:count(Site == 2) as FarmCount
1749477025039:count(Site == 3) as AubCount
1749477025039:count(Site == 4) as BgrCount
1749477025039:count(Site == 5) as WtrCount
1749477025039:from orders
1749477025039:"
1749477025041:sqldf(mostSales)
1749477607737:mostSales =
1749477607738:"
1749477607738:SELECT
1749477607738:l.Location,
1749477607738:COUNT(o.ID) AS TotalOrders
1749477607738:FROM
1749477607738:orders o
1749477607738:JOIN
1749477607738:locations l ON o.Site = l.ID
1749477607739:GROUP BY
1749477607739:l.Location
1749477607739:ORDER BY
1749477607739:TotalOrders DESC;
1749477607739:"
1749477607739:sqldf(mostSales)
1749477673677:names(locations)
1749477704999:mostSales =
1749477704999:"
1749477704999:SELECT
1749477704999:l.City,
1749477704999:COUNT(o.ID) AS TotalOrders
1749477704999:FROM
1749477704999:orders o
1749477704999:JOIN
1749477705000:locations l ON o.Site = l.ID
1749477705000:GROUP BY
1749477705000:l.City
1749477705000:ORDER BY
1749477705000:TotalOrders DESC;
1749477705000:"
1749477705001:sqldf(mostSales)
1749477802347:mostSales =
1749477802347:"
1749477802347:SELECT
1749477802347:locations.City,
1749477802347:COUNT(orders.ID) AS TotalOrders
1749477802347:FROM
1749477802348:orders orders
1749477802348:JOIN
1749477802348:locations locations ON order.Site = location.ID
1749477802348:GROUP BY
1749477802349:location.City
1749477802349:ORDER BY
1749477802349:TotalOrders DESC;
1749477802349:"
1749477802349:sqldf(mostSales)
1749477812298:mostSales =
1749477812298:"
1749477812298:SELECT
1749477812298:locations.City,
1749477812299:COUNT(orders.ID) AS TotalOrders
1749477812299:FROM
1749477812299:orders orders
1749477812299:JOIN
1749477812299:locations locations ON orders.Site = location.ID
1749477812299:GROUP BY
1749477812299:location.City
1749477812300:ORDER BY
1749477812300:TotalOrders DESC;
1749477812300:"
1749477812300:sqldf(mostSales)
1749477826430:mostSales =
1749477826430:"
1749477826431:SELECT
1749477826431:locations.City,
1749477826431:COUNT(orders.ID) AS TotalOrders
1749477826431:FROM
1749477826432:orders orders
1749477826432:JOIN
1749477826432:locations locations ON orders.Site = locations.ID
1749477826432:GROUP BY
1749477826432:locations.City
1749477826432:ORDER BY
1749477826432:TotalOrders DESC;
1749477826432:"
1749477826433:sqldf(mostSales)
1749478100375:names(orders)
1749478117978:names(customers)
1749478238468:mostSales =
1749478238468:"
1749478238468:Select
1749478238468:locations.City,
1749478238468:Count(orders.ID) as TotalOrders
1749478238468:From
1749478238469:orders
1749478238469:Join
1749478238469:locations locations On orders.Site = locations.ID
1749478238469:Group By
1749478238469:locations.City
1749478238469:Order By
1749478238469:TotalOrders Desc
1749478238469:"
1749478238469:sqldf(mostSales)
1749478271380:mostSales =
1749478271380:"
1749478271380:Select
1749478271380:locations.City,
1749478271380:Count(orders.ID) as TotalOrders
1749478271380:From
1749478271381:orders
1749478271381:Join
1749478271381:locations On orders.Site = locations.ID
1749478271381:Group By
1749478271381:locations.City
1749478271382:Order By
1749478271382:TotalOrders Desc
1749478271382:"
1749478271382:sqldf(mostSales)
1749478349717:names(orders)
1749478399944:timesVisited =
1749478399944:"
1749478399944:Select
1749478399944:orders.Customer
1749478399944:customers.Fname, customers.Lname
1749478399944:Count(orders.ID) as visits
1749478399944:From
1749478399945:orders
1749478399945:Join
1749478399945:customers On orders.Customer = customers.ID
1749478399945:Order By
1749478399945:visits Desc
1749478399945:"
1749478399946:sqldf(timesVisited)
1749478436915:timesVisited =
1749478436915:"
1749478436915:Select
1749478436915:orders.Customer
1749478436915:customers.Fname, customers.Lname
1749478436915:Count(orders.ID) as visits
1749478436916:From
1749478436916:orders
1749478436916:customers
1749478436916:Join
1749478436916:customers On orders.Customer = customers.ID
1749478436916:Order By
1749478436916:visits Desc
1749478436917:"
1749478436917:sqldf(timesVisited)
1749478504995:names(orders)
1749478570145:timesVisited =
1749478570145:"
1749478570145:SELECT
1749478570145:o.Customer,
1749478570146:c.Fname,
1749478570146:c.Lname,
1749478570146:COUNT(o.ID) AS visits
1749478570146:FROM
1749478570146:orders o
1749478570146:JOIN
1749478570146:customers c ON o.Customer = c.ID
1749478570146:GROUP BY
1749478570146:o.Customer, c.Fname, c.Lname
1749478570146:ORDER BY
1749478570147:visits DESC
1749478570147:"
1749478570147:"
1749478570147:result = sqldf(timesVisited)
1749478580986:timesVisited =
1749478580986:"
1749478580986:SELECT
1749478584815:timesVisited =
1749478584815:"
1749478584815:SELECT
1749478584815:o.Customer,
1749478584815:c.Fname,
1749478584815:c.Lname,
1749478584815:COUNT(o.ID) AS visits
1749478584816:FROM
1749478584816:orders o
1749478584816:JOIN
1749478584816:customers c ON o.Customer = c.ID
1749478584816:GROUP BY
1749478584816:o.Customer, c.Fname, c.Lname
1749478584816:ORDER BY
1749478584816:visits DESC
1749478584816:"
1749478584817:result = sqldf(timesVisited)
1749478591253:result
1749479161106:mostSales =
1749479161106:"
1749479161106:SELECT
1749479161106:l.City,
1749479161106:Count(o.ID) as TotalOrders
1749479161107:From
1749479161107:orders o
1749479161107:Join
1749479161107:l On o.Site = l.ID
1749479161107:Group By
1749479161107:l.City
1749479161108:Order By
1749479161108:TotalOrders Desc
1749479161108:"
1749479161108:sqldf(mostSales)
1749479181854:mostSales =
1749479181854:"
1749479181854:SELECT
1749479181854:l.City,
1749479181855:Count(o.ID) as TotalOrders
1749479181855:From
1749479181855:orders o
1749479181855:Join
1749479181855:l.locations On o.Site = l.ID
1749479181855:Group By
1749479181855:l.City
1749479181855:Order By
1749479181855:TotalOrders Desc
1749479181856:"
1749479181856:sqldf(mostSales)
1749479198319:mostSales =
1749479198319:"
1749479198319:SELECT
1749479198319:l.City,
1749479198319:Count(o.ID) as TotalOrders
1749479198320:From
1749479198320:orders o
1749479198320:Join
1749479198320:locations l On o.Site = l.ID
1749479198320:Group By
1749479198320:l.City
1749479198320:Order By
1749479198321:TotalOrders Desc
1749479198321:"
1749479198321:sqldf(mostSales)
1749479220837:fiveHunFirstScoop =
1749479220837:"
1749479220837:SELECT
1749479220837:count(Scoop1)
1749479220837:FROM
1749479220837:orders o
1749479220837:"
1749479220837:sqldf(fiveHunFirstScoop)
1749479240588:names(flavors)
1749479248805:names(toppings)
1749479340184:flavors[2]
1749479351937:flavors[2,]
1749479373584:toppings[2,]
1749479439574:nutty =
1749479439574:"
1749479439574:SELECT
1749479439574:f.Flavor,
1749479439574:t.Name
1749479439574:FROM
1749479439574:flavors f,
1749479439574:toppings t
1749479439574:WHERE
1749479439574:f.Nuts == Y or t.Nuts == Y
1749479439575:"
1749479439575:sqldf(nutty)
1749479470220:nutty =
1749479470220:"
1749479470220:SELECT
1749479470220:f.Flavor,
1749479470220:t.Name
1749479470221:FROM
1749479470221:flavors f,
1749479470221:toppings t
1749479470221:WHERE
1749479470221:f.Nuts == 'Y' or t.Nuts == 'Y'
1749479470221:"
1749479470221:sqldf(nutty)
1749479519869:flavors("Vanilla with Raspberry Ripple")
1749479528451:flavors
1749479625661:## 4.) which ice creams &/ toppings contain nuts
1749479625661:nutty =
1749479625661:"
1749479625662:SELECT
1749479625662:f.Flavor,
1749479625662:t.Name
1749479625662:FROM
1749479625662:flavors f
1749479625662:LEFT JOIN
1749479625662:toppings t ON f.ID IS NOT NULL OR t.ID IS NOT NULL
1749479625662:WHERE
1749479625662:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479625662:"
1749479625663:"
1749479625663:result = sqldf(nutty)
1749479640208:nutty =
1749479640208:"
1749479640208:SELECT
1749479643198:nutty =
1749479643198:"
1749479643198:SELECT
1749479643198:f.Flavor,
1749479643198:t.Name
1749479643199:FROM
1749479643199:flavors f
1749479643199:LEFT JOIN
1749479643199:toppings t ON f.ID IS NOT NULL OR t.ID IS NOT NULL
1749479643199:WHERE
1749479643199:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479643199:"
1749479643200:sqldf(nutty)
1749479688446:nutty =
1749479688446:"
1749479688446:SELECT
1749479688446:f.Flavor,
1749479688446:t.Name
1749479688446:FROM
1749479688446:flavors f
1749479688446:WHERE
1749479688446:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479688447:"
1749479688447:sqldf(nutty)
1749479700713:names(toppings)
1749479714721:nutty =
1749479714722:"
1749479714722:SELECT
1749479714722:f.Flavor,
1749479714722:t.Name
1749479714722:FROM
1749479714722:flavors f,
1749479714722:toppings t
1749479714723:WHERE
1749479714723:f.Nuts = 'Y' OR t.Nuts = 'Y'
1749479714723:"
1749479714723:sqldf(nutty)
1749479748506:nutty =
1749479748506:"
1749479748507:SELECT
1749479748507:f.Flavor,
1749479748507:t.Name
1749479748507:FROM
1749479748507:flavors f,
1749479748507:toppings t
1749479748507:WHERE
1749479748507:f.Nuts = 'Y' AND t.Nuts = 'Y'
1749479748507:"
1749479748508:sqldf(nutty)
1749479912842:nutty =
1749479912842:"
1749479912842:SELECT ID, Flavor AS Name, 'Flavor' AS Type
1749479912843:FROM flavors
1749479912843:WHERE Nuts = 'Y'
1749479912843:UNION
1749479912843:SELECT ID, Name, 'Topping' AS Type
1749479912843:FROM toppings
1749479912843:WHERE Nuts = 'Y';
1749479912843:"
1749479912844:sqldf(nutty)
1749479926184:nutty =
1749479926185:"
1749479926185:SELECT Flavor AS Name, 'Flavor' AS Type
1749479926185:FROM flavors
1749479926185:WHERE Nuts = 'Y'
1749479926185:UNION
1749479926185:SELECT ID, Name, 'Topping' AS Type
1749479926185:FROM toppings
1749479926185:WHERE Nuts = 'Y';
1749479926186:"
1749479926186:sqldf(nutty)
1749479937820:nutty =
1749479937820:"
1749479937820:SELECT ID Flavor AS Name, 'Flavor' AS Type
1749479937820:FROM flavors
1749479937820:WHERE Nuts = 'Y'
1749479937820:UNION
1749479937820:SELECT ID, Name, 'Topping' AS Type
1749479937821:FROM toppings
1749479937821:WHERE Nuts = 'Y';
1749479937821:"
1749479937822:sqldf(nutty)
1749479982361:nutty =
1749479982361:"
1749479982361:SELECT ID, Flavor AS Name, 'Flavor' AS Type
1749479982361:FROM flavors
1749479982361:WHERE Nuts = 'Y'
1749479982361:UNION
1749479982362:SELECT ID, Name, 'Topping' AS Type
1749479982362:FROM toppings
1749479982362:WHERE Nuts = 'Y';
1749479982362:"
1749479982362:sqldf(nutty)
1749479990892:nutty =
1749479990892:"
1749479990892:SELECT Flavor AS Name, 'Flavor' AS Type
1749479990892:FROM flavors
1749479990893:WHERE Nuts = 'Y'
1749479990893:UNION
1749479990893:SELECT ID, Name, 'Topping' AS Type
1749479990893:FROM toppings
1749479990893:WHERE Nuts = 'Y';
1749479990893:"
1749479990894:sqldf(nutty)
1749480000757:nutty =
1749480000758:"
1749480000758:SELECT ID, Flavor AS Name, 'Flavor' AS Type
1749480000758:FROM flavors
1749480000758:WHERE Nuts = 'Y'
1749480000758:UNION
1749480000758:SELECT ID, Name, 'Topping' AS Type
1749480000758:FROM toppings
1749480000758:WHERE Nuts = 'Y';
1749480000758:"
1749480000759:sqldf(nutty)
1749480125361:names(flavors)
1749480153498:nutty =
1749480153499:"
1749480153499:SELECT
1749480153499:f.Flavor AS Name,
1749480153499:'Flavor' AS Type
1749480153499:FROM
1749480153499:flavors f
1749480153499:WHERE
1749480153499:Nuts = 'Y'
1749480153500:UNION
1749480153500:SELECT
1749480153500:ID,
1749480153500:Name,
1749480153500:'Topping' AS Type
1749480153500:FROM
1749480153500:toppings
1749480153500:WHERE Nuts = 'Y';
1749480153501:"
1749480153501:sqldf(nutty)
1749480163039:## 4.) which ice creams &/ toppings contain nuts
1749480163039:nutty =
1749480163039:"
1749480163039:SELECT
1749480163039:f.Flavor AS Name,
1749480163039:'Flavor' AS Type
1749480163039:FROM
1749480163039:flavors f
1749480163040:WHERE
1749480163040:Nuts = 'Y'
1749480163040:UNION
1749480163040:SELECT
1749480163040:Name,
1749480163040:'Topping' AS Type
1749480163040:FROM
1749480163041:toppings
1749480163041:WHERE Nuts = 'Y';
1749480163041:"
1749480188039:nutty =
1749480188039:"
1749480188039:SELECT
1749480188039:f.Flavor AS Name,
1749480188039:'Flavor' AS Type
1749480188039:FROM
1749480188039:flavors f
1749480188039:WHERE
1749480188040:Nuts = 'Y'
1749480188040:UNION
1749480188040:SELECT
1749480188040:t.Name,
1749480188040:'Topping' AS Type
1749480188041:FROM
1749480188041:toppings t
1749480188041:WHERE Nuts = 'Y';
1749480188041:"
1749480188042:sqldf(nutty)
1749480211601:nutty =
1749480211602:"
1749480211602:SELECT
1749480211602:f.Flavor AS Name,
1749480211602:'Flavor' AS Type
1749480211602:FROM
1749480211602:flavors f
1749480211603:WHERE
1749480211603:Nuts = 'Y'
1749480211603:UNION
1749480211603:SELECT
1749480211603:t.Name,
1749480211603:'Topping' AS Type
1749480211603:FROM
1749480211603:toppings t
1749480211604:WHERE Nuts = 'Y'
1749480211604:ORDER BY Type
1749480211604:"
1749480211604:sqldf(nutty)
1749480363931:names(orders)
1749480430732:orders[2,]
1749480444939:orders[3:6,]
1749480461324:orders[1:10,]
1749480508742:sunnyDays =
1749480508742:"
1749480508742:SELECT
1749480508742:o.Scoop1,
1749480508742:o.Scoop2,
1749480508743:o.Scoop3,
1749480508743:o.Topping1,
1749480508743:o.Topping2,
1749480508743:o.Topping3
1749480508743:FROM
1749480508743:orders o
1749480508744:WHERE
1749480508744:Topping1 != NA
1749480508744:"
1749480508744:sqldf(sunnyDays)
1749480531749:orders[10:30,]
1749480552102:orders[Topping1]
1749480563197:orders['Topping1']
1749480589949:sunnyDays =
1749480589949:"
1749480589949:SELECT
1749480589949:o.Scoop1,
1749480589949:o.Scoop2,
1749480589949:o.Scoop3,
1749480589949:o.Topping1,
1749480589949:o.Topping2,
1749480589949:o.Topping3
1749480589950:FROM
1749480589950:orders o
1749480589950:WHERE
1749480589950:Topping1 != null
1749480589950:"
1749480589951:sqldf(sunnyDays)
1749480599297:sunnyDays =
1749480599297:"
1749480599297:SELECT
1749480599297:o.Scoop1,
1749480599297:o.Scoop2,
1749480599297:o.Scoop3,
1749480599297:o.Topping1,
1749480599297:o.Topping2,
1749480599298:o.Topping3
1749480599298:FROM
1749480599298:orders o
1749480599298:WHERE
1749480599298:Topping1 != 'NA'
1749480599298:"
1749480599298:sqldf(sunnyDays)
1749480952426:sunnyDays =
1749480952426:"
1749480952426:SELECT
1749480952426:f1.Flavor AS Scoop1_Flavor,
1749480952426:f2.Flavor AS Scoop2_Flavor,
1749480952426:f3.Flavor AS Scoop3_Flavor,
1749480952426:t1.Name AS Topping1_Name,
1749480952427:t2.Name AS Topping2_Name,
1749480952427:t3.Name AS Topping3_Name
1749480952427:FROM
1749480952427:orders o
1749480952427:LEFT JOIN
1749480952428:flavors f1 ON o.Scoop1 = f1.ID
1749480952428:LEFT JOIN
1749480952428:flavors f2 ON o.Scoop2 = f2.ID
1749480952428:LEFT JOIN
1749480952428:flavors f3 ON o.Scoop3 = f3.ID
1749480952428:LEFT JOIN
1749480952428:toppings t1 ON o.Topping1 = t1.ID
1749480952428:LEFT JOIN
1749480952428:toppings t2 ON o.Topping2 = t2.ID
1749480952428:LEFT JOIN
1749480952429:toppings t3 ON o.Topping3 = t3.ID
1749480952429:WHERE
1749480952429:o.Topping1 != 'NA'
1749480952429:"
1749480952429:sqldf(sunnyDays)
1749481139416:names(customers)
1749481195399:southies =
1749481195400:"
1749481195400:SELECT
1749481195400:c.Fname,
1749481195400:c.Lname
1749481195400:FROM
1749481195400:customers c
1749481195400:WHERE
1749481195401:State != (ME or NH)
1749481195401:"
1749481195401:sqldf(southies)
1749481208378:southies =
1749481208378:"
1749481208378:SELECT
1749481208378:c.Fname,
1749481208378:c.Lname
1749481208378:FROM
1749481208379:customers c
1749481208379:WHERE
1749481208379:State != ('ME' or 'NH')
1749481208379:"
1749481208379:sqldf(southies)
1749481223390:southies =
1749481223390:"
1749481223390:SELECT
1749481223390:c.Fname,
1749481223390:c.Lname,
1749481223390:c.State
1749481223391:FROM
1749481223391:customers c
1749481223391:WHERE
1749481223391:State != ('ME' or 'NH')
1749481223391:"
1749481234091:southies =
1749481234091:"
1749481234091:SELECT
1749481234091:c.Fname,
1749481234091:c.Lname,
1749481234091:c.State
1749481234091:FROM
1749481234091:customers c
1749481234092:WHERE
1749481234092:State != ('ME' or 'NH')
1749481234092:"
1749481234092:sqldf(southies)
1749481262776:southies =
1749481262776:"
1749481262776:SELECT
1749481262776:c.Fname,
1749481262776:c.Lname,
1749481262776:c.State
1749481262776:FROM
1749481262776:customers c
1749481262777:WHERE
1749481262777:State != 'ME' and State != 'NH'
1749481262777:"
1749481262777:sqldf(southies)
1749481369046:names(flavors)
1749481378108:names(toppings)
1749481393789:flavors("Type")
1749481399680:flavors(Type)
1749481409772:flavors[type]
1749481415079:flavors["Type"]
1749481430041:flavors
1749481537098:desserts =
1749481537098:"
1749481537098:SELECT
1749481537099:COUNT(DISTINCT Type)
1749481537099:FROM
1749481537099:flavors
1749481537099:"
1749481537099:sqldf(desserts)
1749481691631:desserts =
1749481691631:"
1749481691631:SELECT
1749481691631:Type,
1749481691631:COUNT(*) AS NumberOfFlavors
1749481691631:FROM
1749481691631:flavors
1749481691631:GROUP BY
1749481691631:Type;
1749481691632:"
1749481691632:sqldf(desserts)
1749481722473:desserts =
1749481722473:"
1749481722473:SELECT
1749481722473:Type,
1749481722474:COUNT(*) AS NumberOfFlavors
1749481722474:FROM
1749481722474:flavors
1749481722475:"
1749481722475:sqldf(desserts)
1749481741120:desserts =
1749481741120:"
1749481741120:SELECT
1749481741120:Type,
1749481741120:COUNT(*) AS NumberOfFlavors
1749481741120:FROM
1749481741120:flavors
1749481741121:GROUP BY
1749481741121:Type
1749481741121:"
1749481741121:sqldf(desserts)
1749482016795:names(flavors)
1749482117699:for (first in flavors["Flavor"])
1749482117699:{
1749482117699:for (second in flavors["Flavor"])
1749482117699:{
1749482117699:for (third in flavors["Flavor"])
1749482117700:{
1749482117700:if(first != second && first != third && second != third)
1749482117700:{print(first, second, third)}
1749482117700:}
1749482117700:}
1749482117700:}
1749482178341:for (first in flavors['Flavor']){print(first)}
1749482212770:for (first in flavors["Flavor"])
1749482212770:{
1749482212770:for (second in flavors["Flavor"])
1749482212770:{
1749482212771:for (third in flavors["Flavor"])
1749482212771:{
1749482212771:if(first != second && first != third && second != third)
1749482212771:{print(first + " " + second + " " + third)}
1749482212771:}
1749482212771:}
1749482212771:}
1749482237487:for (first in flavors["Flavor"])
1749482237487:{
1749482237487:for (second in flavors["Flavor"])
1749482237487:{
1749482237487:for (third in flavors["Flavor"])
1749482237488:{
1749482237488:{print(first + " " + second + " " + third)}
1749482237488:}
1749482237488:}
1749482237488:}
1749482253153:for (first in flavors["Flavor"])
1749482253154:{
1749482253154:for (second in flavors["Flavor"])
1749482253154:{
1749482253154:for (third in flavors["Flavor"])
1749482253154:{
1749482253154:{print(first , " " , second , " " , third)}
1749482253154:}
1749482253154:}
1749482253154:}
1749482272734:{print(first & " " & second & " " & third)}
1749482382818:for (first in flavors["Flavor"])
1749482382819:{
1749482382819:for (second in flavors["Flavor"])
1749482382819:{
1749482382819:for (third in flavors["Flavor"])
1749482382819:{
1749482382819:{cat(first, second, third)}
1749482382820:}
1749482382820:}
1749482382820:}
1749482440667:for (first in flavors["Flavor"])
1749482440667:{
1749482440667:for (second in flavors["Flavor"])
1749482440668:{
1749482440668:for (third in flavors["Flavor"])
1749482440668:{
1749482440668:if(first <> second <> third)
1749482511065:if(first == second == third)
1749482526674:for (first in flavors["Flavor"])
1749482526674:{
1749482526674:for (second in flavors["Flavor"])
1749482526674:{
1749482526674:for (third in flavors["Flavor"])
1749482526674:{
1749482526675:if(first == second and first == third)
1749482535091:for (first in flavors["Flavor"])
1749482535091:{
1749482535091:for (second in flavors["Flavor"])
1749482535091:{
1749482535091:for (third in flavors["Flavor"])
1749482535091:{
1749482535091:if(first == second && first == third)
1749482535091:{cat(first, second, third)}
1749482535092:}
1749482535092:}
1749482535092:}
1749482636371:for (first in flavors["Flavor"])
1749482636372:{
1749482636372:for (second in flavors["Flavor"])
1749482636372:{
1749482636372:for (third in flavors["Flavor"])
1749482636372:{
1749482636372:if(!identica(first,second) && !identical(second,third) && !identical(first,third))
1749482636373:{
1749482636373:cat(first, second, third, "\n")
1749482636373:}
1749482636373:}
1749482636373:}
1749482636374:}
1749482647929:for (first in flavors["Flavor"])
1749482647929:{
1749482647930:for (second in flavors["Flavor"])
1749482647930:{
1749482647930:for (third in flavors["Flavor"])
1749482647930:{
1749482647930:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482647930:{
1749482647930:cat(first, second, third, "\n")
1749482647931:}
1749482647931:}
1749482647931:}
1749482647931:}
1749482727259:flvrs = flavors$Flavor
1749482727259:for (first in flvrs)
1749482727259:{
1749482727259:for (second in flvrs)
1749482727259:{
1749482727259:for (third in flvrs)
1749482727260:{
1749482727260:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482727260:{
1749482727260:cat(first, second, third, "\n")
1749482727260:}
1749482727261:}
1749482727261:}
1749482727261:}
1749482912636:icecreams =
1749482912636:"
1749482912636:SELECT
1749482912636:f.Flavor
1749482912637:FROM
1749482912637:flavors f
1749482912637:WHERE
1749482912637:Type = 'I'
1749482912637:"
1749482912637:flvrs = sqldf(icecreams)
1749482912662:flvrs
1749482939991:icecreams =
1749482939992:"
1749482939992:SELECT
1749482939992:f.Flavor
1749482939992:FROM
1749482939992:flavors f
1749482939992:WHERE
1749482939992:Type = 'I'
1749482939992:"
1749482939993:flvrs = sqldf(icecreams)
1749482940009:for (first in flvrs)
1749482940009:{
1749482940009:for (second in flvrs)
1749482940009:{
1749482940009:for (third in flvrs)
1749482940009:{
1749482940010:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482940010:{
1749482940010:cat(first, second, third, "\n")
1749482940010:}
1749482940010:}
1749482940010:}
1749482940010:}
1749482956161:icecreams =
1749482956161:"
1749482956161:SELECT
1749482956162:f.Flavor
1749482956162:FROM
1749482956162:flavors f
1749482956162:WHERE
1749482956162:Type = 'I'
1749482956162:"
1749482956163:flvrs = sqldf(icecreams)
1749482956179:flvrs
1749482997779:icecreams =
1749482997779:"
1749482997779:SELECT
1749482997779:f.Flavor
1749482997779:FROM
1749482997779:flavors f
1749482997779:WHERE
1749482997779:Type = 'I'
1749482997780:"
1749482997780:rtn = sqldf(icecreams)
1749482997798:flvrs = rtn$Flavor
1749482997798:for (first in flvrs)
1749482997798:{
1749482997798:for (second in flvrs)
1749482997798:{
1749482997798:for (third in flvrs)
1749482997798:{
1749482997798:if(!identical(first,second) && !identical(second,third) && !identical(first,third))
1749482997799:{
1749482997799:cat(first, second, third, "\n")
1749482997799:}
1749482997799:}
1749482997799:}
1749482997799:}
1749483408540:popFlavor =
1749483408540:"
1749483408540:SELECT Flavor, COUNT(*) AS Count
1749483408541:FROM (
1749483408541:SELECT Scoop1 AS Flavor FROM orders
1749483408541:UNION ALL
1749483408541:SELECT Scoop2 FROM orders
1749483408541:UNION ALL
1749483408541:SELECT Scoop3 FROM orders
1749483408541:) AS AllFlavors
1749483408541:GROUP BY Flavor
1749483408541:ORDER BY Count DESC
1749483408541:LIMIT 1;
1749483408541:union
1749483408542:SELECT Name AS Topping, COUNT(*) AS Count
1749483408542:FROM (
1749483408542:SELECT Topping1 AS Name FROM orders
1749483408542:UNION ALL
1749483408542:SELECT Topping2 FROM orders
1749483408542:UNION ALL
1749483408542:SELECT Topping3 FROM orders
1749483408542:) AS AllToppings
1749483408542:GROUP BY Name
1749483408543:ORDER BY Count DESC
1749483408543:LIMIT 1;
1749483408543:"
1749483408544:sqldf(popFlavor)
1749483448739:## 9.) find most common flavor
1749483448739:popFlavor =
1749483448739:"
1749483448739:SELECT Flavor, COUNT(*) AS Count
1749483448739:FROM (
1749483448739:SELECT Scoop1 AS Flavor FROM orders
1749483448739:UNION ALL
1749483448739:SELECT Scoop2 FROM orders
1749483448740:UNION ALL
1749483448740:SELECT Scoop3 FROM orders
1749483448740:) AS AllFlavors
1749483448740:GROUP BY Flavor
1749483448740:ORDER BY Count DESC
1749483448740:LIMIT 1;
1749483448740:"
1749483448741:topPing = "
1749483448741:SELECT Name AS Topping, COUNT(*) AS Count
1749483448741:FROM (
1749483448741:SELECT Topping1 AS Name FROM orders
1749483448741:UNION ALL
1749483448741:SELECT Topping2 FROM orders
1749483448741:UNION ALL
1749483448741:SELECT Topping3 FROM orders
1749483448742:) AS AllToppings
1749483448742:GROUP BY Name
1749483448742:ORDER BY Count DESC
1749483448742:LIMIT 1;
1749483448742:"
1749483448742:sqldf(popFlavor)
1749483539384:popFlavor =
1749483539384:"
1749483539384:SELECT Flavor, COUNT(*) AS Count
1749483539384:FROM (
1749483539385:SELECT Scoop1 AS Flavor FROM orders
1749483539385:UNION ALL
1749483539385:SELECT Scoop2 FROM orders
1749483539385:UNION ALL
1749483539385:SELECT Scoop3 FROM orders
1749483539385:) AS AllFlavors
1749483539385:GROUP BY Flavor
1749483539385:ORDER BY Count DESC
1749483539385:LIMIT 1;
1749483539385:"
1749483539386:sqldf(pop)
1749483559046:## 9.) find most common flavor
1749483559046:popFlavor =
1749483559046:"
1749483559046:SELECT Flavor, COUNT(*) AS Count
1749483559046:FROM (
1749483559046:SELECT Scoop1 AS Flavor FROM orders
1749483559047:UNION ALL
1749483559047:SELECT Scoop2 FROM orders
1749483559047:UNION ALL
1749483559047:SELECT Scoop3 FROM orders
1749483559047:) AS AllFlavors
1749483559047:GROUP BY Flavor
1749483559047:ORDER BY Count DESC
1749483559047:LIMIT 1;
1749483559047:"
1749483559048:sqldf(popFlavor)
1749483653862:## 9.) find most common flavor
1749483653862:popFlavor =
1749483653862:"
1749483653863:SELECT Flavor, COUNT(*) AS Count
1749483653863:FROM (
1749483653863:SELECT Scoop1 AS Flavor FROM orders WHERE Scoop1 IS NOT NULL
1749483653863:UNION ALL
1749483653863:SELECT Scoop2 FROM orders WHERE Scoop2 IS NOT NULL
1749483653863:UNION ALL
1749483653863:SELECT Scoop3 FROM orders WHERE Scoop3 IS NOT NULL
1749483653865:) AS AllFlavors
1749483653865:GROUP BY Flavor
1749483653865:ORDER BY Count DESC
1749483653865:LIMIT 1;
1749483653865:"
1749483653865:sqldf(popFlavor)
1749483770022:popFlavor =
1749483770023:"
1749483770023:SELECT Flavor, COUNT(*) AS Count
1749483770023:FROM (
1749483770023:SELECT Scoop1 AS Flavor
1749483770023:FROM orders
1749483770023:SELECT Scoop2
1749483770023:FROM orders
1749483770023:WHERE Scoop2 IS NOT NULL
1749483770023:UNION ALL
1749483770024:SELECT Scoop3
1749483770024:FROM orders
1749483770024:WHERE Scoop3 IS NOT NULL
1749483770024:)
1749483770024:AS AllFlavors
1749483770024:GROUP BY Flavor
1749483770024:ORDER BY Count DESC
1749483770025:LIMIT 10;
1749483770025:"
1749483770025:sqldf(popFlavor)
1749483811086:## 9.) find most common flavor
1749483811086:popFlavor =
1749483811086:"SELECT Flavor, COUNT(*) AS Count
1749483811086:FROM (
1749483811086:SELECT Scoop1 AS Flavor FROM orders WHERE Scoop1 IS NOT NULL
1749483811086:UNION ALL
1749483811087:SELECT Scoop2 FROM orders WHERE Scoop2 IS NOT NULL
1749483811087:UNION ALL
1749483811087:SELECT Scoop3 FROM orders WHERE Scoop3 IS NOT NULL
1749483811087:) AS AllFlavors
1749483811087:GROUP BY Flavor
1749483811087:ORDER BY Count DESC
1749483811087:LIMIT 10;
1749483811087:"
1749483811088:sqldf(popFlavor)
1749483838214:popFlavor =
1749483838214:"
1749483838214:SELECT Flavor, COUNT(*) AS Count
1749483838215:FROM (
1749483838215:SELECT Scoop1 AS Flavor FROM orders WHERE Scoop1 IS NOT NULL
1749483838215:UNION ALL
1749483838215:SELECT Scoop2 FROM orders WHERE Scoop2 IS NOT NULL
1749483838215:UNION ALL
1749483838215:SELECT Scoop3 FROM orders WHERE Scoop3 IS NOT NULL
1749483838215:)
1749483838215:AS AllFlavors
1749483838215:GROUP BY Flavor
1749483838215:ORDER BY Count DESC
1749483838215:LIMIT 10;
1749483838216:"
1749483838216:sqldf(popFlavor)
1749484324366:trial = "SELECT f.Flavor, COUNT(*) AS Count
1749484324366:FROM orders o
1749484324366:JOIN flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484324366:GROUP BY f.Flavor
1749484324366:ORDER BY Count DESC
1749484324367:LIMIT 1;"
1749484324367:sqldf(trial)
1749484529352:trial = "SELECT f.Flavor, COUNT(*) AS Count
1749484529352:FROM orders o
1749484529352:JOIN flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484529352:GROUP BY f.Flavor
1749484529352:ORDER BY Count DESC
1749484529352:LIMIT 1"
1749484529353:sqldf(trial)
1749484831736:topFlavors =
1749484831736:"
1749484831736:SELECT
1749484831736:f.Flavor,
1749484831736:COUNT(*) AS Count
1749484831736:FROM
1749484831736:orders o
1749484831736:JOIN
1749484831736:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484831737:GROUP BY
1749484831737:f.Flavor
1749484831737:ORDER BY
1749484831737:Count DESC
1749484831737:LIMIT 10
1749484831737:"
1749484831738:sqldf(topFlavors)
1749484831773:topPings =
1749484831773:"
1749484831773:SELECT
1749484831773:t.name,
1749484831773:COUNT(*) as Count
1749484831773:FROM
1749484831773:orders o
1749484831773:JOIN
1749484831773:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749484831773:GROUP BY
1749484831773:Count DESC
1749484831773:LIMIT 10
1749484831773:"
1749484831774:sqldf(topPings)
1749484846289:topFlavors =
1749484846289:"
1749484846289:SELECT
1749484846289:f.Flavor,
1749484846289:COUNT(*) AS Count
1749484846289:FROM
1749484846289:orders o
1749484846290:JOIN
1749484846290:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484846290:GROUP BY
1749484846291:f.Flavor
1749484846292:ORDER BY
1749484846293:Count DESC
1749484846293:LIMIT 10
1749484846293:"
1749484846293:sqldf(topFlavors)
1749484851919:topPings =
1749484851920:"
1749484851920:SELECT
1749484851920:t.name,
1749484851920:COUNT(*) as Count
1749484851920:FROM
1749484851920:orders o
1749484851920:JOIN
1749484851921:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749484851921:GROUP BY
1749484851921:Count DESC
1749484851921:LIMIT 10
1749484851921:"
1749484851921:sqldf(topPings)
1749484883031:## 9.) find most common flavor
1749484883031:topFlavors =
1749484883031:"
1749484883032:SELECT
1749484883032:f.Flavor,
1749484883032:COUNT(*) AS Count
1749484883032:FROM
1749484883032:orders o
1749484883032:JOIN
1749484883032:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749484883032:GROUP BY
1749484883033:f.Flavor
1749484883033:ORDER BY
1749484883033:Count DESC
1749484883033:LIMIT 10
1749484883033:"
1749484883033:sqldf(topFlavors)
1749484883070:topPings =
1749484883070:"
1749484883070:SELECT
1749484883071:t.name,
1749484883071:COUNT(*) as Count
1749484883071:FROM
1749484883071:orders o
1749484883071:JOIN
1749484883071:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749484883071:ORDER BY
1749484883071:Count DESC
1749484883072:LIMIT 10
1749484883072:"
1749484883072:sqldf(topPings)
1749484962474:sqldf(SELECT t.Name AS Topping, COUNT(*) AS Count
1749484982263:sqldfSELECT t.Name AS Topping, COUNT(*) AS Count
1749485026075:shit = "SELECT t.Name AS Topping, COUNT(*) AS Count
1749485026075:FROM orders o
1749485026075:JOIN toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749485026075:GROUP BY t.Name
1749485026075:ORDER BY Count DESC
1749485026075:LIMIT 1;"
1749485026076:sqldf(shit)
1749485048071:shit = "SELECT t.Name AS Topping, COUNT(*) AS Count
1749485048071:FROM orders o
1749485048071:JOIN toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749485048071:GROUP BY t.Name
1749485048071:ORDER BY Count DESC
1749485048071:LIMIT 10;"
1749485048071:sqldf(shit)
1749485155825:## 9.) find most common flavor
1749485155826:topFlavors =
1749485155826:"
1749485155826:SELECT
1749485155826:f.Flavor,
1749485155827:COUNT(*) AS Count
1749485155827:FROM
1749485155827:orders o
1749485155827:JOIN
1749485155828:flavors f ON o.Scoop1 = f.ID OR o.Scoop2 = f.ID OR o.Scoop3 = f.ID
1749485155828:GROUP BY
1749485155828:f.Flavor
1749485155828:ORDER BY
1749485155828:Count DESC
1749485155828:LIMIT 10
1749485155828:"
1749485155828:sqldf(topFlavors)
1749485155876:topPings =
1749485155876:"
1749485155877:SELECT
1749485155877:t.Name AS Topping,
1749485155877:COUNT(*) AS Count
1749485155877:FROM
1749485155877:orders o
1749485155877:JOIN
1749485155877:toppings t ON o.Topping1 = t.ID OR o.Topping2 = t.ID OR o.Topping3 = t.ID
1749485155877:GROUP BY
1749485155877:t.Name
1749485155877:ORDER BY
1749485155877:Count DESC
1749485155878:LIMIT 10
1749485155878:"
1749485155878:sqldf(topPings)
1749485285693:towns = "SELECT DISTINCT c.City
1749485285694:FROM customers c
1749485285694:WHERE c.City NOT IN (SELECT l.City FROM locations l);"
1749485285694:sqldf(towns)
1750526976990:3+4
1750527542029:data=read.csv(file.choose(),header=TRUE)
1750527549705:data=read.csv(file.choose(),header=TRUE)
1750527727824:names(data)
1750527764340:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750527764340:##  a.	Type
1750527764340:##  b.	Type+Color
1750527764341:data.color
1750527778567:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750527778567:##  a.	Type
1750527778568:##  b.	Type+Color
1750527778568:data[color].unique
1750527892974:colors <- unique(data$color)
1750527892975:colors
1750527955995:mms=read.csv(file.choose(),header=TRUE)
1750527971813:mms=read.csv(mms.csv,header=TRUE)
1750527987684:mms=read.csv(mMnM5/ms.csv,header=TRUE)
1750527988940:mms=read.csv(mMnM5/ms.csv,header=TRUE)
1750528000494:mms=read.csv(file.choose(),header=TRUE)
1750528007507:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528007507:##  a.	Type
1750528007508:##  b.	Type+Color
1750528007508:colors <- unique(mms$color)
1750528007508:colors
1750528007508:options <- unique(mms$type)
1750528083675:data=read.csv(file.choose(),header=TRUE)
1750528095529:getwd(mms)
1750528103468:options
1750528110173:getwd(mms.csv)
1750528116156:getwd("mms.csv")
1750528122446:getwd()
1750528169551:mm=read.csv('mms.csv')
1750528205352:mm = read.csv("./mms.csv")
1750528371218:data <- read.csv("mms.csv")
1750528414555:data <- read.csv("mms.csv")
1750528452582:getwd()
1750528484020:list.files()
1750528526846:setwd("/workspaces/r_dev_container/MnM5")
1750528537110:data <- read.csv("mms.csv")
1750528612768:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528612771:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528612771:##  a.	Type
1750528612771:##  b.	Type+Color
1750528612771:colors <- unique(mms$color)
1750528612771:options <- unique(mms$type)
1750528612771:color
1750528621758:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528621761:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528621761:##  a.	Type
1750528621761:##  b.	Type+Color
1750528621761:colors <- unique(mms$color)
1750528621761:options <- unique(mms$type)
1750528621762:colors
1750528621762:options
1750528718595:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528718598:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528718598:##  a.	Type
1750528718598:##  b.	Type+Color
1750528718599:colors <- unique(mms$color)
1750528718599:options <- unique(mms$type)
1750528718599:colors
1750528718600:options
1750528738368:mms=read.csv("mms.csv") ## I'm ashamed at how long it took me to do this without the file.choose()... (15ish min)
1750528738373:## 1.	What is the mean and standard deviation of the following cross sections of data for both diameter and mass: (20 points)
1750528738373:##  a.	Type
1750528738373:##  b.	Type+Color
1750528738373:colors <- unique(mms$color)
1750528738374:options <- unique(mms$type)
1750528738374:colors
1750528738374:options
1750528870228:names(mms)
1750528883143:colors
1750528902049:options # unique types
1750548451488:getwd()
1750548479459:setwd("/workspaces/r_dev_container/MnM5")
1750548526247:mnm = read.csv("mms.csv")
1750548535925:name(mnm)
1750548554294:names(mnm)
1750548579244:colors = unique(mnm$color)
1750548579244:colors
1750548598011:types = unique(mnm$type)
1750548845941:for(type in types)
1750548845942:{
1750548845942:mean(mnm$mass)
1750548845942:mean(mnm$diameter)
1750548845942:for(clr in colors)
1750548845942:{
1750548845942:mean(mnm$mass)
1750548845942:mean(mnm$diameter)
1750548845942:}
1750548845942:}
1750549026484:for(type in types)
1750549026484:{
1750549026484:cat(type, mean(mnm$mass[mnm$types = type]))
1750549060899:for(type in types)
1750549060899:{
1750549060899:cat(type, mean(mnm$mass[mnm$types == type]))
1750549060899:cat(type, mean(mnm$diameter[mnm$types == type]))
1750549060899:for(clr in colors)
1750549060899:{
1750549060900:cat(type, color, mean(mnm$mass[mnm$types == type && mnm$colors == clr]))
1750549060900:cat(type, color, mean(mnm$diameter[mnm$types == type && mnm$colors == clr]))
1750549060900:}
1750549060900:}
1750549077181:for(type in types)
1750549077182:{
1750549077182:cat(type, mean(mnm$mass[mnm$types == type]))
1750549077182:cat(type, mean(mnm$diameter[mnm$types == type]))
1750549077182:for(clr in colors)
1750549077182:{
1750549077182:cat(type, clr, mean(mnm$mass[mnm$types == type && mnm$colors == clr]))
1750549077182:cat(type, clr, mean(mnm$diameter[mnm$types == type && mnm$colors == clr]))
1750549077182:}
1750549077182:}
1750549133050:x = mean(mnm$mass)
1750549133050:x
1750549275865:pnut.mean = mean(mnm$mass[mnm$type == "peanut butter"])
1750549291048:pnut.mean
1750549433712:for(kind in types)
1750549433712:{
1750549433712:avg <- mean(mnm$mass[mnm$type == kind])
1750549433712:cat(kind, avg, "\n")
1750549433712:}
1750549460127:for(kind in types)
1750549460127:{
1750549460127:avg <- mean(mnm$mass[mnm$type == kind])
1750549460127:cat(kind, "mean is:", avg, "\n")
1750549460128:}
1750549469719:cat(kind, "mean is:\t", avg, "\n")
1750549474652:for(kind in types)
1750549474652:{
1750549474652:avg <- mean(mnm$mass[mnm$type == kind])
1750549474652:cat(kind, "mean is:\t", avg, "\n")
1750549474652:}
1750549583784:for(kind in types)
1750549583784:{
1750549583784:avgw <- mean(mnm$mass[mnm$type == kind])
1750549583785:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549583785:cat(kind, ":\nmean weight is:\t", avgw, "\n", "mean size is:\t", avgs, "\n\n")
1750549583786:}
1750549605423:for(kind in types)
1750549605423:{
1750549605423:avgw <- mean(mnm$mass[mnm$type == kind])
1750549605423:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549605423:cat(kind, ":\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549605424:}
1750549621638:for(kind in types)
1750549621638:{
1750549621638:avgw <- mean(mnm$mass[mnm$type == kind])
1750549621638:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549621638:cat(kind + ":\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549621638:}
1750549784006:for(kind in types)
1750549784006:{
1750549784006:avgw <- mean(mnm$mass[mnm$type == kind])
1750549784006:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549784007:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549784008:cat(kind)
1750549784008:for(clr in colors)
1750549784008:{
1750549784009:tcw <- mean(mnm$mass[mnm$type == kind && mnm$color == clr])
1750549784009:tcs <- mean(mnm$diameter[mnm$type == kind && mnm$color == clr])
1750549784009:cat(clr, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549784009:}
1750549784010:}
1750549817218:for(kind in types)
1750549817218:{
1750549817219:avgw <- mean(mnm$mass[mnm$type == kind])
1750549817219:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549817219:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549817219:cat(kind)
1750549817219:for(clr in colors)
1750549817219:{
1750549817219:tcw <- mean(mnm$mass[mnm$type == kind, mnm$color == clr])
1750549817219:tcs <- mean(mnm$diameter[mnm$type == kind, mnm$color == clr])
1750549817220:cat(clr, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549817220:}
1750549817221:}
1750549889036:for(kind in types)
1750549889036:{
1750549889037:avgw <- mean(mnm$mass[mnm$type == kind])
1750549889037:avgs <- mean(mnm$diameter[mnm$type == kind])
1750549889037:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549889038:cat(kind)
1750549889038:for(clr in colors)
1750549889038:{
1750549889038:tcw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750549889038:tcs <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750549889038:cat(clr, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750549889038:}
1750549889039:}
1750550202950:total = length(mnm)
1750550202951:total
1750550220795:total = nrow(mnm)
1750550220795:total
1750550255473:## # 2
1750550255473:## proportion of each type of color
1750550255473:## I don't need to subtract for the header, right?
1750550255473:mnm
1750550397757:## nope.. okay
1750550397757:total = nrow(mnm)
1750550397757:total
1750550397758:for(clr in colors)
1750550397759:{
1750550397759:clrcnt = count(mnm$color[mnm$color == clr])
1750550397759:cat("{clr}: appears {100 * clrcnt/total}% of the time.\n")
1750550397760:}
1750550455098:for(clr in colors)
1750550455098:{
1750550455098:clrcnt = sum(mnm$color[mnm$color == clr])
1750550455098:cat("{clr}: appears {100 * clrcnt/total}% of the time.\n")
1750550455098:}
1750550484427:for(clr in colors)
1750550484427:{
1750550484427:clrcnt = sum(mnm$color == clr)
1750550484427:cat("{clr}: appears {100 * clrcnt/total}% of the time.\n")
1750550484427:}
1750550521440:for(clr in colors)
1750550521440:{
1750550521440:clrcnt = sum(mnm$color == clr)
1750550521440:cat(clr, "appears",100 * clrcnt/total, "% of the time.\n")
1750550521440:}
1750550665591:for(clr in colors)
1750550665591:{
1750550665591:clrcnt = sum(mnm$color == clr)
1750550665591:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750550665591:}
1750550765029:## #3 bar chart of #2
1750550765029:barplot(mnm$color)
1750550792392:## #3 bar chart of #2
1750550792392:barplot(sum(mnm$color))
1750550815251:## #3 bar chart of #2
1750550815252:help(barplot)
1750550923289:counts
1750550927006:counts
1750550930373:counts <- c(colors)
1750550930373:counts
1750551041820:counts <- c(colors)
1750551041820:counts
1750551041821:## could have just gone back and modified 2, sure...
1750551041821:i = 1
1750551041821:for(clr in colors)
1750551041821:{
1750551041821:counts[i] = sum(mnm$color == clr)
1750551041821:i <- i + 1
1750551041821:}
1750551041827:counts
1750551106978:barplot(counts, names.arg=colors)
1750551191536:barplot(counts, names.arg = colors, main = "Count of Each Color", xlab = "Colors", ylab = "Counts", col = "lightblue")
1750551209800:# Assuming colors is a character vector containing the unique colors
1750551209800:colors <- c("blue", "brown", "orange", "yellow", "green", "red")
1750551209800:# Initialize counts as a numeric vector of the same length as colors
1750551209800:counts <- numeric(length(colors))
1750551209801:# Loop through each color and count occurrences
1750551209801:for(i in seq_along(colors)) {
1750551209801:clr <- colors[i]
1750551209801:counts[i] <- sum(mnm$color == clr)
1750551209801:}
1750551209808:# Create a bar plot
1750551209808:barplot(counts, names.arg = colors, main = "Count of Each Color", xlab = "Colors", ylab = "Counts", col = "lightblue")
1750551306996:counts <- c(colors)
1750551306996:counts
1750551306997:## could have just gone back and modified 2, sure...
1750551306997:for(i in seq_along(colors))
1750551306997:{
1750551306997:clr <- colors[i]
1750551306997:counts[i] <- sum(mnm$color == clr)
1750551306997:}
1750551307003:# Create a bar plot
1750551307003:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551339319:# Assuming colors is a character vector containing the unique colors
1750551339319:colors <- c("blue", "brown", "orange", "yellow", "green", "red")
1750551339319:# Initialize counts as a numeric vector of the same length as colors
1750551339319:counts <- numeric(length(colors))
1750551339319:# Loop through each color and count occurrences
1750551339320:for(i in seq_along(colors)) {
1750551339320:clr <- colors[i]
1750551339320:counts[i] <- sum(mnm$color == clr)
1750551339320:}
1750551339326:# Create a bar plot
1750551339326:barplot(counts, names.arg = colors, main = "Count of Each Color", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551387338:## some extra fuckery to get the height to accept it
1750551387339:counts <-numeric(length(colors))
1750551387339:## could have just gone back and modified 2, sure...
1750551387339:for(i in seq_along(colors))
1750551387339:{
1750551387339:clr <- colors[i]
1750551387339:counts[i] <- sum(mnm$color == clr)
1750551387340:}
1750551387347:# Create a bar plot
1750551387347:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551407180:## some extra fuckery to get the height to accept it
1750551407180:counts <-numeric(length(colors))
1750551407180:## could have just gone back and modified 2, sure...
1750551407180:for(i in seq_along(colors))
1750551407180:{
1750551407180:clr <- colors[i]
1750551407180:counts[i] <- sum(mnm$color == clr)
1750551407181:}
1750551407188:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "hotpink")
1750551407200:12+39
1750551419991:## some extra fuckery to get the height to accept it
1750551419991:counts <-numeric(length(colors))
1750551419991:## could have just gone back and modified 2, sure...
1750551419991:for(i in seq_along(colors))
1750551419991:{
1750551419991:clr <- colors[i]
1750551419992:counts[i] <- sum(mnm$color == clr)
1750551419992:}
1750551420000:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750552407561:for(clr in colors)
1750552407562:{
1750552407562:for(kind in types)
1750552407562:{
1750552407562:#tcc[i] <-
1750552407562:i <- + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552407562:cat(i)
1750552407562:}
1750552407562:}
1750552419313:for(clr in colors)
1750552419314:{
1750552419314:for(kind in types)
1750552419314:{
1750552419314:#tcc[i] <-
1750552419314:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552419314:}
1750552419314:}
1750552432408:for(clr in colors)
1750552432409:{
1750552432409:for(kind in types)
1750552432409:{
1750552432409:#tcc[i] <-
1750552432409:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552432409:cat(i)
1750552432409:}
1750552432409:}
1750552445604:i = 1
1750552445605:for(clr in colors)
1750552445605:{
1750552445605:for(kind in types)
1750552445605:{
1750552445605:#tcc[i] <-
1750552445606:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552445606:cat(i)
1750552445606:}
1750552445606:}
1750552640834:tcc <- numeric(length(colors)) * 3
1750552640834:tcc
1750552660441:tccr <- length(tcc)
1750552662037:tccr
1750552677324:tccr = numeric(tccr)
1750552678805:tccr
1750552808300:tccr <- r(1:18)
1750552886354:## type-color-count (interesting that numeric sets it to a vector...)
1750552886354:tcc <- numeric(length(colors)) * 3
1750552886355:i = 1
1750552886355:for(clr in colors)
1750552886355:{
1750552886355:for(kind in types)
1750552886356:{
1750552886356:## set the (row)column-vector to hold
1750552886356:tcc[i] <- sum(mnm$color == clr & mnm$type == kind)
1750552886356:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750552886356:}
1750552886356:}
1750552886365:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750552909461:tcc
1750552932786:barplot(tcc, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750552980083:barplot(tcc, names.arg = type+colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750553065436:for(kind in types)
1750553065437:{
1750553065437:i = 1
1750553065437:for(clr in colors)
1750553065437:{
1750553065437:## set the (row)column-vector to hold, reusing counts
1750553065437:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750553065437:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750553065437:}
1750553065437:barplot(tcc, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750553065438:}
1750553077602:for(kind in types)
1750553077602:{
1750553077602:i = 1
1750553077602:for(clr in colors)
1750553077602:{
1750553077603:## set the (row)column-vector to hold, reusing counts
1750553077603:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750553077603:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750553077603:}
1750553077604:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750553077604:}
1750553098396:or(kind in types)
1750553118994:for(kind in types)
1750553118994:{
1750553118994:i = 1
1750553118994:for(clr in colors)
1750553118994:{
1750553118995:## set the (row)column-vector to hold, reusing counts
1750553118995:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750553118995:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750553118995:}
1750553118995:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750553118995:}
1750553300313:## #5
1750553300313:## are mnms of different type the same weight, hard no (recall #1)
1750553300314:for(kind in types)
1750553300314:{
1750553300314:avgw <- mean(mnm$mass[mnm$type == kind])
1750553300314:avgs <- mean(mnm$diameter[mnm$type == kind])
1750553300314:cat(kind, "\nmean weight is:\t", avgw, "\nmean size is:\t", avgs, "\n\n")
1750553300314:}
1750553547813:for(kind in types)
1750553547813:{
1750553547813:avgw <- mean(mnm$mass[mnm$type == kind])
1750553547813:avgs <- mean(mnm$diameter[mnm$type == kind])
1750553547813:stdw <- sd(mnm$mass[mnm$type == kind])
1750553547813:stds <- sd(mnm$diameter[mnm$type == kind])
1750553547813:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750553547814:"\nstd weight:", stdw, "\nstd size:", stds,"\n\n")
1750553547814:cat(kind)
1750553547814:for(clr in colors)
1750553547814:{
1750553547814:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553547814:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553547815:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553547815:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553547815:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750553547815:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750553547815:}
1750553547816:}
1750553604749:for(kind in types)
1750553604749:{
1750553604749:avgw <- mean(mnm$mass[mnm$type == kind])
1750553604749:avgs <- mean(mnm$diameter[mnm$type == kind])
1750553604749:stdw <- sd(mnm$mass[mnm$type == kind])
1750553604749:stds <- sd(mnm$diameter[mnm$type == kind])
1750553604749:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750553604749:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750553604750:cat("\n\n",kind,"\n")
1750553604750:for(clr in colors)
1750553604750:{
1750553604751:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553604751:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553604751:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750553604751:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750553604752:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750553604752:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750553604752:}
1750553604752:}
1750553709324:for(kind in types)
1750553709324:{
1750553709324:stdw <- sd(mnm$mass[mnm$type == kind])
1750553709324:stds <- sd(mnm$diameter[mnm$type == kind])
1750553709324:cat(kind, "nstd weight:", stdw, "\nstd size:", stds,"\n")
1750553709324:}
1750553821630:for(kind in types)
1750553821630:{
1750553821630:stdw <- sd(mnm$mass[mnm$type == kind])
1750553821630:stds <- sd(mnm$diameter[mnm$type == kind])
1750553821630:avg <- mean(mnm$mass[mnm$type == kind])
1750553821631:cat(kind, "weight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,"\n")
1750553821631:}
1750553838920:for(kind in types)
1750553838920:{
1750553838920:stdw <- sd(mnm$mass[mnm$type == kind])
1750553838921:stds <- sd(mnm$diameter[mnm$type == kind])
1750553838921:avg <- mean(mnm$mass[mnm$type == kind])
1750553838921:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,"\n\n")
1750553838921:}
1750553993759:for(kind in types)
1750553993760:{
1750553993760:stdw <- sd(mnm$mass[mnm$type == kind])
1750553993760:stds <- sd(mnm$diameter[mnm$type == kind])
1750553993760:avg <- mean(mnm$mass[mnm$type == kind])
1750553993760:imprint <- mean(mnm$diameter[mnm$type == kind])
1750553993760:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750553993760:"\naverage size:", imprint, "\n\n")
1750553993760:}
1750553993773:##
1750554131123:for(kind in types)
1750554131123:{
1750554131124:stdw <- sd(mnm$mass[mnm$type == kind])
1750554131124:stds <- sd(mnm$diameter[mnm$type == kind])
1750554131124:avg <- mean(mnm$mass[mnm$type == kind])
1750554131124:imprint <- mean(mnm$diameter[mnm$type == kind])
1750554131124:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750554131124:"\naverage size:", imprint,
1750554131124:"\nstd weight / avg weight", stdw / avg,
1750554131124:"\nstd size / average size", stds / imprint,
1750554131124:"\n\n")
1750554131125:}
1750554131137:##
1750554645329:types
1750554650011:sum(mnm$mass[mnm$type == "plain"])
1750554677637:for(kind in types)
1750554677637:{sum(mnm$mass[mnm$type == kind])}
1750554692379:for(kind in types)
1750554692379:{sum(mnm$mass[mnm$type == kind])}
1750554725963:for(kind in types)
1750554725963:{
1750554725963:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750554725963:}
1750555185910:plain <- sort(mm_data$weight[mm_data$type == "plain"])
1750555202219:plain <- sort(mnm$weight[mm_data$type == "plain"])
1750555218518:plain <- sort(mnm$weight[mnm$type == "plain"])
1750555218518:peanut <- sort(mnm$weight[mnm$type == "peanut"])
1750555218518:pb <- sort(mnm$weight[mnm$type == "peanut butter"])
1750555226521:plain
1750555230199:plain
1750555284874:print(plain)
1750555830774:pvec = mnm$weight[mnm$type == "plain"]
1750555835849:pvev
1750555841677:pvec
1750555866491:## damn, all over... okay
1750555866491:mnm
1750555926151:plain <- sort(mnm$mass[mnm$type == "plain"])
1750555926151:plain
1750555970055:## damn, all over... okay
1750555970055:plain <- sort(mnm$mass[mnm$type == "plain"])
1750555970056:pnut <- sort(mnm$mass[mnm$type == "peanut"])
1750555970056:pb <- sort(mnm$mass[mnm$type == "peanut butter"])
1750556011888:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750556011888:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750556011889:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750556016680:pb
1750556048397:pnut
1750556275994:# Function to find if there is a subset with a given sum
1750556275994:subset_sum <- function(weights, target) {
1750556275994:n <- length(weights)
1750556275995:dp <- matrix(FALSE, n + 1, target + 1)
1750556275995:dp[1, 1] <- TRUE
1750556275995:for (i in 1:n) {
1750556275995:for (j in 1:(target + 1)) {
1750556275995:if (j < weights[i]) {
1750556275995:dp[i + 1, j] <- dp[i, j]
1750556275995:} else {
1750556275996:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750556275996:}
1750556275996:}
1750556275997:}
1750556275997:return(dp[n + 1, target + 1])
1750556275998:}
1750556275998:# Example usage
1750556275998:target_weight <- 369.9
1750556275998:result <- subset_sum(peanut_weights, target_weight)
1750556298807:# Function to find if there is a subset with a given sum
1750556298808:subset_sum <- function(weights, target) {
1750556298808:n <- length(weights)
1750556298808:dp <- matrix(FALSE, n + 1, target + 1)
1750556298808:dp[1, 1] <- TRUE
1750556298808:for (i in 1:n) {
1750556298808:for (j in 1:(target + 1)) {
1750556298808:if (j < weights[i]) {
1750556298808:dp[i + 1, j] <- dp[i, j]
1750556298808:} else {
1750556298809:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750556298809:}
1750556298809:}
1750556298809:}
1750556298809:return(dp[n + 1, target + 1])
1750556298809:}
1750556298810:# Example usage
1750556298810:target_weight <- 369.9
1750556298810:result <- subset_sum(pnut, target_weight)
1750556298833:if (result) {
1750556298833:print("There is a subset of weights that sums to the target weight.")
1750556298833:} else {
1750556298833:print("No subset of weights sums to the target weight.")
1750556298833:}
1750556399973:find_subset <- function(weights, target, current = c(), index = 1) {
1750556399974:if (target == 0) {
1750556399974:return(current)
1750556399974:}
1750556399974:if (target < 0 || index > length(weights)) {
1750556399974:return(NULL)
1750556399974:}
1750556399974:# Include the current weight
1750556399974:with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750556399975:# Exclude the current weight
1750556399975:without_current <- find_subset(weights, target, current, index + 1)
1750556399975:return(if (!is.null(with_current)) with_current else without_current)
1750556399975:}
1750556399976:# Example usage
1750556399976:result_combination <- find_subset(pnut, target_weight)
1750556721637:#############################################################
1750556721637:#############################################################
1750556721637:## still #7
1750556721637:plain
1750556772649:for(kind in types)
1750556772649:{
1750556772649:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750556772649:}
1750556907609:plainOver <- 399.55 - 369.9
1750556913010:plainOver
1750601882846:## okay... well, I say we just add up a bunch from the vectors and make it even
1750601882847:plain
1750601887408:setwd("/workspaces/r_dev_container/MnM5")
1750601887409:mnm <- read.csv("mms.csv")
1750601887412:colors <- unique(mnm$color)
1750601887412:colors
1750601887413:types <- unique(mnm$type)
1750601887413:## #1
1750601887413:## find the mean and standard deviation for diameter and mass using
1750601887413:## type, type+color
1750601887414:for(kind in types)
1750601887414:{
1750601887414:avgw <- mean(mnm$mass[mnm$type == kind])
1750601887414:avgs <- mean(mnm$diameter[mnm$type == kind])
1750601887414:stdw <- sd(mnm$mass[mnm$type == kind])
1750601887414:stds <- sd(mnm$diameter[mnm$type == kind])
1750601887414:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750601887415:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750601887415:cat("\n\n",kind,"color breakdown:\n")
1750601887415:for(clr in colors)
1750601887415:{
1750601887415:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750601887415:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750601887415:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750601887416:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750601887416:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750601887416:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750601887416:}
1750601887416:}
1750601887447:## #2
1750601887447:## proportion of each type of color
1750601887447:## I don't need to subtract for the header, right?
1750601887447:mnm
1750601887461:## nope.. okay
1750601887461:total = nrow(mnm)
1750601887461:total
1750601887461:for(clr in colors)
1750601887461:{
1750601887461:clrcnt = sum(mnm$color == clr)
1750601887461:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750601887461:}
1750601887465:## #3 bar chart of #2
1750601887465:## some extra fuckery to get the height to accept it
1750601887465:counts <- numeric(length(colors))
1750601887465:## could have just gone back and modified 2, sure...
1750601887465:for(i in seq_along(colors))
1750601887466:{
1750601887466:clr <- colors[i]
1750601887466:counts[i] <- sum(mnm$color == clr)
1750601887466:}
1750601887468:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750601887620:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750601887620:## #4
1750601887620:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750601887621:## type-color-count (interesting that numeric sets it to a vector...)
1750601887621:for(kind in types)
1750601887621:{
1750601887621:i = 1
1750601887621:for(clr in colors)
1750601887622:{
1750601887622:## set the (row)column-vector to hold, reusing counts
1750601887622:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750601887622:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750601887622:}
1750601887622:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750601887622:}
1750601887676:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750601887676:## was too difficult for me to figure out)
1750601887676:## #5 && #6
1750601887676:## are mnms of different type the same weight, hard no (recall #1)
1750601887676:for(kind in types)
1750601887676:{
1750601887676:stdw <- sd(mnm$mass[mnm$type == kind])
1750601887677:stds <- sd(mnm$diameter[mnm$type == kind])
1750601887677:avg <- mean(mnm$mass[mnm$type == kind])
1750601887677:imprint <- mean(mnm$diameter[mnm$type == kind])
1750601887677:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750601887677:"\naverage size:", imprint,
1750601887677:"\nstd weight / avg weight", stdw / avg,
1750601887677:"\nstd size / average size", stds / imprint,
1750601887677:"\n\n")
1750601887677:}
1750601887685:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750601887685:## #6 see above
1750601887685:## #7
1750601887685:## ... what?? are we using average or literally picking m&ms from the pile?
1750601887685:## plain          369.9 G
1750601887685:## peanut         369.9 G
1750601887685:## peanut butter  360   G
1750601887685:for(kind in types)
1750601887685:{
1750601887685:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750601887685:}
1750601887688:## damn, all over... okay
1750601887688:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750601887688:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750601887688:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750601887688:## wow, the smallest is less than half the largest...
1750601887688:pb
1750601887690:pnut ## close here, too
1750601887691:## let's see what AI says...
1750601887691:# Function to find if there is a subset with a given sum
1750601887692:subset_sum <- function(weights, target) {
1750601887692:n <- length(weights)
1750601887692:dp <- matrix(FALSE, n + 1, target + 1)
1750601887692:dp[1, 1] <- TRUE
1750601887692:for (i in 1:n) {
1750601887692:for (j in 1:(target + 1)) {
1750601887692:if (j < weights[i]) {
1750601887692:dp[i + 1, j] <- dp[i, j]
1750601887692:} else {
1750601887692:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750601887692:}
1750601887692:}
1750601887692:}
1750601887692:return(dp[n + 1, target + 1])
1750601887692:}
1750601887692:# Example usage
1750601887693:target_weight <- 369.9
1750601887693:result <- subset_sum(pnut, target_weight)
1750601887709:if (result) {
1750601887709:print("There is a subset of weights that sums to the target weight.")
1750601887710:} else {
1750601887710:print("No subset of weights sums to the target weight.")
1750601887710:}
1750601887710:## above, dynamic programming approach.
1750601887710:###################################################
1750601887710:## below, simpler break point approach.
1750601887710:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750601887710:find_subset <- function(weights, target, current = c(), index = 1) {
1750601887710:if (target == 0) {
1750601887710:return(current)
1750601887710:}
1750601887710:if (target < 0 || index > length(weights)) {
1750601887710:return(NULL)
1750601887710:}
1750601887710:# Include the current weight
1750601887710:with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750601887710:# Exclude the current weight
1750601887711:without_current <- find_subset(weights, target, current, index + 1)
1750601887711:return(if (!is.null(with_current)) with_current else without_current)
1750601887711:}
1750601887711:# Example usage
1750601887711:result_combination <- find_subset(pnut, target_weight)
1750601917609:## the smallest we can make is .72, (2) .73, .74, (2) .76
1750601917610:plain
1750602035735:cat(sum(plain[1:409]))
1750602059804:x = sum(plain[1:409])
1750602059804:x
1750602072180:x = sum(plain[1:419])
1750602072180:x
1750602084770:369.9 - x
1750602118503:.74 + .73 + .73 + .72
1750602143878:.74 + .73 + .73 + .72 + .76 + .76
1750602150367:.74 + .73 + .73 + .72 + .76
1750602184062:3.98 / 5
1750602256189:.8 + .8 + .8 + .79 + .79
1750602581844:for(kind in types)
1750602581844:{
1750602581844:avgw <- mean(mnm$mass[mnm$type == kind])
1750602581844:avgs <- mean(mnm$diameter[mnm$type == kind])
1750602581844:stdw <- sd(mnm$mass[mnm$type == kind])
1750602581844:stds <- sd(mnm$diameter[mnm$type == kind])
1750602581845:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750602581845:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750602581845:cat("\n\n",kind,"color breakdown:\n")
1750602581846:for(clr in colors)
1750602581846:{
1750602581846:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750602581846:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750602581846:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750602581846:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750602581847:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750602581847:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750602581848:}
1750602581848:}
1750603000464:colors
1750603022970:colors <- sort(colors)
1750603022970:colors
1750605397939:setwd("/workspaces/r_dev_container/MnM5")
1750605397939:mnm <- read.csv("mms.csv")
1750605397948:colors <- unique(mnm$color)
1750605397948:colors
1750605397948:types <- unique(mnm$type)
1750605397949:## #1
1750605397949:## find the mean and standard deviation for diameter and mass using
1750605397949:## type, type+color
1750605397949:for(kind in types)
1750605397949:{
1750605397949:avgw <- mean(mnm$mass[mnm$type == kind])
1750605397949:avgs <- mean(mnm$diameter[mnm$type == kind])
1750605397949:stdw <- sd(mnm$mass[mnm$type == kind])
1750605397949:stds <- sd(mnm$diameter[mnm$type == kind])
1750605397950:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750605397950:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750605397950:cat("\n\n",kind,"color breakdown:\n")
1750605397950:for(clr in colors)
1750605397950:{
1750605397950:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605397950:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605397950:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605397951:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605397951:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750605397951:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750605397951:}
1750605397951:}
1750605397978:## #2
1750605397978:## proportion of each type of color
1750605397978:## I don't need to subtract for the header, right?
1750605397978:mnm
1750605398006:## nope.. okay
1750605398006:total = nrow(mnm)
1750605398006:total
1750605398006:for(clr in colors)
1750605398006:{
1750605398007:clrcnt = sum(mnm$color == clr)
1750605398007:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750605398007:}
1750605398012:## #3 bar chart of #2
1750605398012:## some extra fuckery to get the height to accept it
1750605398012:counts <- numeric(length(colors))
1750605398013:## could have just gone back and modified 2, sure...
1750605398013:for(i in seq_along(colors))
1750605398013:{
1750605398013:clr <- colors[i]
1750605398013:counts[i] <- sum(mnm$color == clr)
1750605398013:}
1750605398016:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750605398177:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750605398178:## #4
1750605398178:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750605398178:## type-color-count (interesting that numeric sets it to a vector...)
1750605398178:for(kind in types)
1750605398178:{
1750605398178:i = 1
1750605398178:for(clr in colors)
1750605398178:{
1750605398178:## set the (row)column-vector to hold, reusing counts
1750605398178:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750605398178:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750605398178:}
1750605398178:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750605398178:}
1750605398242:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750605398242:## was too difficult for me to figure out)
1750605398242:## #5 && #6
1750605398242:## are mnms of different type the same weight, hard no (recall #1)
1750605398242:for(kind in types)
1750605398242:{
1750605398242:stdw <- sd(mnm$mass[mnm$type == kind])
1750605398242:stds <- sd(mnm$diameter[mnm$type == kind])
1750605398242:avg <- mean(mnm$mass[mnm$type == kind])
1750605398242:imprint <- mean(mnm$diameter[mnm$type == kind])
1750605398242:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750605398242:"\naverage size:", imprint,
1750605398242:"\nstd weight / avg weight", stdw / avg,
1750605398242:"\nstd size / average size", stds / imprint,
1750605398242:"\n\n")
1750605398242:}
1750605398251:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750605398251:## #6 see above
1750605398251:## #7
1750605398251:## ... what?? are we using average or literally picking m&ms from the pile?
1750605398251:## plain          369.9 G
1750605398251:## peanut         369.9 G
1750605398251:## peanut butter  360   G
1750605398251:for(kind in types)
1750605398251:{
1750605398251:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750605398251:}
1750605398256:## damn, all over... okay
1750605398256:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750605398257:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750605398257:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750605398257:## wow, the smallest is less than half the largest...
1750605398257:pb
1750605398261:pnut ## close here, too
1750605398263:## let's see what AI says...
1750605398263:# Function to find if there is a subset with a given sum
1750605398263:subset_sum <- function(weights, target) {
1750605398264:n <- length(weights)
1750605398264:dp <- matrix(FALSE, n + 1, target + 1)
1750605398264:dp[1, 1] <- TRUE
1750605398264:for (i in 1:n) {
1750605398264:for (j in 1:(target + 1)) {
1750605398264:if (j < weights[i]) {
1750605398264:dp[i + 1, j] <- dp[i, j]
1750605398264:} else {
1750605398264:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750605398265:}
1750605398265:}
1750605398265:}
1750605398265:return(dp[n + 1, target + 1])
1750605398265:}
1750605398265:# Example usage
1750605398265:target_weight <- 369.9
1750605398266:result <- subset_sum(pnut, target_weight)
1750605398295:if (result) {
1750605398295:print("There is a subset of weights that sums to the target weight.")
1750605398295:} else {
1750605398295:print("No subset of weights sums to the target weight.")
1750605398296:}
1750605398296:## above, dynamic programming approach.
1750605398296:###################################################
1750605398296:## below, simpler break point approach.
1750605398296:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750605398296:find_subset <- function(weights, target, current = c(), index = 1) {
1750605398296:if (target == 0) {
1750605398296:return(current)
1750605398296:}
1750605398297:if (target < 0 || index > length(weights)) {
1750605398297:return(NULL)
1750605398297:}
1750605398297:# Include the current weight
1750605398297:with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750605398297:# Exclude the current weight
1750605398297:without_current <- find_subset(weights, target, current, index + 1)
1750605398297:return(if (!is.null(with_current)) with_current else without_current)
1750605398297:}
1750605398298:# Example usage
1750605398298:result_combination <- find_subset(pnut, target_weight)
1750605484214:setwd("/workspaces/r_dev_container/MnM5")
1750605484214:mnm <- read.csv("mms.csv")
1750605484217:colors <- unique(mnm$color)
1750605484217:colors
1750605484218:types <- unique(mnm$type)
1750605484218:## #1
1750605484218:## find the mean and standard deviation for diameter and mass using
1750605484218:## type, type+color
1750605484219:for(kind in types)
1750605484219:{
1750605484219:avgw <- mean(mnm$mass[mnm$type == kind])
1750605484219:avgs <- mean(mnm$diameter[mnm$type == kind])
1750605484219:stdw <- sd(mnm$mass[mnm$type == kind])
1750605484219:stds <- sd(mnm$diameter[mnm$type == kind])
1750605484219:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750605484219:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750605484219:cat("\n\n",kind,"color breakdown:\n")
1750605484220:for(clr in colors)
1750605484220:{
1750605484220:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605484220:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605484220:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605484220:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605484220:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750605484221:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750605484221:}
1750605484221:}
1750605484254:## #2
1750605484254:## proportion of each type of color
1750605484254:## I don't need to subtract for the header, right?
1750605484254:mnm
1750605484267:## nope.. okay
1750605484267:total = nrow(mnm)
1750605484267:total
1750605484267:for(clr in colors)
1750605484267:{
1750605484267:clrcnt = sum(mnm$color == clr)
1750605484267:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750605484267:}
1750605484271:## #3 bar chart of #2
1750605484272:## some extra fuckery to get the height to accept it
1750605484272:counts <- numeric(length(colors))
1750605484272:## could have just gone back and modified 2, sure...
1750605484272:for(i in seq_along(colors))
1750605484272:{
1750605484272:clr <- colors[i]
1750605484272:counts[i] <- sum(mnm$color == clr)
1750605484272:}
1750605484275:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750605484290:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750605484290:## #4
1750605484291:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750605484291:## type-color-count (interesting that numeric sets it to a vector...)
1750605484291:for(kind in types)
1750605484291:{
1750605484291:i = 1
1750605484291:for(clr in colors)
1750605484291:{
1750605484291:## set the (row)column-vector to hold, reusing counts
1750605484291:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750605484291:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750605484291:}
1750605484291:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750605484291:}
1750605484338:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750605484338:## was too difficult for me to figure out)
1750605484338:## #5 && #6
1750605484338:## are mnms of different type the same weight, hard no (recall #1)
1750605484338:for(kind in types)
1750605484338:{
1750605484338:stdw <- sd(mnm$mass[mnm$type == kind])
1750605484339:stds <- sd(mnm$diameter[mnm$type == kind])
1750605484339:avg <- mean(mnm$mass[mnm$type == kind])
1750605484339:imprint <- mean(mnm$diameter[mnm$type == kind])
1750605484339:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750605484339:"\naverage size:", imprint,
1750605484339:"\nstd weight / avg weight", stdw / avg,
1750605484339:"\nstd size / average size", stds / imprint,
1750605484339:"\n\n")
1750605484339:}
1750605484353:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750605484353:## #6 see above
1750605484353:## #7
1750605484353:## ... what?? are we using average or literally picking m&ms from the pile?
1750605484353:## plain          369.9 G
1750605484353:## peanut         369.9 G
1750605484353:## peanut butter  360   G
1750605484354:for(kind in types)
1750605484354:{
1750605484354:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750605484354:}
1750605484357:## damn, all over... okay
1750605484357:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750605484357:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750605484357:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750605484358:## wow, the smallest is less than half the largest...
1750605484358:pb
1750605484362:pnut ## close here, too
1750605484366:## let's see what AI says...
1750605484366:# Function to find if there is a subset with a given sum
1750605484366:subset_sum <- function(weights, target) {
1750605484366:n <- length(weights)
1750605484366:dp <- matrix(FALSE, n + 1, target + 1)
1750605484366:dp[1, 1] <- TRUE
1750605484367:for (i in 1:n) {
1750605484367:for (j in 1:(target + 1)) {
1750605484367:if (j < weights[i]) {
1750605484367:dp[i + 1, j] <- dp[i, j]
1750605484367:} else {
1750605484367:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750605484367:}
1750605484367:}
1750605484367:}
1750605484368:return(dp[n + 1, target + 1])
1750605484368:}
1750605484368:# Example usage
1750605484368:target_weight <- 369.9
1750605484368:result <- subset_sum(pnut, target_weight)
1750605484385:if (result) {
1750605484385:print("There is a subset of weights that sums to the target weight.")
1750605484385:} else {
1750605484385:print("No subset of weights sums to the target weight.")
1750605484386:}
1750605484386:## above, dynamic programming approach.
1750605484386:###################################################
1750605484386:## below, simpler break point approach.
1750605484386:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750605484386:#find_subset <- function(weights, target, current = c(), index = 1) {
1750605484386:#  if (target == 0) {
1750605484387:#    return(current)
1750605484387:#  }
1750605484387:#  if (target < 0 || index > length(weights)) {
1750605484387:#    return(NULL)
1750605484387:#  }
1750605484387:#
1750605484387:#  # Include the current weight
1750605484387:#  with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750605484387:#
1750605484387:#  # Exclude the current weight
1750605484387:#  without_current <- find_subset(weights, target, current, index + 1)
1750605484387:#
1750605484388:#  return(if (!is.null(with_current)) with_current else without_current)
1750605484388:#}
1750605484388:## gotta rerun my shell a lot and this is super slow...
1750605484388:# Example usage
1750605484388:result_combination <- find_subset(pnut, target_weight)
1750605527996:setwd("/workspaces/r_dev_container/MnM5")
1750605527996:mnm <- read.csv("mms.csv")
1750605527999:colors <- unique(mnm$color)
1750605527999:colors
1750605528000:types <- unique(mnm$type)
1750605528000:## #1
1750605528000:## find the mean and standard deviation for diameter and mass using
1750605528000:## type, type+color
1750605528000:for(kind in types)
1750605528000:{
1750605528001:avgw <- mean(mnm$mass[mnm$type == kind])
1750605528001:avgs <- mean(mnm$diameter[mnm$type == kind])
1750605528001:stdw <- sd(mnm$mass[mnm$type == kind])
1750605528001:stds <- sd(mnm$diameter[mnm$type == kind])
1750605528001:cat(kind, "\nmean weight:\t", avgw, "\nmean size:\t", avgs,
1750605528001:"\nstd weight:", stdw, "\nstd size:", stds,"\n")
1750605528001:cat("\n\n",kind,"color breakdown:\n")
1750605528002:for(clr in colors)
1750605528002:{
1750605528002:tcaw <- mean(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605528002:tcas <- mean(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605528002:tcstdw <- sd(mnm$mass[mnm$type == kind & mnm$color == clr])
1750605528002:tcstds <- sd(mnm$diameter[mnm$type == kind & mnm$color == clr])
1750605528002:cat(clr, "\nmean weight is:\t", tcaw, "\nmean size is:\t", tcas,
1750605528002:"\nstd weight:", tcstdw,"\nstd size:", tcstds,"\n\n")
1750605528003:}
1750605528003:}
1750605528028:## #2
1750605528028:## proportion of each type of color
1750605528029:## I don't need to subtract for the header, right?
1750605528029:mnm
1750605528054:## nope.. okay
1750605528054:total = nrow(mnm)
1750605528055:total
1750605528055:for(clr in colors)
1750605528055:{
1750605528055:clrcnt = sum(mnm$color == clr)
1750605528055:cat(clr, "appears",100 * clrcnt/total, "% of the time. (", clrcnt, "/", total, ")\n")
1750605528055:}
1750605528060:## #3 bar chart of #2
1750605528060:## some extra fuckery to get the height to accept it
1750605528060:counts <- numeric(length(colors))
1750605528061:## could have just gone back and modified 2, sure...
1750605528061:for(i in seq_along(colors))
1750605528061:{
1750605528061:clr <- colors[i]
1750605528061:counts[i] <- sum(mnm$color == clr)
1750605528061:}
1750605528064:barplot(counts, names.arg = colors, main = "Count of Colors", xlab = "Colors", ylab = "Counts", col = "darkorange")
1750605528076:## orange because it's the only color that doesn't get spelled out, so it seems fair...
1750605528076:## #4
1750605528076:## no, they're not. Oh, you want more... okay.. shit (where's tableau when I need it?!) [kidding, of course]
1750605528077:## type-color-count (interesting that numeric sets it to a vector...)
1750605528077:for(kind in types)
1750605528077:{
1750605528077:i = 1
1750605528077:for(clr in colors)
1750605528077:{
1750605528077:## set the (row)column-vector to hold, reusing counts
1750605528077:counts[i] <- sum(mnm$color == clr & mnm$type == kind)
1750605528077:i <- i + 1 ## really, for all R has, it doesn't have ++ or +=?
1750605528077:}
1750605528078:barplot(counts, names.arg = colors, main = "Colors on Types", xlab = "Colors", ylab = "Counts", col = "pink")
1750605528078:}
1750605528126:## as I suspected, no... (I had an 18-bar plot, but, the counts on the different sizes fucked it up and the labeling
1750605528126:## was too difficult for me to figure out)
1750605528126:## #5 && #6
1750605528126:## are mnms of different type the same weight, hard no (recall #1)
1750605528126:for(kind in types)
1750605528126:{
1750605528126:stdw <- sd(mnm$mass[mnm$type == kind])
1750605528127:stds <- sd(mnm$diameter[mnm$type == kind])
1750605528127:avg <- mean(mnm$mass[mnm$type == kind])
1750605528127:imprint <- mean(mnm$diameter[mnm$type == kind])
1750605528127:cat(kind, "\nweight:", stdw, "\nstd size:", stds,"\naverage weight:\t",avg,
1750605528127:"\naverage size:", imprint,
1750605528127:"\nstd weight / avg weight", stdw / avg,
1750605528127:"\nstd size / average size", stds / imprint,
1750605528127:"\n\n")
1750605528127:}
1750605528135:## fairly consistent plain M&Ms, but the other two vary quite a bit (should I have used variance?)
1750605528135:## #6 see above
1750605528135:## #7
1750605528135:## ... what?? are we using average or literally picking m&ms from the pile?
1750605528135:## plain          369.9 G
1750605528135:## peanut         369.9 G
1750605528135:## peanut butter  360   G
1750605528135:for(kind in types)
1750605528135:{
1750605528135:cat(kind, sum(mnm$mass[mnm$type == kind]), "\n")
1750605528135:}
1750605528138:## damn, all over... okay
1750605528138:plain <- sort(mnm$mass[mnm$type == "plain"], decreasing = T)
1750605528138:pnut <- sort(mnm$mass[mnm$type == "peanut"], decreasing = T)
1750605528138:pb <- sort(mnm$mass[mnm$type == "peanut butter"], decreasing = T)
1750605528138:## wow, the smallest is less than half the largest...
1750605528138:pb
1750605528140:pnut ## close here, too
1750605528142:## let's see what AI says...
1750605528142:# Function to find if there is a subset with a given sum
1750605528142:subset_sum <- function(weights, target) {
1750605528142:n <- length(weights)
1750605528142:dp <- matrix(FALSE, n + 1, target + 1)
1750605528142:dp[1, 1] <- TRUE
1750605528142:for (i in 1:n) {
1750605528142:for (j in 1:(target + 1)) {
1750605528142:if (j < weights[i]) {
1750605528142:dp[i + 1, j] <- dp[i, j]
1750605528142:} else {
1750605528142:dp[i + 1, j] <- dp[i, j] || dp[i, j - weights[i]]
1750605528142:}
1750605528142:}
1750605528142:}
1750605528143:return(dp[n + 1, target + 1])
1750605528143:}
1750605528143:# Example usage
1750605528143:target_weight <- 369.9
1750605528143:result <- subset_sum(pnut, target_weight)
1750605528159:if (result) {
1750605528159:print("There is a subset of weights that sums to the target weight.")
1750605528159:} else {
1750605528159:print("No subset of weights sums to the target weight.")
1750605528160:}
1750605528160:## above, dynamic programming approach.
1750605528160:###################################################
1750605528160:## below, simpler break point approach.
1750605528160:## (this would work, for valued customers, set condition at the end, for valued pockets, set break point at beginning)
1750605528160:#find_subset <- function(weights, target, current = c(), index = 1) {
1750605528160:#  if (target == 0) {
1750605528160:#    return(current)
1750605528160:#  }
1750605528160:#  if (target < 0 || index > length(weights)) {
1750605528160:#    return(NULL)
1750605528160:#  }
1750605528160:#
1750605528160:#  # Include the current weight
1750605528160:#  with_current <- find_subset(weights, target - weights[index], c(current, weights[index]), index + 1)
1750605528160:#
1750605528160:#  # Exclude the current weight
1750605528160:#  without_current <- find_subset(weights, target, current, index + 1)
1750605528160:#
1750605528160:#  return(if (!is.null(with_current)) with_current else without_current)
1750605528160:#}
1750605528161:## gotta rerun my shell a lot and this is super slow...
1750605528161:# Example usage
1750605528161:#result_combination <- find_subset(pnut, target_weight)
1750605528161:#if (!is.null(result_combination)) {
1750605528161:#  print(paste("Combination found:", toString(result_combination)))
1750605528161:#} else {
1750605528161:#  print("No combination of weights sums to the target weight.")
1750605528161:#}
1750605528161:#############################################################
1750605528161:#############################################################
1750605528161:## still #7
1750605528161:## plain          369.9 G (actual 399.55)
1750605528161:## peanut         369.9 G (actual 397.45)
1750605528161:## peanut butter  360   G (actual 361.42)
1750605528161:## the smallest we can make is .72, (2) .73, .74, (2) .76
1750605528161:plain
1750605528165:plainOver <- 399.55 - 369.9 # (29.65, wow, over an ounce extra!)
1750605528165:## okay... well, I say we just add up a bunch from the vectors and make it even
1750605528165:x = sum(plain[1:419])
1750605528165:x
1750605528165:369.9 - x ## 3.98 (3.98 / 5 = .796)
1750605528166:.8 + .8 + .8 + .79 + .79
1750605528166:## SOLUTION TO PLAIN ##
1750605528166:## sort them by weight, descending. Take the first 419 M&Ms then numbers 430-434
1750605528166:## AND VIOLA, you have EXACT Weight. Don't worry about the profits or the customer...
1750605528166:## and since this is actually a cheap question that I've over-killed to not even find the desired solutions for
1750605528166:## (one answer that covers 2, and an algorithm that I didn't write which could solve all of them) I'm moving on
1750605528166:## #8
1750605528166:## Now we are going to revise the procedure:  color matters.  As you add M&Ms
1750605528166:## to the bag, you must first generate their color randomly and then use the
1750605528166:## parameters from that color (calculated in Step 1 B) to specify the values
1750605528166:## for weight and diameter randomly using a distribution.  Use the same
1750605528166:## assumptions for your previous bag samples. (20 points)
1750605528166:## plain / peanut / peanut butter weights
1750605528166:## blue       brown       green       orange      red         yellow
1750605528166:## 0.86023    0.87058     0.86989     0.86480     0.85448     0.86547
1750605528166:## 2.57593    2.57130     2.68074     2.57035     2.62650     2.56704
1750605528166:## 1.85250    1.80310     1.92029     1.73000     1.47048     1.73962
1750605528167:colors <- sort(colors)
1750605528167:colors
1750605528167:## plain color weights
1750605528167:pcw <- c(0.86023, 0.87058, 0.86989, 0.86480, 0.85448, 0.86547)
1750605528167:## pnut color weights
1750605528167:pncw <- c(2.57593, 2.57130, 2.68074, 2.57035, 2.62650, 2.56704)
1750605528167:## pnut butter color weights
1750605528167:pbcw <- c(1.85250, 1.80310, 1.92029, 1.73000, 1.47048, 1.73962)
1750605528167:## wait a minute... but the color distribution isn't flat...
1750605528167:makeOver <- function(weightVector, colorOrder, weight)
1750605528167:{
1750605528167:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750605528167:weight <- 0
1750605528167:colorDist <- rep(0, 6)
1750605528167:total <- 0
1750605528167:## repeat while under, this should execute once more bringing it over
1750605528167:while(weight < 369.9)
1750605528168:{
1750605528168:m <- sample(1:6, 1)
1750605528168:weight <- weight + weightVector[m]
1750605528168:colorDist[m] <- colorDist[m] + 1
1750605528168:total <- total + 1
1750605528168:}
1750605528168:cat(total, "M&M's for a weight of", weight)
1750605528168:for(x in 1:6)
1750605528168:{
1750605528168:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750605528168:}
1750605528168:}
1750605528168:makeOver(pcw, colors, 369.9)
1750605606791:makeOver(pncw, colors, 369.9)
1750605606797:makeOver(pbcw, colors, 360)
1750605656895:makeOver(pcw, colors, 369.9)
1750605656901:makeOver(pncw, colors, 369.9)
1750605656905:makeOver(pbcw, colors, 360)
1750605685968:## wait a minute... but the color distribution isn't flat...
1750605685968:makeOver <- function(weightVector, colorOrder, weight)
1750605685968:{
1750605685968:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750605685968:weight <- 0
1750605685969:colorDist <- rep(0, 6)
1750605685969:total <- 0
1750605685969:## repeat while under, this should execute once more bringing it over
1750605685970:while(weight < 369.9)
1750605685970:{
1750605685970:m <- sample(1:6, 1)
1750605685970:weight <- weight + weightVector[m]
1750605685971:colorDist[m] <- colorDist[m] + 1
1750605685971:total <- total + 1
1750605685971:}
1750605685972:cat(total, "M&M's for a weight of", weight, "\n")
1750605685972:for(x in 1:6)
1750605685972:{
1750605685972:cat("\nColor", colorOrder[x], "was picked", colorDist[x], "times")
1750605685972:}
1750605685972:}
1750605685973:makeOver(pcw, colors, 369.9)
1750605685986:makeOver(pncw, colors, 369.9)
1750605685988:makeOver(pbcw, colors, 360)
1750605703963:makeOver <- function(weightVector, colorOrder, weight)
1750605703963:{
1750605703963:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750605703964:weight <- 0
1750605703964:colorDist <- rep(0, 6)
1750605703964:total <- 0
1750605703964:## repeat while under, this should execute once more bringing it over
1750605703964:while(weight < 369.9)
1750605703964:{
1750605703964:m <- sample(1:6, 1)
1750605703964:weight <- weight + weightVector[m]
1750605703964:colorDist[m] <- colorDist[m] + 1
1750605703964:total <- total + 1
1750605703965:}
1750605703965:cat(total, "M&M's for a weight of", weight, "\n")
1750605703965:for(x in 1:6)
1750605703965:{
1750605703965:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750605703966:}
1750605703966:}
1750605703966:makeOver(pcw, colors, 369.9)
1750605703980:makeOver(pncw, colors, 369.9)
1750605703982:makeOver(pbcw, colors, 360)
1750606005053:## wait a minute... but the color distribution isn't flat...
1750606005054:makeOver <- function(weightVector, colorOrder, targetWeight)
1750606005054:{
1750606005054:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750606005054:weight <- 0
1750606005054:colorDist <- rep(0, 6)
1750606005054:total <- 0
1750606005054:## repeat while under, this should execute once more bringing it over
1750606005054:while(weight < targetWeight)
1750606005054:{
1750606005054:m <- sample(1:6, 1)
1750606005054:weight <- weight + weightVector[m]
1750606005055:colorDist[m] <- colorDist[m] + 1
1750606005055:total <- total + 1
1750606005056:}
1750606005056:cat(total, "M&M's for a weight of", weight, "\n")
1750606005056:for(x in 1:6)
1750606005056:{
1750606005056:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750606005056:}
1750606005057:}
1750606005057:makeOver(pcw, colors, 369.9)
1750606005069:makeOver(pncw, colors, 369.9)
1750606005072:makeOver(pbcw, colors, 360)
1750606047784:makeUnder <- function(weightVector, colorOrder, targetWeight)
1750606047784:{
1750606047784:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750606047784:weight <- 0
1750606047784:colorDist <- rep(0, 6)
1750606047784:total <- 0
1750606047784:## repeat while under,...
1750606047785:repeat
1750606047785:{
1750606047785:m <- sample(1:6, 1)
1750606047785:addedWeight <- weight + weightVector[m]
1750606047786:if(weight < targetWeight)
1750606047786:{
1750606047786:weight <- weight + addedWeight
1750606047787:}
1750606047787:else break
1750606047788:colorDist[m] <- colorDist[m] + 1
1750606047788:total <- total + 1
1750606047788:}
1750606047789:cat(total, "M&M's for a weight of", weight, "\n")
1750606047789:for(x in 1:6)
1750606047789:{
1750606047790:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750606047790:}
1750606047790:}
1750606047791:makeUnder(pcw, colors, 369.9)
1750606047802:makeUnder(pncw, colors, 369.9)
1750606047804:makeUnder(pbcw, colors, 360)
1750606209028:makeUnder <- function(weightVector, colorOrder, targetWeight)
1750606209028:{
1750606209028:## initialize weight, blank color tally, total tally (redundant but easy and inexpensive)
1750606209028:weight <- 0
1750606209028:colorDist <- rep(0, 6)
1750606209028:total <- 0
1750606209028:## repeat while under,...
1750606209028:repeat
1750606209028:{
1750606209028:m <- sample(1:6, 1)
1750606209029:## sentinel value
1750606209029:if(weight + weightVector[m] > targetWeight)
1750606209030:{break}
1750606209031:## didn't break, add weight, add color tally and total
1750606209031:weight <- weight + weightVector[m]
1750606209032:colorDist[m] <- colorDist[m] + 1
1750606209032:total <- total + 1
1750606209032:}
1750606209033:cat(total, "M&M's for a weight of", weight, "\n")
1750606209034:for(x in 1:6)
1750606209034:{
1750606209034:cat("Color", colorOrder[x], "was picked", colorDist[x], "times\n")
1750606209034:}
1750606209034:}
1750606209035:makeUnder(pcw, colors, 369.9)
1750606209049:makeUnder(pncw, colors, 369.9)
1750606209051:makeUnder(pbcw, colors, 360)
1750789089154:paint <- read.csv(file.choose(), header=T)
1750789116511:paint <- read.csv(file.choose(), header=T)
1750789121391:paint
1750789285575:plot(paint)
1750789356043:names(paint)
1750789604278:plot(paint$RA, paint$R1)
1750789713941:cor(paint$RA, paint$R1)
1750789758716:incp = which(is.na(paint$RA) |is.na(paint$R1))
1750789762507:incp
1750789847076:attach(paint) ## make it easier to work with here
1750789965860:colnames
1750789980476:colnames = c(names(paint))
1750789980477:colnames
1750790023565:for(c in colnames)
1750790023565:{
1750790023565:for(c2 in colnames)
1750790023565:cor(c,c2)
1750790023565:}
1750790078747:for(c in colnames)
1750790078747:{
1750790078747:for(c2 in colnames)
1750790078748:{
1750790078748:if(is.numeric(c) & is.numeric(c2))
1750790078748:{cor(c,c2)}
1750790078748:}
1750790078748:}
1750790113925:for(c in colnames)
1750790113925:{
1750790113925:for(c2 in colnames)
1750790113925:{
1750790113925:if(is.numeric(c) & is.numeric(c2))
1750790113925:{cor(paint$c,paint$c2)}
1750790113925:}
1750790113925:}
1750790352622:cols <- colnames(data)
1750790352622:# Iterate over column names
1750790352623:for (i in 1:length(cols))
1750790352623:{
1750790352623:for (j in (i+1):length(cols))
1750790352623:{
1750790352623:cor(cols[i], cols[j])
1750790352623:# Store the result in the correlations data frame
1750790352623:correlations <- rbind(correlations, data.frame(Column1 = col1, Column2 = col2, Correlation = cor_value))
1750790352623:}
1750790352624:}
1750790373406:# Iterate over column names
1750790373407:for (i in 1:length(cols))
1750790373407:{
1750790373407:for (j in (i+1):length(cols))
1750790373407:{
1750790373407:cor(cols[i], cols[j])
1750790373407:}
1750790373407:}
1750790386615:cols <- colnames(data)
1750790386615:# Iterate over column names
1750790386615:for (i in 1:length(cols))
1750790386615:{
1750790386615:for (j in (i+1):length(cols))
1750790386615:{
1750790386616:cor(cols[i], cols[j])
1750790386616:}
1750790386616:}
1750790403839:detatch(paint)
1750790429527:detatch("paint", unload=T)
1750790438118:detach("paint", unload=T)
1750790449530:paint$RA
1750790551982:names(paint)
1750790652208:detach("paint")
1750790668547:detach("paint", unload=T)
1750790672366:attach(paint)
1750790672368:detach("paint", unload=T)
1750790693471:paint$RA
1750790719285:plot(paint$RA, paint$R1)
1750790809904:col_names <- colnames(paint)
1750790809904:# Create an empty data frame to store correlations
1750790809905:correlations <- data.frame()
1750790809905:# Iterate over column names
1750790809905:for (i in 1:length(col_names)) {
1750790809905:for (j in (i+1):length(col_names)) {
1750790809905:col1 <- col_names[i]
1750790809905:col2 <- col_names[j]
1750790809905:cor_value <- cor(data[[col1]], data[[col2]], use = "complete.obs")
1750790809905:# Store the result in the correlations data frame
1750790809906:correlations <- rbind(correlations, data.frame(Column1 = col1, Column2 = col2, Correlation = cor_value))
1750790809906:}
1750790809906:}
1750790943577:for(col in columns)
1750790943577:{
1750790943577:for(col2 in columns)
1750790943577:{
1750790943577:if(is.numeric(col) & is.numeric(col2))
1750790943577:{
1750790943578:cor(col, col2)
1750790943578:}
1750790943578:}
1750790943578:}
1750790948371:columns <- colnames(paint)
1750790948371:for(col in columns)
1750790948371:{
1750790948371:for(col2 in columns)
1750790948371:{
1750790948372:if(is.numeric(col) & is.numeric(col2))
1750790948372:{
1750790948372:cor(col, col2)
1750790948372:}
1750790948372:}
1750790948372:}
1750790956776:columns <- colnames(paint)
1750790956776:for(col in columns)
1750790956776:{
1750790956777:for(col2 in columns)
1750790956777:{
1750790956777:if(is.numeric(col) & is.numeric(col2))
1750790956777:{
1750790956777:cor(col, col2)
1750790956777:}
1750790956777:}
1750790956777:}
1750790995913:columns <- colnames(paint)
1750790995914:for(col in columns)
1750790995914:{
1750790995914:for(col2 in columns)
1750790995914:{
1750790995914:if(is.numeric(col) & is.numeric(col2))
1750790995914:{
1750790995914:cat("Correlation between",col, "and", col2, "is: ",cor(col, col2), "\n")
1750790995914:}
1750790995914:}
1750790995914:}
1750791017052:for(col in columns)
1750791017053:{
1750791017053:for(col2 in columns)
1750791017053:{
1750791017053:if(is.numeric(col) & is.numeric(col2))
1750791017053:{
1750791017053:print("Correlation between",col, "and", col2, "is: ",cor(col, col2), "\n")
1750791017054:}
1750791017054:}
1750791017054:}
1750791112082:library(MASS)
1750791121470:library(MASS)
1750791146876:plot(paint$RA~paint$R1)
1750791269052:cor(columns,columns)
1750791327603:for(col in columns)
1750791327603:{
1750791327603:if(is.numeric(col))
1750791327603:{
1750791327603:for(col2 in columns)
1750791327603:{
1750791327603:if(is.numeric(col2))
1750791327603:{
1750791327604:cor(col,col2)
1750791327604:}
1750791327604:}
1750791327604:}
1750791327604:}
1750791337622:print(cor(col,col2))
1750791345620:columns <- colnames(paint)
1750791345620:for(col in columns)
1750791345620:{
1750791345620:if(is.numeric(col))
1750791345620:{
1750791345620:for(col2 in columns)
1750791345620:{
1750791345620:if(is.numeric(col2))
1750791345621:{
1750791345621:print(cor(col,col2))
1750791345621:}
1750791345621:}
1750791345621:}
1750791345621:}
1750791381334:for (col in columns) {
1750791381334:if (is.numeric(data[[col]])) {  # Check if the column is numeric
1750791381334:for (col2 in columns) {
1750791381334:if (is.numeric(data[[col2]]) && col != col2) {  # Check if the second column is numeric and not the same as the first
1750791381334:correlation_value <- cor(data[[col]], data[[col2]], use = "complete.obs")  # Calculate correlation
1750791381335:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750791381335:}
1750791381335:}
1750791381335:}
1750791381335:}
1750791462844:# Assuming 'data' is your data frame
1750791462844:# Ensure that 'data' is a data frame
1750791462844:if (!exists("paint") || !is.data.frame(paint)) {
1750791462844:stop("The 'data' object does not exist or is not a data frame.")
1750791462845:}
1750791462845:# Get the column names of your data frame
1750791462845:columns <- colnames(paint)
1750791462845:# Iterate over the columns
1750791462845:for (col in columns) {
1750791462845:if (is.numeric(data[[col]])) {  # Check if the column is numeric
1750791462845:for (col2 in columns) {
1750791462845:if (is.numeric(data[[col2]]) && col != col2) {  # Check if the second column is numeric and not the same as the first
1750791462845:correlation_value <- cor(data[[col]], data[[col2]], use = "complete.obs")  # Calculate correlation
1750791462846:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750791462846:}
1750791462846:}
1750791462846:}
1750791462846:}
1750791485446:# Assuming 'data' is your data frame
1750791485446:# Ensure that 'data' is a data frame
1750791485446:if (!exists("paint") || !is.data.frame(paint)) {
1750791485447:stop("The 'data' object does not exist or is not a data frame.")
1750791485447:}
1750791485447:# Get the column names of your data frame
1750791485447:columns <- colnames(paint)
1750791485447:# Iterate over the columns
1750791485447:for (col in columns) {
1750791485448:if (is.numeric(paint[[col]])) {  # Check if the column is numeric
1750791485448:for (col2 in columns) {
1750791485448:if (is.numeric(paint[[col2]]) && col != col2) {  # Check if the second column is numeric and not the same as the first
1750791485448:correlation_value <- cor(paint[[col]], paint[[col2]], use = "complete.obs")  # Calculate correlation
1750791485448:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750791485448:}
1750791485448:}
1750791485448:}
1750791485448:}
1750791729185:#####################################################################
1750791729185:led <- read.csv(file.choose(), header=T)
1750791763977:names(led)
1750792006870:plot(led$R, led$R.LED.on.)
1750792006889:plot(led$B, led$B.LED.on.)
1750792006908:plot(led$g, led$G.LED.on.)
1750792056367:cor(led$R, led$R.LED.on.)
1750792056367:cor(led$B, led$B.LED.on.)
1750792056367:cor(led$g, led$G.LED.on.)
1750792069582:cor(led$g, led$G.LED.on.)
1750792092744:cor(led$R, led$R.LED.on.)
1750792092744:cor(led$B, led$B.LED.on.)
1750792092745:cor(led$G, led$G.LED.on.)
1750792092745:cor(led$R, led$R.Red.)
1750792092745:cor(led$B, led$B.Blue.)
1750792092745:cor(led$G,led$G.Green.)
1750792109001:##################################################################
1750792109001:led <- read.csv(file.choose(), header=T)
1750792115653:plot(led$R, led$R.LED.on.)
1750792115672:plot(led$B, led$B.LED.on.)
1750792115691:plot(led$G, led$G.LED.on.)
1750792115710:plot(led$R, led$R.Red.)
1750792115728:plot(led$B, led$B.Blue.)
1750792115748:plot(led$G, led$G.Green.)
1750792115766:cor(led$R, led$R.LED.on.)
1750792115767:cor(led$B, led$B.LED.on.)
1750792115767:cor(led$G, led$G.LED.on.)
1750792115767:cor(led$R, led$R.Red.)
1750792115767:cor(led$B, led$B.Blue.)
1750792115767:cor(led$G,led$G.Green.)
1750792252411:lr(paint$RA, paint$R1)
1750792307449:k =  lm(paint$RA, paint$R1)
1750792335182:k =  lm(paint$RA~paint$R1, data=paint)
1750792335184:k
1750792421896:## iterate over the columns
1750792421896:for (col in columns)
1750792421896:{
1750792421896:if (is.numeric(paint[[col]]))
1750792421896:{  # Check if the column is numeric
1750792421896:for (col2 in columns)
1750792421896:{
1750792421896:if (is.numeric(paint[[col2]]) && col != col2)
1750792421896:{  # Check if the second column is numeric and not the same as the first
1750792421897:correlation_value <- cor(paint[[col]], paint[[col2]], use = "complete.obs")  # Calculate correlation
1750792421897:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750792421897:k =  lm(paint[[col]]~paint[[col2]], data=paint)
1750792421897:k
1750792421897:}
1750792421897:}
1750792421897:}
1750792421897:}
1750792532474:## ooh, I think he wants this, not ^^ that... shit this is gunna take more time than I got..
1750792532474:k =  lm(paint$RA~paint$R1, data=paint)
1750792532475:k
1750792595770:survey(paint)
1750792610385:print(paste("Correlation between", col, "and", col2, "is", correlation_value))
1750792613132:summary(paint)
1750856446450:#####################################################################
1750856446450:led <- read.csv(file.choose(), header=T)
1750856511371:########################
1750856511371:led <- read.csv(file.choose(), header=T)
1750856525163:plot(led$R, led$R.LED.on.)
1750856540730:library(MASS)
1750856540748:## idk if I need the library line in here. I wish I had time to play around...
1750856540749:paint <- read.csv(file.choose(), header=T)
1750856778823:## first part, use the RGB file
1750856778823:rgb = read.csv(file.choose(), header=T)
1750856942612:names(rgb
1750856942613:)
1750856965215:columns = names(rgb)
1750856965216:columns
1750857100351:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857105493:rr1
1750857168012:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857168014:summary(rr1)
1750857168027:plot(rgb$RA,rgb$R1)
1750857168084:abline(rr1, col = "red")
1750857241773:abline(rr1, col = "red")
1750857257054:## lm for the linear regression
1750857257054:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857257055:summary(rr1)
1750857257060:## see what it looks like
1750857257060:plot(rgb$RA,rgb$R1)
1750857257082:abline(rr1, col = "red")
1750857280765:# Sample data
1750857280765:your_data <- data.frame(x = c(1, 2, 3, 4, 5), y = c(2, 3, 5, 7, 11))
1750857280766:# Fit the model
1750857280766:model <- lm(y ~ x, data = your_data)
1750857280769:# Summary of the model
1750857280769:summary(model)
1750857280777:# Plot
1750857280777:plot(your_data$x, your_data$y)
1750857280809:abline(model, col = "red")
1750857297317:## lm for the linear regression
1750857297317:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857297319:summary(rr1)
1750857297324:## see what it looks like
1750857297325:plot(rgb$RA,rgb$R1)
1750857297346:abline(rr1, col = "red")
1750857320694:abline(rr1, col = "red")
1750857330262:abline(rr1, col = "blue")
1750857344798:abline(rr1, col = "red")
1750857414630:## lm for the linear regression
1750857414631:rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
1750857414634:summary(rr1)
1750857414640:## see what it looks like
1750857414640:plot(rgb$RA,rgb$R2)
1750857414659:abline(rr1, col = "red")
1750857440335:## lm for the linear regression
1750857440335:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857440336:summary(rr1)
1750857440342:## see what it looks like
1750857440342:plot(rgb$RA,rgb$R1)
1750857440364:abline(rr1, col = "red")
1750857440365:## lm for the linear regression
1750857440365:rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
1750857440366:summary(rr1)
1750857440370:## see what it looks like
1750857440371:plot(rgb$RA,rgb$R2)
1750857440392:abline(rr1, col = "red")
1750857440392:## lm for the linear regression
1750857440392:rr1 <- lm(rgb$R1~rgb$R2, data = rgb)
1750857440393:summary(rr1)
1750857440395:## see what it looks like
1750857440395:plot(rgb$R1,rgb$R2)
1750857440421:abline(rr1, col = "red")
1750857545887:## lm for the linear regression
1750857545887:rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
1750857545889:summary(rr1)
1750857545897:## see what it looks like
1750857545897:plot(rgb$RA,rgb$R1)
1750857545927:abline(rr1, col = "red")
1750857545927:## lm for the linear regression
1750857545927:rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
1750857545928:summary(rr1)
1750857545930:## see what it looks like
1750857545930:plot(rgb$RA,rgb$R2)
1750857545950:abline(rr2, col = "red")
1750857545950:## lm for the linear regression
1750857545950:r1r2 <- lm(rgb$R1~rgb$R2, data = rgb)
1750857545951:summary(rr1)
1750857545953:## see what it looks like
1750857545953:plot(rgb$R1,rgb$R2)
1750857545975:abline(r1r2, col = "red")
1750857693332:## lm for the linear regression
1750857693332:gg1 <- lm(rgb$GA~rgb$G1, data = rgb)
1750857693334:summary(gg1)
1750857693341:## see what it looks like
1750857693341:plot(rgb$GA,rgb$G1)
1750857693361:abline(gg1, col = "green")
1750857693361:## lm for the linear regression
1750857693361:gg2 <- lm(rgb$GA~rgb$G2, data = rgb)
1750857693362:summary(gg2)
1750857693365:## see what it looks like
1750857693365:plot(rgb$RA,rgb$R1)
1750857693384:abline(rr1, col = "green")
1750857693384:## lm for the linear regression
1750857693384:g1g2 <- lm(rgb$G1~rgb$G2, data = rgb)
1750857693385:summary(g1g2)
1750857693392:## see what it looks like
1750857693392:plot(rgb$G1,rgb$G2)
1750857693412:abline(g1g2, col = "green")
1750857860441:## lm for the linear regression
1750857860441:bb1 <- lm(rgb$BA~rgb$B1, data = rgb)
1750857860443:summary(bb1)
1750857860451:## see what it looks like
1750857860451:plot(rgb$BA,rgb$B1)
1750857860473:abline(bb1, col = "blue")
1750857860473:## lm for the linear regression
1750857860473:bb2 <- lm(rgb$BA~rgb$B2, data = rgb)
1750857860475:summary(bb2)
1750857860479:## see what it looks like
1750857860479:plot(rgb$BA,rgb$B2)
1750857860499:abline(bb2, col = "blue")
1750857860499:## lm for the linear regression
1750857860499:b1b2 <- lm(rgb$B1~rgb$B2, data = rgb)
1750857860500:summary(b1b2)
1750857860502:## see what it looks like
1750857860502:plot(rgb$B1,rgb$B2)
1750857860525:abline(b1b2, col = "red")
1750857871591:## lm for the linear regression
1750857871591:bb1 <- lm(rgb$BA~rgb$B1, data = rgb)
1750857871593:summary(bb1)
1750857871599:## see what it looks like
1750857871599:plot(rgb$BA,rgb$B1)
1750857871617:abline(bb1, col = "blue")
1750857871618:## lm for the linear regression
1750857871618:bb2 <- lm(rgb$BA~rgb$B2, data = rgb)
1750857871618:summary(bb2)
1750857871622:## see what it looks like
1750857871622:plot(rgb$BA,rgb$B2)
1750857871641:abline(bb2, col = "blue")
1750857871641:## lm for the linear regression
1750857871641:b1b2 <- lm(rgb$B1~rgb$B2, data = rgb)
1750857871642:summary(b1b2)
1750857871645:## see what it looks like
1750857871645:plot(rgb$B1,rgb$B2)
1750857871664:abline(b1b2, col = "blue")
1750858505140:polyRR1 <- lm(rgb$RA~poly(rgb$R1, 2), data = rgb)
1750858519761:plot(polyRR1)
1750858670497:lines(x_seq, predicted_y, col = "blue", lwd = 2)
1750858708061:polyRR1 <- lm(RA ~ poly(R1, 2), data = rgb)
1750858708063:# Plot the data points
1750858708063:plot(rgb$R1, rgb$RA, main = "Polynomial Regression Fit", xlab = "R1", ylab = "RA", pch = 19)
1750858708088:# Create a sequence of values for R1 to predict RA
1750858708088:x_seq <- seq(min(rgb$R1), max(rgb$R1), length.out = 100)
1750858708089:# Predict RA values using the polynomial regression model
1750858708089:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750858708090:# Add the polynomial fit to the plot
1750858708090:lines(x_seq, predicted_y, col = "blue", lwd = 2)
1750858920283:## polynomial regressions
1750858920283:## model <- lm(y ~ poly(x, degree), data)
1750858920283:polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)
1750858920286:## plot the points
1750858920286:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 19)
1750858920308:# Create a sequence of values for R1 to predict RA
1750858920308:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750858920308:# Predict RA values using the polynomial regression model
1750858920308:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750858966495:polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)
1750858973020:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 19)
1750858976576:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750858983762:# Predict RA values using the polynomial regression model
1750858983762:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq)
1750858988950:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750859001031:# Predict RA values using the polynomial regression model
1750859001031:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750859014206:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750859018338:predicted_y <- predict(polyRR1, newdata = data.frame(R1 = x_seq))
1750859030995:## polynomial regressions
1750859030995:## model <- lm(y ~ poly(x, degree), data)
1750859030996:polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)
1750859030998:## plot the points
1750859030998:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 19)
1750859031022:# Create a sequence of values for R1 to predict RA
1750859031022:x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)
1750859031023:# Predict RA values using the polynomial regression model
1750859031023:predicted_y <- predict(polyRR1, newdata = data.frame(RA = x_seq))
1750859031024:# Add the polynomial fit to the plot
1750859031024:lines(x_seq, predicted_y, col = "red", lwd = 2)
1750859607883:## plot the points
1750859607883:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 1)
1750859614804:## plot the points
1750859614805:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 2)
1750859619410:## plot the points
1750859619410:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 3)
1750859623136:## plot the points
1750859623136:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 4)
1750859627426:## plot the points
1750859627426:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 5)
1750859631913:## plot the points
1750859631913:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 6)
1750859636022:## plot the points
1750859636023:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 7)
1750859641354:## plot the points
1750859641357:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 8)
1750859646273:## plot the points
1750859646273:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 9)
1750859651555:## plot the points
1750859651555:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 10)
1750859655868:## plot the points
1750859655868:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 11)
1750859662037:## plot the points
1750859662037:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 12)
1750859666856:## plot the points
1750859666856:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 13)
1750859671165:## plot the points
1750859671165:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 14)
1750859680476:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 15)
1750859684217:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 16)
1750859690086:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 17)
1750859694357:plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 18)
1750859895879:## loop over the vectors in the clrs matrix thingy
1750859895880:for(color in clrs)
1750859895880:{
1750859895880:## set up the pairs of colors
1750859895880:one = c(color[1], color[2])
1750859895880:two = c(color[1], color[3])
1750859895880:thr = c(color[2], color[3])
1750859895880:pairs = c(one, two, thr) ## I feel like I'm going too many levels deep here
1750859895880:for(pair in pairs)
1750859895880:{
1750859895880:## do the poly-fit
1750859895880:poly <- lm(pair[1] ~ poly(pair[2], 2), data = rgb)
1750859895881:## plot the poitns
1750859895881:plot(rgb[[pair[1]]], rgb[[pair[2]]], main = cat(pair[1], " ~ ", pair[2]),
1750859895881:xlab = pair[1], ylab = pair[2], pch = 18)
1750859895881:## sequence a bunch of points along the x
1750859895882:x_seq <- seq(min(rgb[[pair[1]]]), max(rgb[[pair[1]]]), length.out = 100)
1750859895882:## fit the curve
1750859895882:predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))
1750859988444:## Set the colors and make a vector to iterate over those vectors
1750859988444:reds = c('RA', 'R1', 'R2')
1750859988444:grns = c('GA', 'G1', 'G2')
1750859988444:blus = c('BA', 'B1', 'B2')
1750859988444:clrs = list(reds, grns, blus)  # Use a list to hold color groups
1750859988444:## Loop over the vectors in the clrs list
1750859988445:for(color_group in clrs) {
1750859988445:## Set up the pairs of colors
1750859988445:one = c(color_group[1], color_group[2])
1750859988445:two = c(color_group[1], color_group[3])
1750859988445:thr = c(color_group[2], color_group[3])
1750859988445:pairs = list(one, two, thr)  # Use a list to store pairs
1750859988445:for(pair in pairs) {
1750859988445:## Do the polynomial fit
1750859988445:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)
1750859988446:## Plot the points
1750859988446:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750859988446:xlab = pair[2], ylab = pair[1], pch = 18)
1750859988447:## Sequence a bunch of points along the x
1750859988447:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750859988447:## Fit the curve
1750859988447:predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))
1750860056698:# Define color groups
1750860056698:reds = c('RA', 'R1', 'R2')
1750860056698:grns = c('GA', 'G1', 'G2')
1750860056698:blus = c('BA', 'B1', 'B2')
1750860056698:clrs = list(reds, grns, blus)  # List to hold color groups
1750860056698:# Loop over the color groups
1750860056699:for(color_group in clrs) {
1750860056699:# Set up pairs of colors
1750860056699:one = c(color_group[1], color_group[2])
1750860056699:two = c(color_group[1], color_group[3])
1750860056699:thr = c(color_group[2], color_group[3])
1750860056699:pairs = list(one, two, thr)  # Store pairs in a list
1750860056700:for(pair in pairs) {
1750860056700:# Perform polynomial fit
1750860056700:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)
1750860056700:# Plot the points
1750860056700:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860056701:xlab = pair[2], ylab = pair[1], pch = 18)
1750860056701:# Generate sequence of x values for prediction
1750860056701:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860056701:# Predict y values based on polynomial fit
1750860056701:predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))
1750860102014:# Define color groups
1750860102014:reds = c('RA', 'R1', 'R2')
1750860102014:grns = c('GA', 'G1', 'G2')
1750860102014:blus = c('BA', 'B1', 'B2')
1750860102015:clrs = list(reds, grns, blus)  # List to hold color groups
1750860102015:# Loop over the color groups
1750860102015:for(color_group in clrs) {
1750860102016:# Set up pairs of colors
1750860102016:one = c(color_group[1], color_group[2])
1750860102016:two = c(color_group[1], color_group[3])
1750860102016:thr = c(color_group[2], color_group[3])
1750860102016:pairs = list(one, two, thr)  # Store pairs in a list
1750860102017:for(pair in pairs) {
1750860102017:# Perform polynomial fit
1750860102017:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)
1750860102018:# Plot the points
1750860102018:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860102018:xlab = pair[2], ylab = pair[1], pch = 18)
1750860102018:# Generate sequence of x values for prediction
1750860102019:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860102019:# Create a data frame for prediction with named columns
1750860102019:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750860102019:# Predict y values based on polynomial fit
1750860102019:predicted_y <- predict(poly, newdata = new_data)
1750860102020:# Set color based on the group
1750860102020:if (all(color_group == reds)) {
1750860102020:use <- "red"
1750860102020:} else if (all(color_group == grns)) {
1750860102020:use <- "green"
1750860102021:} else {
1750860102021:use <- "blue"
1750860102021:}
1750860102021:# Add polynomial line to the plot
1750860102021:lines(x_seq, predicted_y, col = use, lwd = 2)
1750860102022:}
1750860102022:}
1750860451225:# Define color groups
1750860451225:reds = c('RA', 'R1', 'R2')
1750860451225:grns = c('GA', 'G1', 'G2')
1750860451226:blus = c('BA', 'B1', 'B2')
1750860451226:clrs = list(reds, grns, blus)  # List to hold color groups
1750860451226:# Loop over the color groups
1750860451226:for(color_group in clrs) {
1750860451226:# Set up pairs of colors
1750860451226:one = c(color_group[1], color_group[2])
1750860451226:two = c(color_group[1], color_group[3])
1750860451226:thr = c(color_group[2], color_group[3])
1750860451227:pairs = list(one, two, thr)  # Store pairs in a list
1750860451227:for(pair in pairs) {
1750860451227:# Perform logistic regression
1750860451227:logit_model <- glm(as.formula(paste(pair[1], "~", pair[2])), data = rgb, family = binomial)
1750860451228:# Plot the points
1750860451228:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860451228:xlab = pair[2], ylab = pair[1], pch = 18)
1750860451228:# Generate a sequence of x values for prediction
1750860451228:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860451228:# Create a data frame for prediction
1750860451229:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750860451229:# Predict probabilities using the logistic model
1750860451229:predicted_probs <- predict(logit_model, newdata = new_data, type = "response")
1750860451229:# Set color based on the group
1750860451230:if (all(color_group == reds)) {
1750860451230:use <- "red"
1750860451230:} else if (all(color_group == grns)) {
1750860451230:use <- "green"
1750860451230:} else {
1750860451230:use <- "blue"
1750860451231:}
1750860451231:# Add predicted probabilities as a line to the plot
1750860451231:lines(x_seq, predicted_probs, col = use, lwd = 2)
1750860451231:}
1750860451231:}
1750860521505:# Define color groups
1750860521505:reds = c('RA_binary', 'R1', 'R2')  # Ensure RA is binary
1750860521505:grns = c('GA_binary', 'G1', 'G2')   # Ensure GA is binary
1750860521505:blus = c('BA_binary', 'B1', 'B2')   # Ensure BA is binary
1750860521505:clrs = list(reds, grns, blus)  # List to hold color groups
1750860521506:# Loop over the color groups
1750860521506:for(color_group in clrs) {
1750860521506:# Set up pairs of colors
1750860521506:one = c(color_group[1], color_group[2])
1750860521506:two = c(color_group[1], color_group[3])
1750860521506:thr = c(color_group[2], color_group[3])
1750860521506:pairs = list(one, two, thr)  # Store pairs in a list
1750860521506:for(pair in pairs) {
1750860521507:# Perform logistic regression
1750860521507:logit_model <- glm(as.formula(paste(pair[1], "~", pair[2])), data = rgb, family = binomial)
1750860521507:# Plot the points
1750860521507:plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750860521508:xlab = pair[2], ylab = pair[1], pch = 18)
1750860521508:# Generate a sequence of x values for prediction
1750860521508:x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)
1750860521509:# Create a data frame for prediction
1750860521509:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750860521509:# Predict probabilities using the logistic model
1750860521509:predicted_probs <- predict(logit_model, newdata = new_data, type = "response")
1750860521510:# Set color based on the group
1750860521510:if (all(color_group == reds)) {
1750860521510:use <- "red"
1750860521511:} else if (all(color_group == grns)) {
1750860521511:use <- "green"
1750860521511:} else {
1750860521511:use <- "blue"
1750860521512:}
1750860521512:# Add predicted probabilities as a line to the plot
1750860521512:lines(x_seq, predicted_probs, col = use, lwd = 2)
1750860521513:}
1750860521513:}
1750861281058:## use color calibration file
1750861281058:clrz = read.csv(file.choose())
1750861297683:names(clrz)
1750944793336:#################################################################################
1750944793336:## use color calibration file
1750944793336:clrz = read.csv(file.choose())
1750944802765:## correlate from R -> R.LED.On or R -> R.RED. or R.LED.on -> R.RED.?
1750944809171:names(clrz)
1750944826121:clr = clrz
1750944831360:names(clr)
1750945646795:## lm for the linear regression
1750945646795:rred <- lm(clr$R~clr$R.RED., data = clr)
1750945658679:## use color calibration file
1750945658679:clr <- read.csv(file.choose())
1750945665996:## correlate from C.LED.on. -> C.CLR.
1750945665997:## from ACTUAL to the COLORED light, and from LED to the appropriate color...
1750945665997:## ... (hardest part in this is figuring out what that means)
1750945665997:## R ~ R.RED. && R ~ R.LED.on.
1750945665997:## lm for the linear regression
1750945665997:rred <- lm(clr$R~clr$R.RED., data = clr)
1750945735829:rred <- lm(clr$R~clr$R.Red., data = clr)
1750945741426:summary(rred)
1750945785119:plot(clr$R, clr$R.Red.)
1750945788627:abline(rred,col = "red")
1750945873166:bblu <- lm(clr$B~clr$B.Blue., data = clr)
1750945873167:summary(bblu)
1750945873173:plot(clr$B, clr$B.Blue.)
1750945873196:abline(bblu, col="blue")
1750945887817:3
1750945971001:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750945971002:summary(ggrn)
1750945971010:plot(clr$G, clr$G.Green.)
1750945971030:abline(ggrn, col = 'green')
1750945989713:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750945989715:summary(ggrn)
1750945989720:plot(clr$G.Green., clr$G)
1750945989740:abline(ggrn, col = 'green')
1750946015360:## same as above, really
1750946015360:rred <- lm(clr$R~clr$R.Red., data = clr)
1750946015362:summary(rred)
1750946015367:plot(clr$R.Red., clr$R)
1750946015391:abline(rred,col = "red")
1750946015392:bblu <- lm(clr$B~clr$B.Blue., data = clr)
1750946015393:summary(bblu)
1750946015397:plot(clr$B.Blue., clr$B)
1750946015418:abline
1750946015419:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750946015419:summary(ggrn)
1750946015422:plot(clr$G.Green., clr$G)
1750946015447:abline(ggrn, col = 'green')
1750946046691:abline(bblu, col = "blue")
1750946289138:## and the LED ~ color
1750946289138:## same as above, really
1750946289138:rred <- lm(clr$R~clr$R.LED.on., data = clr)
1750946289139:summary(rred)
1750946289144:plot(clr$R.Red., clr$R)
1750946289173:abline(rred,col = "red")
1750946289174:bblu <- lm(clr$B~clr$B.LED.on., data = clr)
1750946289175:summary(bblu)
1750946289178:plot(clr$B.Blue., clr$B)
1750946289204:abline(bblu, col = "blue")
1750946289205:ggrn <- lm(clr$G~clr$G.LED.on., data = clr)
1750946289206:summary(ggrn)
1750946289210:plot(clr$G.Green., clr$G)
1750946289244:abline(ggrn, col = 'green')
1750946382672:## same as above, really
1750946382672:rred <- lm(clr$R~clr$R.Red., data = clr)
1750946382674:summary(rred)
1750946382679:plot(clr$R.Red., clr$R)
1750946382700:abline(rred,col = "red")
1750946382700:bblu <- lm(clr$B~clr$B.Blue., data = clr)
1750946382701:summary(bblu)
1750946382705:plot(clr$B.Blue., clr$B)
1750946382727:abline(bblu, col = "blue")
1750946382727:ggrn <- lm(clr$G~clr$G.Green., data = clr)
1750946382728:summary(ggrn)
1750946382730:plot(clr$G.Green., clr$G)
1750946382761:abline(ggrn, col = 'green')
1750946382761:## and the LED ~ color
1750946382761:## same as above, really
1750946382762:rled <- lm(clr$R~clr$R.LED.on., data = clr)
1750946382763:summary(rled)
1750946382766:plot(clr$R.LED.on., clr$R)
1750946382808:abline(rled,col = "red")
1750946382808:bled <- lm(clr$B~clr$B.LED.on., data = clr)
1750946382809:summary(bled)
1750946382813:plot(clr$B.LED.on., clr$B)
1750946382849:abline(bled, col = "blue")
1750946382850:gled <- lm(clr$G~clr$G.LED.on., data = clr)
1750946382851:summary(gled)
1750946382855:plot(clr$G.LED.on., clr$G)
1750946382877:abline(gled, col = 'green')
1750946578646:fitVals <- fitted(gled)
1750946578646:residuals <- residuals(gled)
1750946578647:plot( fitVals, residuals)
1750946578670:abline(h = 0, col = "magenta")
1750946651193:summary(gled)$r.squared
1750946659851:summary(gled)
1750947216421:# Define color groups
1750947216421:reds = c('R', 'R.LED.on.', 'R.Red.')
1750947216421:grns = c('G', 'G.LED.on.', 'G.Green.')
1750947216421:blus = c('B', 'B.LED.on.', 'B.Blue.')
1750947216421:clrs = list(reds, grns, blus)  # List to hold color groups
1750947216422:# Loop over the color groups
1750947216422:for(color_group in clrs) {
1750947216422:# Set up pairs of colors
1750947216422:one = c(color_group[1], color_group[2])
1750947216422:two = c(color_group[1], color_group[3])
1750947216422:thr = c(color_group[2], color_group[3])
1750947216422:pairs = list(one, two, thr)  # Store pairs in a list
1750947216422:for(pair in pairs) {
1750947216422:# Perform polynomial fit
1750947216423:poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = clr)
1750947216423:# Plot the points
1750947216423:plot(clr[[pair[2]]], clr[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
1750947216423:xlab = pair[2], ylab = pair[1], pch = 18)
1750947216424:# Generate sequence of x values for prediction
1750947216424:x_seq <- seq(min(clr[[pair[2]]]), max(clr[[pair[2]]]), length.out = 100)
1750947216424:# Create a data frame for prediction with named columns
1750947216424:new_data <- data.frame(setNames(list(x_seq), pair[2]))
1750947216425:# Predict y values based on polynomial fit
1750947216425:predicted_y <- predict(poly, newdata = new_data)
1750947216425:# Set color based on the group
1750947216425:if (all(color_group == reds)) {
1750947216425:use <- "red"
1750947216426:} else if (all(color_group == grns)) {
1750947216426:use <- "green"
1750947216426:} else {
1750947216426:use <- "blue"
1750947216427:}
1750947216427:# Add polynomial line to the plot
1750947216427:lines(x_seq, predicted_y, col = use, lwd = 2)
1750947216428:}
1750947216428:}
1750947397393:## used boob-cancer thingy
1750947397393:B <- read.csv(file.choose())
1750947431888:names(B)
1750947550268:unique(B$BenignMalignant)
1750947661128:## BenignMalignant has two values, 2 & 4
1750947661128:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750947661128:columns <- names(B)
1750947666145:## BenignMalignant has two values, 2 & 4
1750947666145:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750947666145:columns <- names(B)
1750947670463:columns <- names(B)
1750947674707:columns[-1, -11]
1750947777537:columns[-c(1,11)]
1750948005029:B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750948015862:str(B)
1750948607641:str(B)
1750948607655:for(col in columns)
1750948607655:{
1750948607656:ben <- B$BenignMalignant
1750948607656:## create the plots
1750948607656:lin <- lm(ben ~ B[[col]], data = B)
1750948607656:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750948607656:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750948607657:newD <- data.frame(setNames(list(xseq), col))
1750948607657:prdy <- predict(poly, newdata = newD)
1750948607657:lines(xseq, prdy, col = "magenta", lwd = 2)
1750948607657:}
1750959383742:## used boob-cancer thingy
1750959383742:B <- read.csv(file.choose()) ## (cause B looks like uneven, sideways boobs)
1750959389540:names(B)
1750959389541:## [1] "ID"                   "ClumpThickness"       "CellSizeUniformity"   "CellShapeUniformity"
1750959389541:## [5] "MarginalAdhesion"     "SingleEpithelialCell" "BareNuclei"           "BlandChromatin"
1750959389541:## [9] "NormalNucleoli"       "Mitoses"              "BenignMalignant"
1750959389541:## BenignMalignant has two values, 2 & 4
1750959389541:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959389541:columns <- names(B)
1750959389542:## a little syntax help from ecosia chat
1750959389542:columns[-c(1,11)]
1750959389543:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959389543:B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959389543:## doublecheck the structure took
1750959389544:str(B)
1750959389566:for(col in columns)
1750959389566:{
1750959389566:ben <- B$BenignMalignant
1750959389566:## create the plots
1750959389567:lin <- lm(ben ~ B[[col]], data = B)
1750959389567:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959389567:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959389567:newD <- data.frame(setNames(list(xseq), col))
1750959389567:prdy <- predict(poly, newdata = newD)
1750959389567:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959389567:}
1750959424561:## BenignMalignant has two values, 2 & 4
1750959424562:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959424562:columns <- names(B)
1750959424562:## a little syntax help from ecosia chat
1750959424562:columns[-c(1,11)]
1750959424563:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959424563:#B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959424563:## doublecheck the structure took
1750959424564:#str(B)
1750959424564:for(col in columns)
1750959424565:{
1750959424565:ben <- B$BenignMalignant
1750959424565:## create the plots
1750959424568:lin <- lm(ben ~ B[[col]], data = B)
1750959424569:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959424569:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959424569:newD <- data.frame(setNames(list(xseq), col))
1750959424569:prdy <- predict(poly, newdata = newD)
1750959424570:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959424570:}
1750959426990:## BenignMalignant has two values, 2 & 4
1750959426990:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959426990:columns <- names(B)
1750959426990:## a little syntax help from ecosia chat
1750959426991:columns[-c(1,11)]
1750959426992:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959426992:#B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959426993:## doublecheck the structure took
1750959426993:#str(B)
1750959426994:for(col in columns)
1750959426994:{
1750959426994:ben <- B$BenignMalignant
1750959426994:## create the plots
1750959426995:lin <- lm(ben ~ B[[col]], data = B)
1750959426995:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959426995:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959426995:newD <- data.frame(setNames(list(xseq), col))
1750959426996:prdy <- predict(poly, newdata = newD)
1750959426996:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959426996:}
1750959432671:# used boob-cancer thingy
1750959432671:B <- read.csv(file.choose()) ## (cause B looks like uneven, sideways boobs)
1750959436494:names(B)
1750959436494:##
1750959442356:## BenignMalignant has two values, 2 & 4
1750959442357:## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
1750959442357:columns <- names(B)
1750959442357:## a little syntax help from ecosia chat
1750959442357:columns[-c(1,11)]
1750959442359:## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
1750959442361:#B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
1750959442361:## doublecheck the structure took
1750959442363:#str(B)
1750959442364:for(col in columns)
1750959442364:{
1750959442364:ben <- B$BenignMalignant
1750959442365:## create the plots
1750959442365:lin <- lm(ben ~ B[[col]], data = B)
1750959442365:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959442365:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959442366:newD <- data.frame(setNames(list(xseq), col))
1750959442366:prdy <- predict(poly, newdata = newD)
1750959442367:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959442367:}
1750959476956:for(col in columns)
1750959476956:{
1750959476956:ben <- B$BenignMalignant
1750959476956:## create the plots
1750959476956:lin <- lm(ben ~ B[[col]], data = B)
1750959476956:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959476957:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959476957:newD <- data.frame(setNames(list(xseq), col))
1750959476957:#prdy <- predict(poly, newdata = newD)
1750959476959:lines(xseq, prdy, col = "magenta", lwd = 2)
1750959476959:}
1750959490455:#lines(xseq, prdy, col = "magenta", lwd = 2)
1750959490455:}
1750959498493:for(col in columns)
1750959498493:{
1750959498493:ben <- B$BenignMalignant
1750959498493:## create the plots
1750959498493:lin <- lm(ben ~ B[[col]], data = B)
1750959498493:ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959498494:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959498494:newD <- data.frame(setNames(list(xseq), col))
1750959498494:#prdy <- predict(poly, newdata = newD)
1750959498494:#lines(xseq, prdy, col = "magenta", lwd = 2)
1750959498494:}
1750959532904:for(col in columns)
1750959532904:{
1750959532904:ben <- B$BenignMalignant
1750959532904:## create the plots
1750959532904:lin <- lm(ben ~ B[[col]], data = B)
1750959532904:#ply <- lm(ben ~ poly(B[[col]], 2), data = B)
1750959532905:xseq <- seq( min(B[[col]]), max(B[[col]]), length.out = 100)
1750959532905:newD <- data.frame(setNames(list(xseq), col))
1750959532905:#prdy <- predict(poly, newdata = newD)
1750959532905:#lines(xseq, prdy, col = "magenta", lwd = 2)
1750959532906:}
1750960346113:names(B)
1750960503494:library(ggplot)
1750960510786:library(ggplot2)
1750960526195:library(dplyr)
1750960917124:install.packages(ggplot2)
1750960922509:install.packages("ggplot2")
1750961270977:# Summary statistics
1750961270977:B %>%
1750961270978:group_by(BenignMalignant) %>%
1750961270978:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961283905:# Summary statistics
1750961283905:data %>%
1750961283905:group_by(BenignMalignant) %>%
1750961283905:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961305699:install.packages("dplyr")
1750961325332:# Summary statistics
1750961325332:data %>%
1750961325333:group_by(BenignMalignant) %>%
1750961325333:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961340168:# Summary statistics
1750961340168:B %>%
1750961340168:group_by(BenignMalignant) %>%
1750961340168:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961367815:correlation_matrix <- cor(B[,-1], use = "complete.obs")  # Exclude ID column
1750961367816:print(correlation_matrix)
1750961414027:model <- glm(BenignMalignant ~ ., data = data, family = binomial)
1750961424155:model <- glm(BenignMalignant ~ ., data = B, family = binomial)
1750961460908:library(party)
1750961478969:install.packages("party")
1750961483413:library(party)
1750961484728:# Fit a conditional inference tree
1750961484728:ctree_model <- ctree(BenignMalignant ~ ., data = data)
1750961498556:# Fit a conditional inference tree
1750961498556:ctree_model <- ctree(BenignMalignant ~ ., data = B)
1750961498846:plot(ctree_model)
1750961570343:install.packages("randomForest")
1750961571223:library(randomForest)
1750961571234:# Fit the Random Forest model
1750961571235:rf_model <- randomForest(BenignMalignant ~ ., data = data, importance = TRUE)
<<<<<<< HEAD
1751981137122:q()
1751981194616:library(igraph)
1751981201871:install.packages(igraph)
1751981209387:install.packages("igraph")
1751981218368:library(igraph)
1751981223001:library('igraph')
1751981232651:library(igraph)
1751981286957:g<- graph(c(1,2, 1,3, 2,3, 3,5))
1751981303580:g<- graph(c(1,2, 1,3, 2,3, 3,5) n =5)
1751981314994:g<- graph(c(1,2, 1,3, 2,3, 3,5), n=5)
1751981332327:library(igraph)
1751981367291:library(igraph)
1751981406659:library(igraph)
1751981462593:ldconfig -p | grep libglpk
1751981476496:install.packages("igraph")
1751981510024:library(igraph)
1751981556056:igraph
1751981561407:help(igraph)
1751981567615:??igraph
1751981653650:system("ldconfig -p | grep libglpk")
1751981723914:install.packages("Rcpp")
1751982199533:install.packages("igraph")
1751982207505:library(igraph)
1751982210532:library("igraph")
1751982652394:g <- make_graph(c(1,2, 1,3, 2,3, 3,5), n=5))
1751982668351:g<- make_graph(c(1,2, 1,3, 2,3, 3,5), n=5)
1752001560834:install.packages("igraph")
1752001562616:library(igraph)
1752088343117:install.packages("igraph")
1752088344571:library(igraph)
1752088424507:flights <- read.csv(file.choose(), header=true)
1752088436863:flights <- read.csv(file.choose(), header=TRUE)
1752088477992:g <- graph_from_data_frame(flights, directed = TRUE)
1752088501651:View(flights)
1752088565264:install.packages(c("raster", "rgdal", "rasterVis", "profvis"))
1752088618753:library(raster)
1752088629889:library(rgdal)
1752088637042:library(rasterVis)
1752156701464:install.packages(c("ggmap", "sp", "randomcoloR", "sf", "shapefiles", "lwgeom"))
1752156794701:library(ggmap)
1752156795644:library(sp)
1752156795877:library(sf)
1752156818837:isntall.packages("sf")
1752156831715:install.packages("sf")
1752156856692:library(sf)
1752238754521:install.packages(c("ggmap", "sp", "randomcoloR", "sf", "shapefiles", "lwgeom"))
1752238758077:library(ggmap)
1752238758723:library(sp)
1752238758856:library(sf)
1752238854417:library(randomcoloR)
1752238854535:library(shapefiles)
1752238854548:library(lwgeom)
1752238864009:source("/workspaces/r_dev_container/shapefileProcessing(lecture).R")
1752238869216:install.packages(c("ggmap", "sp", "randomcoloR", "sf", "shapefiles", "lwgeom"))
1752760871477:install.libraries("ggmap")
1752760904431:install.packages("ggmap")
1752760917810:install.packages("sp")
1752760924757:install.packages("sf")
1752760931643:install.packages("randomcoloR") # meh
1752760935098:install.packages("shapfiles")
1752760950075:install.packages("shapefiles")
1752760955035:install.packages("lwgeom")
1752760989896:library(ggmap)
1752761006518:library(sp)
1752761009800:library(sf)
1752761015898:library(randomcoloR)
1752761017195:library(shapefiles)
1752761028789:library(lwgeom)
1752761606956:hscsv <- read.csv("Data Files/MaineHighSchools.csv") ## header = TRUE default
1752761620345:names(hscsv)
1752761689368:hscsv[1]['Mailing.Address']
1752761700681:hscsv['Mailing.Address'][1]
1752761716745:hscsv['Mailing.Address'][2]
1752761773206:hscsv[1,'Mailing.Address']
1752762193259:for (i in 1:length(hscsv))
1752762193259:{ hscsv[i, "Geo.Code.This"] <- cat(hscsv[i,"Mailing.Address"],", USA", sep="") }
1752762324662:## add the ",USA" just in case?
1752762324662:hscsv$Geo.Code.This <- paste(hscsv$Mailing.Address, ", USA", sep = "")
1752762344060:hscsv[1,'Geo.Code.This']
=======
1750961614876:# Fit the Random Forest model
1750961614876:rf_model <- randomForest(BenignMalignant ~ ., data = B, importance = TRUE)
1750961615653:print(importance(rf_model))
1750961662854:install.packages("dplyr", "ggplot2")
1750961735504:# Convert BenignMalignant to a factor for better visualization
1750961735504:B$BenignMalignant <- as.factor(B$BenignMalignant)
1750961735505:# Summary statistics
1750961735505:B %>%
1750961735505:group_by(BenignMalignant) %>%
1750961735505:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961781214:# Summary statistics
1750961781214:summary_stats <- B %>%
1750961781214:group_by(BenignMalignant) %>%
1750961781214:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961799878:install.packages("dplyr")
1750961819121:# Summary statistics
1750961819121:summary_stats <- B %>%
1750961819121:group_by(BenignMalignant) %>%
1750961819121:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961864653:library(magrittr)  # Explicitly load magrittr for the pipe operator
1750961886976:# Summary statistics
1750961886976:summary_stats <- B %>%
1750961886976:group_by(BenignMalignant) %>%
1750961886976:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961901417:# Summary statistics
1750961901417:summary_stats <- B %>%
1750961901417:group_by(BenignMalignant) %>%
1750961901417:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961996651:# Load required libraries
1750961996651:library(dplyr)
1750961997331:library(magrittr)  # Load magrittr for the pipe operator
1750961997331:library(ggplot2)   # Load ggplot2 for visualization
1750961997477:# Convert BenignMalignant to a factor for better visualization
1750961997477:B$BenignMalignant <- as.factor(B$BenignMalignant)
1750961997478:# Summary statistics
1750961997478:summary_stats <- B %>%
1750961997478:group_by(BenignMalignant) %>%
1750961997478:summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE))
1750961997618:print(summary_stats)
1750961997649:# Boxplots for visual comparison
1750961997649:ggplot(B, aes(x = BenignMalignant, y = ClumpThickness)) +
1750961997649:geom_boxplot() +
1750961997649:labs(title = "Clump Thickness by Tumor Type")
1750962574069:library(party)
1750962578035:# Fit a conditional inference tree
1750962578035:ctree_model <- ctree(BenignMalignant ~ ., data = data)
1750962586124:# Fit a conditional inference tree
1750962586124:ctree_model <- ctree(BenignMalignant ~ ., data = B)
1750962586138:plot(ctree_model)
>>>>>>> e3b0892 (A7?)
1753035938234:install.packages("rgdal")                             ## fail
1753035943820:library(ggmap)                                        ## google says 'please site'
1753035945030:library(sp)                                           ## good
1753035947537:library(sf)                                           ## not so good
1753035951403:library(randomcoloR)                                  ## good
1753035953145:library(shapefiles)                                   ## maybe not so good?
1753035954545:library(lwgeom)                                       ## not so good... 3/6, 4/6, I've seen worse
1753035957226:library(purrr)                                        ## no
1753035971421:library(purrr)                                        ## yes?
1753035973209:library(rgdal)                                        ## nooo 3/8... =[
1753189229362:packageVersion("roxygen2")
1753189239089:install.packages("roxygen2")
1753189253135:packageVersion("roxygen2")
1753191640692:text <- readLines("../textFiles/TestText.txt")
1753191689447:text <-readLines(file.choose())
1753191761250:text <-supressWarnings(readLines(file.choose()))
1753191772835:text <-suppressWarnings(readLines(file.choose()))
1753191781832:print(text)
1753191871236:getwd()
1753192291736:## read the file
1753192291736:if(file.exists(path)){ redlines <- readLines(path) }
1753192297442:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753192297442:## read the file
1753192297442:if(file.exists(path)){ redlines <- readLines(path) }
1753192297442:else{ stop("Shit... something fucked up.") }
1753192988617:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753192988617:## read the file
1753192988617:if(file.exists(path)){
1753192988617:redlines <- readLines(path)
1753192988617:} else {
1753192988617:stop("Shit... something fucked up.")
1753192988618:} ## gawdy... I hate the unaligned brackets. ugly ugly ugly
1753192994683:## get the filepath from
1753192994684:## HapaxLegomena/R/TestText.R -> HapaxLegomena/textFiles/TestText.txt
1753192994684:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753193007656:<- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753193016359:## read the file
1753193016359:if(file.exists(path)){
1753193016359:redlines = readLines(path)
1753193016359:} else {
1753193016359:stop("Shit... something fucked up.")
1753193016359:} ## gawdy... I hate the unaligned brackets. ugly ugly ugly
1753193597787:help(HapaxLegomena)
1753193897439:timesTwo(c(3,4,23))
1753193909132:library(HapaxLegomena)
1753193919423:install.packages("HapaxLegomena")
1753193944636:install.packages("finalProject")
1753208012456:install.packages("HapaxLegomena")
1753208025322:path <- system.file("textFiles", "TestText.txt", package="HapaxLegomena")
1753208025322:## read the file
1753208025323:if(file.exists(path)){
1753208025323:redlines = readLines(path)
1753208025323:} else {
1753208025323:stop("Shit... something fucked up.")
1753208025323:} ## gawdy... I hate the unaligned brackets. ugly ugly ugly
1753209000465:library(devtools)
1753209012927:install.packages("devtools")
1753209042629:library(devtools)
1753209100307:use_package("ggplot")
1753209124881:use_package("ggplot")
1753209138642:use_package("ggplot")
1753209185277:use_package("ggplot")
1753209226525:install.packages("qgplot")
1753209274782:install.packages('qplot')
1753209293726:use_packages('qplot')
1753209305867:use_package('qplot')
1753210952346:use_data(TestText.txt)
1753211050723:text <- file.choose()
1753211062654:use_data(text)
1753211096266:TexTesT <- file.choose()
1753211110983:use_data(TexTesT)
1753211289579:use_r('TexTesT')
1753211692154:data("TexTesT")
1753211719039:rm(TextTesT)
1753211726931:rm("TexTesT")
1753211734664:rm("text")
1753211741654:data("TexTesT")
1753211759948:data("someText")
1753211767931:textFiles("someText")
1753211817988:?TexTest
1753211827417:?TexTesT
1753211848196:??TexTesT’
1753212419396:use_vignette("HapaxLegomena", title="Hapax Legomena")
1753213437858:use_r(basicButDependedOn)
1753213453746:use_r("basicButDependedOn")
1753213517395:use_testthat()
1753213570772:use_test()
1753213779215:library(testthat)
1753213816558:devtools::load_all("~/finalProject/HapaxLegomena")
1753275230889:library(testthat)
1753275230914:library(HapaxLegomena)
1753275285558:library(testthat)
1753275285558:library(HapaxLegomena)
1753275301557:install.packages("HapaxLegomena")
1753275344449:\
1753275350024:library(testthat)
1753275350024:library(HapaxLegomena)
1753275350025:test_check("HapaxLegomena")
1753275725298:library(devtools)
1753275737202:?devtools
1753275944674:use_r("counter")
1753276861956:3+4
1753278239134:# Example text
1753278239134:text <- "Hello, world! This is a test.  !  And here is a punctuated sentence. "
1753278239134:# Remove punctuation preceded or followed by a space
1753278239134:cleaned_text <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", "", text)
1753278239135:print(cleaned_text)  # Output: "Hello world This is a test. And here is a punctuated sentence."
1753292684336:install.packages("ggplot2")
1753295408386:counter <- function(textIn = chooseFile, keepHyphens = TRUE, keepContractions = TRUE)
1753295408386:{
1753295408386:## initialize the named vector (c(word = #count#))
1753295408386:stats = c()
1753295408387:## internal helper function(s)
1753295408387:count <- function(wrd)
1753295408387:{
1753295408387:if (wrd %in% names(stats)) ## update
1753295408387:{ stats[wrd] <- stats[wrd] + 1 }
1753295408387:else ## create
1753295408388:{ stats[wrd] <- 1}
1753295408388:} ## end count helper
1753295408388:####################### end helper functions #################################
1753295408389:## finding a file or using a string input?
1753295408389:if(textIn == chooseFile)
1753295408389:{
1753295408389:print("Please select your text file.")
1753295408389:## get the file path, open the file for reading
1753295408391:file.path <- file.choose()
1753295408391:file.info <- file.info(file.path)
1753295408391:text <- file(file.path, "r")
1753295408391:}
1753295408392:else ## for readLines to work, textConnection the string input
1753295408392:{ text <- textConnection(textIn) }
1753295408392:## just in case a line ends in a hyphen (initialize var)
1753295408392:last <- ""
1753295408392:## go over the file line by line
1753295408392:while(length(line <- readLines(text, warn = FALSE)) > 0)
1753295408393:{
1753295408393:## no capitals... i don't care. i am machine
1753295408393:## add the last hyphenated word maybe
1753295408393:line <- paste0(last, tolower(line))
1753295408395:## any punctuation with a space on either side of it must go
1753295408395:ouTxt <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", text)
1753295408396:## well, what if it has double punctuation!?
1753295408396:ouTxt <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", text)
1753295408396:## extra whitespace?
1753295408396:if(!keepContractions) ## out with ye contractions (an' what 'bout these?... an bout)
1753295408396:{ ouTxt <- gsub("\\b\\w*'\\w\\b", "", text)}
1753295408397:## split line into words by whitespace (hyphenated words still in tact)
1753295408397:words <- unlist(strsplit(line,"\\s+"))
1753295408397:last <- tail(words, n = 1)
1753295408397:countLast <- TRUE
1753295408398:## what if the string ends on a hyphen? well... fuck
1753295408398:if (substring(last, nchar(last), nchar(last)) == "-")
1753295408398:{
1753295408398:last = substring(last, 0, nchar(last) - 1)
1753295408398:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753295408398:}
1753295408399:else
1753295408399:{ last = "" }
1753295408399:numWords <- length(words)
1753295408399:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753295408400:## now it can add to the dictionary, and while it's looping these words
1753295408400:## it can check for hyphenated words and split or keep them
1753295408400:for (word in words)
1753295408400:{
1753295408400:## skipping the last word? break out
1753295408401:if(onWord == numWords && countLast == FALSE){ break }
1753295408402:## check hyphen condition
1753295408402:if(!keepHyphens && grepl("-", word))
1753295408402:{
1753295408402:## split the words at the hyphen
1753295408402:both <- strsplit(word, "-")[[1]]
1753295408403:## now do all the dataframing for them
1753295408403:for(word in both)
1753295408403:{
1753295408403:if(word %in% stats$word)
1753295408403:{
1753295408403:count(word)
1753295408404:} ## end update word
1753295408404:} ## end adding both words
1753295408404:} ## end if no hyphenated words
1753295408405:else
1753295408405:{ count(word) }
1753295408405:onWord <- onWord + 1
1753295408406:} ## end reading input
1753295408407:## close file if open
1753295408407:if(textIn == chooseFile)
1753295408407:{ close(file.path) }
1753295408408:print(stats)
1753295408408:}
1753295425089:counter()
1753295434319:3+4
1753362377098:vector <- counter()
1753362517845:vector <- counter()
1753362631371:v <- counter()
1753362661315:v <- counter()
1753362717733:v <- counter()
1753362726179:v
1753362736813:v <- counter()
1753362742974:v
1753362872153:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753362872153:{
1753362872153:## initialize the named vector (c(word = #count#))
1753362872154:stats = c()
1753362872154:## internal helper function(s)
1753362872154:count <- function(wrd)
1753362872154:{
1753362872155:if (wrd %in% names(stats)) ## update
1753362872155:{ stats[wrd] <- stats[wrd] + 1
1753362872155:cat("Does it wordk?", wrd, stats[wrd])}
1753362872155:else ## create
1753362872155:{ stats[wrd] <- 1}
1753362872155:} ## end count helper
1753362872155:clean <- function(ln)
1753362872156:{
1753362872156:## any punctuation with a space on either side of it must go
1753362872156:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753362872157:## out with ye contractions (an' what 'bout these?... an bout)
1753362872157:if(!keepContractions)
1753362872157:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753362872157:cat("Cleaned Line", ln)
1753362872158:return (ln)
1753362872158:} ## end clean
1753362872158:####################### end helper functions #################################
1753362872159:## finding a file or using a string input?
1753362872159:if(textIn == "chooseFile")
1753362872159:{
1753362872159:print("Please select your text file.")
1753362872159:## get the file path, open the file for reading
1753362872159:file.path <- file.choose()
1753362872159:file.info <- file.info(file.path)
1753362872160:text <- file(file.path, "r")
1753362872160:}
1753362872160:else ## for readLines to work, textConnection the string input
1753362872160:{ text <- textConnection(textIn) }
1753362872161:## just in case a line ends in a hyphen (initialize var)
1753362872161:last <- ""
1753362872162:## go over the file line by line
1753362872162:while(length(line <- readLines(text, warn = FALSE)) > 0)
1753362872162:{
1753362872162:## no capitals... i don't care. i am machine
1753362872162:## add the last hyphenated word maybe
1753362872162:line <- paste0(last, tolower(line))
1753362872162:## wash, rinse, Repeat!
1753362872163:line <- clean(line)
1753362872163:line <- clean(line) ## because, what if it is double punctuated?!
1753362872163:## split line into words by white space (hyphenated words still in tact)
1753362872163:words <- unlist(strsplit(line,"\\s+"))
1753362872163:last <- tail(words, n = 1)
1753362872163:## does the line end in a hyphenated/truncated word?
1753362872164:countLast <- TRUE
1753362872164:if (substring(last, nchar(last), nchar(last)) == "-")
1753362872164:{
1753362872164:last = substring(last, 0, nchar(last) - 1)
1753362872164:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753362872164:}
1753362872164:else
1753362872165:{ last = "" }
1753362872165:numWords <- length(words)
1753362872165:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753362872165:## now it can add to the dictionary, and while it's looping these words
1753362872166:## it can check for hyphenated words and split or keep them
1753362872166:for (word in words)
1753362872166:{
1753362872166:## track the word it's on (one-indexed language, intuitive yet a pain)
1753362872166:onWord <- onWord + 1
1753362872166:## skipping the last word? break out
1753362872167:if(onWord == numWords && countLast == FALSE){ break }
1753362872167:## if it needs to split hyphenated words (AND the word has a hyphen)
1753362872167:if(!keepHyphens && grepl("-", word))
1753362872167:{
1753362872167:## split the words at the hyphen
1753362872168:both <- strsplit(word, "-")[[1]]
1753362872168:## now do all the dataframing for them
1753362872168:for(part in both)
1753362872168:{ count(part) } ## add/update words (count can figure it out)
1753362872168:} ## otherwise, count the word as it is
1753362872168:else { count(word) }
1753362872169:} ## end add words
1753362872169:} ## end reading file
1753362872170:## close file if open
1753362872170:#if(textIn == "chooseFile")
1753362872170:#{ close(file.path) }
1753362872170:return (stats)
1753362872171:}
1753362872171:counter("This is some shitty-wok text to test the set of the test")
1753362905304:v = counter()
1753363599544:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753363599544:{
1753363599545:## initialize the named vector (c(word = #count#))
1753363599545:stats = c()
1753363599545:## internal helper function(s)
1753363599545:count <- function(wrd)
1753363599545:{
1753363599545:if (wrd %in% names(stats)) ## update
1753363599545:{ stats[wrd] <- stats[wrd] + 1)}
1753363645976:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753363645977:{
1753363645977:## initialize the named vector (c(word = #count#))
1753363645977:stats = c()
1753363645977:## internal helper function(s)
1753363645977:count <- function(wrd)
1753363645978:{
1753363645978:if (wrd %in% names(stats)) ## update
1753363645978:{ stats[wrd] <- stats[wrd] + 1}
1753363645978:else ## create
1753363645978:{ stats[wrd] <- 1}
1753363645978:} ## end count helper
1753363645979:clean <- function(ln)
1753363645979:{
1753363645979:## any punctuation with a space on either side of it must go
1753363645979:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753363645979:## out with ye contractions (an' what 'bout these?... an bout)
1753363645979:if(!keepContractions)
1753363645980:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753363645980:return (ln)
1753363645980:} ## end clean
1753363645980:####################### end helper functions #################################
1753363645981:## finding a file or using a string input?
1753363645981:if(textIn == "chooseFile")
1753363645981:{
1753363645981:print("Please select your text file.")
1753363645981:## get the file path, open the file for reading
1753363645981:file.path <- file.choose()
1753363645981:file.info <- file.info(file.path)
1753363645982:text <- file(file.path, "r")
1753363645982:}
1753363645982:else ## for readLines to work, textConnection the string input
1753363645982:{ text <- textConnection(textIn) }
1753363645982:## just in case a line ends in a hyphen (initialize var)
1753363645983:last <- ""
1753363645983:## go over the file line by line
1753363645983:while(length(line <- readLines(text, warn = FALSE)) > 0)
1753363645983:{
1753363645984:cat("STARTING WHILE:", line)
1753363645984:## no capitals... i don't care. i am machine
1753363645984:## add the last hyphenated word maybe
1753363645984:line <- paste0(last, tolower(line))
1753363645985:## wash, rinse, Repeat!
1753363645985:line <- clean(line)
1753363645985:line <- clean(line) ## because, what if it is double punctuated?!
1753363645985:## split line into words by white space (hyphenated words still in tact)
1753363645986:words <- unlist(strsplit(line,"\\s+"))
1753363645986:last <- tail(words, n = 1)
1753363645986:## does the line end in a hyphenated/truncated word?
1753363645987:countLast <- TRUE
1753363645987:if (substring(last, nchar(last), nchar(last)) == "-")
1753363645987:{
1753363645987:last = substring(last, 0, nchar(last) - 1)
1753363645988:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753363645988:}
1753363645988:else
1753363645988:{ last = "" }
1753363645989:numWords <- length(words)
1753363645989:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753363645990:## now it can add to the dictionary, and while it's looping these words
1753363645990:## it can check for hyphenated words and split or keep them
1753363645991:for (word in words)
1753363645991:{
1753363645991:## track the word it's on (one-indexed language, intuitive yet a pain)
1753363645991:onWord <- onWord + 1
1753363645992:## skipping the last word? break out
1753363645992:if(onWord == numWords && countLast == FALSE){ break }
1753363645992:## if it needs to split hyphenated words (AND the word has a hyphen)
1753363645993:if(!keepHyphens && grepl("-", word))
1753363645993:{
1753363645993:## split the words at the hyphen
1753363645993:both <- strsplit(word, "-")[[1]]
1753363645993:## now do all the dataframing for them
1753363645993:for(part in both)
1753363645994:{ count(part) } ## add/update words (count can figure it out)
1753363645994:} ## otherwise, count the word as it is
1753363645994:else { count(word) }
1753363645994:} ## end add words
1753363645995:} ## end reading file
1753363645995:## close file if open
1753363645995:on.exit(close(text))
1753363645995:return (stats)
1753363645996:}
1753363653963:v <- counter()
1753363694339:v <- counter("some text some text")
1753363766977:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753363766977:{
1753363766977:## initialize the named vector (c(word = #count#))
1753363766977:stats = c()
1753363766978:## internal helper function(s)
1753363766978:count <- function(wrd)
1753363766978:{
1753363766978:if (wrd %in% names(stats)) ## update
1753363766978:{ stats[wrd] <- stats[wrd] + 1}
1753363766978:else ## create
1753363766978:{ stats[wrd] <- 1}
1753363766979:} ## end count helper
1753363766980:clean <- function(ln)
1753363766981:{
1753363766981:## any punctuation with a space on either side of it must go
1753363766982:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753363766982:## out with ye contractions (an' what 'bout these?... an bout)
1753363766982:if(!keepContractions)
1753363766982:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753363766983:return (ln)
1753363766983:} ## end clean
1753363766983:####################### end helper functions #################################
1753363766983:## finding a file or using a string input?
1753363766984:if(textIn == "chooseFile")
1753363766984:{
1753363766984:print("Please select your text file.")
1753363766984:## get the file path, open the file for reading
1753363766984:text <- file.choose()
1753363766984:#file.info <- file.info(file.path)
1753363766984:#text <- file(file.path, "r")
1753363766984:}
1753363766985:else ## for readLines to work, textConnection the string input
1753363766985:{ text <- textConnection(textIn) }
1753363766985:## just in case a line ends in a hyphen (initialize var)
1753363766985:last <- ""
1753363766986:## go over the file line by line
1753363766986:while(length(line <- readLines(text, warn = FALSE)) > 0)
1753363766986:{
1753363766986:cat("STARTING WHILE:", line)
1753363766987:## no capitals... i don't care. i am machine
1753363766987:## add the last hyphenated word maybe
1753363766987:line <- paste0(last, tolower(line))
1753363766987:## wash, rinse, Repeat!
1753363766988:line <- clean(line)
1753363766988:line <- clean(line) ## because, what if it is double punctuated?!
1753363766988:## split line into words by white space (hyphenated words still in tact)
1753363766988:words <- unlist(strsplit(line,"\\s+"))
1753363766988:last <- tail(words, n = 1)
1753363766988:## does the line end in a hyphenated/truncated word?
1753363766989:countLast <- TRUE
1753363766989:if (substring(last, nchar(last), nchar(last)) == "-")
1753363766989:{
1753363766989:last = substring(last, 0, nchar(last) - 1)
1753363766989:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753363766989:}
1753363766989:else
1753363766990:{ last = "" }
1753363766990:numWords <- length(words)
1753363766990:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753363766990:## now it can add to the dictionary, and while it's looping these words
1753363766991:## it can check for hyphenated words and split or keep them
1753363766991:for (word in words)
1753363766991:{
1753363766991:## track the word it's on (one-indexed language, intuitive yet a pain)
1753363766991:onWord <- onWord + 1
1753363766991:## skipping the last word? break out
1753363766992:if(onWord == numWords && countLast == FALSE){ break }
1753363766992:## if it needs to split hyphenated words (AND the word has a hyphen)
1753363766992:if(!keepHyphens && grepl("-", word))
1753363766992:{
1753363766992:## split the words at the hyphen
1753363766993:both <- strsplit(word, "-")[[1]]
1753363766993:## now do all the dataframing for them
1753363766993:for(part in both)
1753363766993:{ count(part) } ## add/update words (count can figure it out)
1753363766993:} ## otherwise, count the word as it is
1753363766993:else { count(word) }
1753363766994:} ## end add words
1753363766994:} ## end reading file
1753363766995:## close file if open
1753363766995:on.exit(close(text))
1753363766995:return (stats)
1753363766995:}
1753363771140:counter()
1753363942722:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753363942722:{
1753363942722:## initialize the named vector (c(word = #count#))
1753363942722:stats = c()
1753363942723:## internal helper function(s)
1753363942723:count <- function(wrd)
1753363942723:{
1753363942723:if (wrd %in% names(stats)) ## update
1753363942723:{ stats[wrd] <- stats[wrd] + 1}
1753363942723:else ## create
1753363942724:{ stats[wrd] <- 1}
1753363942724:} ## end count helper
1753363942725:clean <- function(ln)
1753363942725:{
1753363942725:## any punctuation with a space on either side of it must go
1753363942726:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753363942726:## out with ye contractions (an' what 'bout these?... an bout)
1753363942727:if(!keepContractions)
1753363942727:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753363942728:return (ln)
1753363942728:} ## end clean
1753363942728:####################### end helper functions #################################
1753363942729:## finding a file or using a string input?
1753363942729:if(textIn == "chooseFile")
1753363942729:{
1753363942729:print("Please select your text file.")
1753363942729:## get the file path, open the file for reading
1753363942729:text <- file.choose()
1753363942730:#file.info <- file.info(file.path)
1753363942730:#text <- file(file.path, "r")
1753363942730:}
1753363942730:else ## for readLines to work, textConnection the string input
1753363942731:{ text <- textConnection(textIn) }
1753363942731:## just in case a line ends in a hyphen (initialize var)
1753363942731:last <- ""
1753363942731:lines <- readLines(text)
1753363942731:## go over the file line by line
1753363942732:for (line in lines)
1753363942732:{
1753363942732:## no capitals... i don't care. i am machine
1753363942732:## add the last hyphenated word maybe
1753363942732:line <- paste0(last, tolower(line))
1753363942732:## wash, rinse, Repeat!
1753363942733:line <- clean(line)
1753363942733:line <- clean(line) ## because, what if it is double punctuated?!
1753363942733:## split line into words by white space (hyphenated words still in tact)
1753363942733:words <- unlist(strsplit(line,"\\s+"))
1753363942733:last <- tail(words, n = 1)
1753363942733:## does the line end in a hyphenated/truncated word?
1753363942734:countLast <- TRUE
1753363942734:if (substring(last, nchar(last), nchar(last)) == "-")
1753363942734:{
1753363942734:last = substring(last, 0, nchar(last) - 1)
1753363942734:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753363942734:}
1753363942734:else
1753363942735:{ last = "" }
1753363942735:numWords <- length(words)
1753363942735:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753363942735:## now it can add to the dictionary, and while it's looping these words
1753363942735:## it can check for hyphenated words and split or keep them
1753363942736:for (word in words)
1753363942736:{
1753363942736:## track the word it's on (one-indexed language, intuitive yet a pain)
1753363942736:onWord <- onWord + 1
1753363942736:## skipping the last word? break out
1753363942736:if(onWord == numWords && countLast == FALSE){ break }
1753363942737:## if it needs to split hyphenated words (AND the word has a hyphen)
1753363942737:if(!keepHyphens && grepl("-", word))
1753363942737:{
1753363942737:## split the words at the hyphen
1753363942737:both <- strsplit(word, "-")[[1]]
1753363942738:## now do all the dataframing for them
1753363942738:for(part in both)
1753363942738:{ count(part) } ## add/update words (count can figure it out)
1753363942738:} ## otherwise, count the word as it is
1753363942738:else { count(word) }
1753363942739:} ## end add words
1753363942739:} ## end reading file
1753363942739:## close file if open
1753363942739:on.exit(close(text))
1753363942740:return (stats)
1753363942740:}
1753363950051:c <- counter()
1753364032181:use_r("readTheText")
1753364039118:library(devtools)
1753364046966:use_r("readTheText")
1753364125860:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364125860:{
1753364125860:## initialize the named vector (c(word = #count#))
1753364125860:stats = c()
1753364125861:## internal helper function(s)
1753364125861:count <- function(wrd)
1753364125861:{
1753364125861:if (wrd %in% names(stats)) ## update
1753364125861:{ stats[wrd] <- stats[wrd] + 1}
1753364125861:else ## create
1753364125862:{ stats[wrd] <- 1}
1753364125862:} ## end count helper
1753364125862:clean <- function(ln)
1753364125863:{
1753364125863:## any punctuation with a space on either side of it must go
1753364125863:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753364125863:## out with ye contractions (an' what 'bout these?... an bout)
1753364125864:if(!keepContractions)
1753364125864:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753364125864:return (ln)
1753364125864:} ## end clean
1753364125865:####################### end helper functions #################################
1753364125865:## finding a file or using a string input?
1753364125865:if(textIn == "chooseFile")
1753364125866:{
1753364125866:print("Please select your text file.")
1753364125866:## get the file path, open the file for reading
1753364125866:text <- file.choose()
1753364125867:#file.info <- file.info(file.path)
1753364125867:#text <- file(file.path, "r")
1753364125868:}
1753364125868:else ## for readLines to work, textConnection the string input
1753364125868:{ text <- textConnection(textIn) }
1753364125869:## just in case a line ends in a hyphen (initialize var)
1753364125869:last <- ""
1753364125869:lines <- readLines(text)
1753364125870:## go over the file line by line
1753364125870:for (line in lines)
1753364125870:{
1753364125871:## no capitals... i don't care. i am machine
1753364125871:## add the last hyphenated word maybe
1753364125871:line <- paste0(last, tolower(line))
1753364125871:## wash, rinse, Repeat!
1753364125871:line <- clean(line)
1753364125872:line <- clean(line) ## because, what if it is double punctuated?!
1753364125872:## split line into words by white space (hyphenated words still in tact)
1753364125872:words <- unlist(strsplit(line,"\\s+"))
1753364125872:last <- tail(words, n = 1)
1753364125872:## does the line end in a hyphenated/truncated word?
1753364125872:countLast <- TRUE
1753364125873:if (substring(last, nchar(last), nchar(last)) == "-")
1753364125873:{
1753364125873:last = substring(last, 0, nchar(last) - 1)
1753364125873:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753364125873:}
1753364125873:else
1753364125873:{ last = "" }
1753364125874:numWords <- length(words)
1753364125874:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753364125874:## now it can add to the dictionary, and while it's looping these words
1753364125874:## it can check for hyphenated words and split or keep them
1753364125875:for (word in words)
1753364125875:{
1753364125875:## track the word it's on (one-indexed language, intuitive yet a pain)
1753364125875:onWord <- onWord + 1
1753364125875:## skipping the last word? break out
1753364125875:if(onWord == numWords && countLast == FALSE){ break }
1753364125876:## if it needs to split hyphenated words (AND the word has a hyphen)
1753364125876:if(!keepHyphens && grepl("-", word))
1753364125876:{
1753364125876:## split the words at the hyphen
1753364125876:both <- strsplit(word, "-")[[1]]
1753364125876:## now do all the dataframing for them
1753364125877:for(part in both)
1753364125877:{ count(part) } ## add/update words (count can figure it out)
1753364125877:} ## otherwise, count the word as it is
1753364125877:else { count(word) }
1753364125877:} ## end add words
1753364125878:} ## end reading file
1753364125878:## close file if open
1753364125878:on.exit(close(text))
1753364125879:return (c(stats)
1753364125879:}
1753364140520:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364140520:{
1753364140520:## initialize the named vector (c(word = #count#))
1753364140520:stats = c()
1753364140520:## internal helper function(s)
1753364140520:count <- function(wrd)
1753364140520:{
1753364140521:if (wrd %in% names(stats)) ## update
1753364140521:{ stats[wrd] <- stats[wrd] + 1}
1753364140521:else ## create
1753364140521:{ stats[wrd] <- 1}
1753364140521:} ## end count helper
1753364140522:clean <- function(ln)
1753364140522:{
1753364140522:## any punctuation with a space on either side of it must go
1753364140522:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753364140523:## out with ye contractions (an' what 'bout these?... an bout)
1753364140523:if(!keepContractions)
1753364140523:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753364140524:return (ln)
1753364140524:} ## end clean
1753364140525:####################### end helper functions #################################
1753364140526:## finding a file or using a string input?
1753364140526:if(textIn == "chooseFile")
1753364140526:{
1753364140527:print("Please select your text file.")
1753364140527:## get the file path, open the file for reading
1753364140527:text <- file.choose()
1753364140527:#file.info <- file.info(file.path)
1753364140527:#text <- file(file.path, "r")
1753364140527:}
1753364140527:else ## for readLines to work, textConnection the string input
1753364140528:{ text <- textConnection(textIn) }
1753364140528:## just in case a line ends in a hyphen (initialize var)
1753364140528:last <- ""
1753364140529:lines <- readLines(text)
1753364140529:## go over the file line by line
1753364140529:for (line in lines)
1753364140529:{
1753364140529:## no capitals... i don't care. i am machine
1753364140529:## add the last hyphenated word maybe
1753364140530:line <- paste0(last, tolower(line))
1753364140530:## wash, rinse, Repeat!
1753364140530:line <- clean(line)
1753364140530:line <- clean(line) ## because, what if it is double punctuated?!
1753364140530:## split line into words by white space (hyphenated words still in tact)
1753364140530:words <- unlist(strsplit(line,"\\s+"))
1753364140531:last <- tail(words, n = 1)
1753364140531:## does the line end in a hyphenated/truncated word?
1753364140531:countLast <- TRUE
1753364140531:if (substring(last, nchar(last), nchar(last)) == "-")
1753364140531:{
1753364140531:last = substring(last, 0, nchar(last) - 1)
1753364140531:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753364140532:}
1753364140532:else
1753364140532:{ last = "" }
1753364140532:numWords <- length(words)
1753364140532:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753364140533:## now it can add to the dictionary, and while it's looping these words
1753364140533:## it can check for hyphenated words and split or keep them
1753364140533:for (word in words)
1753364140533:{
1753364140533:## track the word it's on (one-indexed language, intuitive yet a pain)
1753364140533:onWord <- onWord + 1
1753364140534:## skipping the last word? break out
1753364140534:if(onWord == numWords && countLast == FALSE){ break }
1753364140534:## if it needs to split hyphenated words (AND the word has a hyphen)
1753364140534:if(!keepHyphens && grepl("-", word))
1753364140534:{
1753364140535:## split the words at the hyphen
1753364140535:both <- strsplit(word, "-")[[1]]
1753364140535:## now do all the dataframing for them
1753364140535:for(part in both)
1753364140535:{ count(part) } ## add/update words (count can figure it out)
1753364140535:} ## otherwise, count the word as it is
1753364140536:else { count(word) }
1753364140536:} ## end add words
1753364140536:} ## end reading file
1753364140537:## close file if open
1753364140537:on.exit(close(text))
1753364140537:return (c(stats))
1753364140537:}
1753364149502:c <- count()
1753364154774:c <- counter()
1753364194506:counter("this is a line")
1753364233521:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364233521:{
1753364233521:## finding a file or using a string input?
1753364233521:if(textIn == "chooseFile")
1753364233521:{
1753364233521:print("Please select your text file.")
1753364233522:## get the file path, open the file for reading
1753364233522:text <- file.choose()
1753364233522:#file.info <- file.info(file.path)
1753364233522:#text <- file(file.path, "r")
1753364233522:}
1753364233522:else ## for readLines to work, textConnection the string input
1753364233522:{ text <- textConnection(textIn) }
1753364233524:## just in case a line ends in a hyphen (initialize var)
1753364233524:last <- ""
1753364233524:lines <- readLines(text)
1753364233524:print(lines)
1753364233525:} ## end readTheText
1753364240069:readTheText()
1753364273832:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364273832:{
1753364273833:## finding a file or using a string input?
1753364273833:if(textIn == "chooseFile")
1753364273833:{
1753364273833:print("Please select your text file.")
1753364273833:## get the file path, open the file for reading
1753364273833:text <- file.choose()
1753364273834:#file.info <- file.info(file.path)
1753364273834:#text <- file(file.path, "r")
1753364273834:}
1753364273834:else ## for readLines to work, textConnection the string input
1753364273834:{ text <- textConnection(textIn) }
1753364273834:## just in case a line ends in a hyphen (initialize var)
1753364273835:last <- ""
1753364273835:lines <- readLines(text)
1753364273835:for(line in lines)
1753364273835:{
1753364273835:print(line)
1753364273835:}
1753364273835:} ## end readTheText
1753364278135:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364278135:{
1753364278135:## finding a file or using a string input?
1753364278135:if(textIn == "chooseFile")
1753364278135:{
1753364278135:print("Please select your text file.")
1753364278135:## get the file path, open the file for reading
1753364278135:text <- file.choose()
1753364278135:#file.info <- file.info(file.path)
1753364278136:#text <- file(file.path, "r")
1753364278136:}
1753364278136:else ## for readLines to work, textConnection the string input
1753364278136:{ text <- textConnection(textIn) }
1753364278136:## just in case a line ends in a hyphen (initialize var)
1753364278137:last <- ""
1753364278137:lines <- readLines(text)
1753364278137:for(line in lines)
1753364278137:{
1753364278138:print(line)
1753364278138:}
1753364278138:} ## end readTheText
1753364284980:readTheText()
1753364326183:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364326183:{
1753364326184:## finding a file or using a string input?
1753364326184:if(textIn == "chooseFile")
1753364326184:{
1753364326184:print("Please select your text file.")
1753364326184:## get the file path, open the file for reading
1753364326184:file.path <- file.choose()
1753364326185:print(file.path)
1753364326185:file.info <- file.info(file.path)
1753364326185:text <- file(file.path, "r")
1753364326185:}
1753364326185:else ## for readLines to work, textConnection the string input
1753364326186:{ text <- textConnection(textIn) }
1753364326186:## just in case a line ends in a hyphen (initialize var)
1753364326186:last <- ""
1753364326187:lines <- readLines(text)
1753364326187:for(line in lines)
1753364326187:{
1753364326187:print(line)
1753364326187:}
1753364326188:} ## end readTheText
1753364336938:readTheText()
1753364370911:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364370911:{
1753364370911:## finding a file or using a string input?
1753364370911:if(textIn == "chooseFile")
1753364370911:{
1753364370911:print("Please select your text file.")
1753364370911:## get the file path, open the file for reading
1753364370912:file.path <- file.choose()
1753364370912:print(file.path)
1753364370912:file.info <- file.info(file.path)
1753364370912:text <- file(file.path, "r")
1753364370912:}
1753364370912:else ## for readLines to work, textConnection the string input
1753364370912:{ text <- textConnection(textIn) }
1753364370913:## just in case a line ends in a hyphen (initialize var)
1753364370913:last <- ""
1753364370913:lines <- readLines(text)
1753364370914:for(line in lines)
1753364370914:{
1753364370914:print(line)
1753364370914:}
1753364370914:} ## end readTheText
1753364370915:readTheText("Here is some text")
1753364408079:file_path <- file.choose()
1753364411146:# Read the file line by line
1753364411146:lines <- readLines(file_path)
1753364411147:# Print the lines
1753364411147:for (line in lines) {
1753364411147:print(line)
1753364411147:}
1753364435453:file_path <- "/workspaces/r_dev_container/finalProject/HapaxLegomena/data/TexTesT.rda"
1753364435453:# Read the file line by line
1753364435453:lines <- readLines(file_path)
1753364435454:# Print the lines
1753364435454:for (line in lines) {
1753364435454:print(line)
1753364435454:}
1753364478520:load("~/finalProject/HapaxLegomena/data/TexTesT.rda")
1753364486543:readTheText("Here is some text")
1753364486543:file_path <- "/workspaces/r_dev_container/finalProject/HapaxLegomena/data/TexTesT.rda"
1753364486543:# Read the file line by line
1753364486544:lines <- readLines(file_path)
1753364486545:# Print the lines
1753364486545:for (line in lines) {
1753364486545:print(line)
1753364486546:}
1753364493872:load("~/finalProject/HapaxLegomena/data/TexTesT.rda")
1753364555819:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364555819:{
1753364555819:## initialize the named vector (c(word = #count#))
1753364555819:stats = c()
1753364555820:## internal helper function(s)
1753364555820:count <- function(wrd)
1753364555820:{
1753364555820:if (wrd %in% names(stats)) ## update
1753364555820:{ stats[wrd] <- stats[wrd] + 1}
1753364555820:else ## create
1753364555820:{ stats[wrd] <- 1}
1753364555820:} ## end count helper
1753364555820:clean <- function(ln)
1753364555821:{
1753364555821:## any punctuation with a space on either side of it must go
1753364555821:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753364555821:## out with ye contractions (an' what 'bout these?... an bout)
1753364555821:if(!keepContractions)
1753364555822:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753364555822:return (ln)
1753364555822:} ## end clean
1753364555823:####################### end helper functions #################################
1753364555823:## finding a file or using a string input?
1753364555823:if(textIn == "chooseFile")
1753364555824:{
1753364555824:print("Please select your text file.")
1753364555824:## get the file path, open the file for reading
1753364555824:text <- file.choose()
1753364555824:#file.info <- file.info(file.path)
1753364555825:#text <- file(file.path, "r")
1753364555825:}
1753364555825:else ## for readLines to work, textConnection the string input
1753364555825:{ text <- textConnection(textIn) }
1753364555826:## just in case a line ends in a hyphen (initialize var)
1753364555826:last <- ""
1753364555826:lines <- readLines(text)
1753364555827:## go over the file line by line
1753364555827:for (line in lines)
1753364555827:{
1753364555828:## no capitals... i don't care. i am machine
1753364555828:## add the last hyphenated word maybe
1753364555828:line <- paste0(last, tolower(line))
1753364555828:## wash, rinse, Repeat!
1753364555829:line <- clean(line)
1753364555829:line <- clean(line) ## because, what if it is double punctuated?!
1753364555829:## split line into words by white space (hyphenated words still in tact)
1753364555829:words <- unlist(strsplit(line,"\\s+"))
1753364555829:last <- tail(words, n = 1)
1753364555830:## does the line end in a hyphenated/truncated word?
1753364555830:countLast <- TRUE
1753364555830:if (substring(last, nchar(last), nchar(last)) == "-")
1753364555831:{
1753364555831:last = substring(last, 0, nchar(last) - 1)
1753364555831:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753364555831:}
1753364555831:else
1753364555832:{ last = "" }
1753364555832:numWords <- length(words)
1753364555832:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753364555832:## now it can add to the dictionary, and while it's looping these words
1753364555833:## it can check for hyphenated words and split or keep them
1753364555833:for (word in words)
1753364555833:{
1753364555833:## track the word it's on (one-indexed language, intuitive yet a pain)
1753364555833:onWord <- onWord + 1
1753364555833:## skipping the last word? break out
1753364555834:if(onWord == numWords && countLast == FALSE){ break }
1753364555834:## if it needs to split hyphenated words (AND the word has a hyphen)
1753364555834:if(!keepHyphens && grepl("-", word))
1753364555834:{
1753364555834:## split the words at the hyphen
1753364555834:both <- strsplit(word, "-")[[1]]
1753364555835:## now do all the dataframing for them
1753364555835:for(part in both)
1753364555835:{ count(part) } ## add/update words (count can figure it out)
1753364555835:} ## otherwise, count the word as it is
1753364555835:else { count(word) }
1753364555836:} ## end add words
1753364555836:} ## end reading file
1753364555836:## close file if open
1753364555836:on.exit(close(text))
1753364555837:return (c(stats))
1753364555837:}
1753364559681:counter()
1753364603612:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364603612:{
1753364603612:## initialize the named vector (c(word = #count#))
1753364603613:stats = c()
1753364603613:## internal helper function(s)
1753364603613:count <- function(wrd)
1753364603613:{
1753364603613:if (wrd %in% names(stats)) ## update
1753364603613:{ stats[wrd] <- stats[wrd] + 1}
1753364603613:else ## create
1753364603613:{ stats[wrd] <- 1}
1753364603613:} ## end count helper
1753364603614:clean <- function(ln)
1753364603614:{
1753364603614:## any punctuation with a space on either side of it must go
1753364603614:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753364603614:## out with ye contractions (an' what 'bout these?... an bout)
1753364603615:if(!keepContractions)
1753364603615:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753364603615:## filter empty lines
1753364603615:lines <- lines[nzchar(lines)]
1753364603616:return (ln)
1753364603616:} ## end clean
1753364603616:####################### end helper functions #################################
1753364603617:## finding a file or using a string input?
1753364603617:if(textIn == "chooseFile")
1753364603617:{
1753364603617:print("Please select your text file.")
1753364603618:## get the file path, open the file for reading
1753364603618:text <- file.choose()
1753364603618:#file.info <- file.info(file.path)
1753364603618:#text <- file(file.path, "r")
1753364603618:}
1753364603619:else ## for readLines to work, textConnection the string input
1753364603619:{ text <- textConnection(textIn) }
1753364603619:## just in case a line ends in a hyphen (initialize var)
1753364603620:last <- ""
1753364603620:lines <- readLines(text)
1753364603620:## go over the file line by line
1753364603621:for (line in lines)
1753364603621:{
1753364603621:## no capitals... i don't care. i am machine
1753364603621:## add the last hyphenated word maybe
1753364603621:line <- paste0(last, tolower(line))
1753364603622:## wash, rinse, Repeat!
1753364603622:line <- clean(line)
1753364603623:line <- clean(line) ## because, what if it is double punctuated?!
1753364603624:## split line into words by white space (hyphenated words still in tact)
1753364603624:words <- unlist(strsplit(line,"\\s+"))
1753364603624:last <- tail(words, n = 1)
1753364603624:## does the line end in a hyphenated/truncated word?
1753364603624:countLast <- TRUE
1753364603624:if (substring(last, nchar(last), nchar(last)) == "-")
1753364603625:{
1753364603625:last = substring(last, 0, nchar(last) - 1)
1753364603625:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753364603625:}
1753364603625:else
1753364603625:{ last = "" }
1753364603626:numWords <- length(words)
1753364603626:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753364603626:## now it can add to the dictionary, and while it's looping these words
1753364603626:## it can check for hyphenated words and split or keep them
1753364603626:for (word in words)
1753364603627:{
1753364603627:## track the word it's on (one-indexed language, intuitive yet a pain)
1753364603627:onWord <- onWord + 1
1753364603627:## skipping the last word? break out
1753364603627:if(onWord == numWords && countLast == FALSE){ break }
1753364603628:## if it needs to split hyphenated words (AND the word has a hyphen)
1753364603628:if(!keepHyphens && grepl("-", word))
1753364603628:{
1753364603628:## split the words at the hyphen
1753364603628:both <- strsplit(word, "-")[[1]]
1753364603628:## now do all the dataframing for them
1753364603629:for(part in both)
1753364603629:{ count(part) } ## add/update words (count can figure it out)
1753364603629:} ## otherwise, count the word as it is
1753364603629:else { count(word) }
1753364603629:} ## end add words
1753364603630:} ## end reading file
1753364603630:## close file if open
1753364603630:on.exit(close(text))
1753364603631:return (c(stats))
1753364603631:}
1753364610816:c<- choose()
1753364619016:c <- counter()
1753364656287:file_path <- choose.file()
1753364665366:file_path <- file.choose()
1753364668364:# Read the file line by line
1753364668364:lines <- readLines(file_path)
1753364668364:# Print the lines
1753364668364:for (line in lines) {
1753364668364:print(line)
1753364668364:}
1753364831943:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364831943:{
1753364831943:## initialize the named vector (c(word = #count#))
1753364831943:stats = c()
1753364831943:## internal helper function(s)
1753364831944:count <- function(wrd)
1753364831944:{
1753364831944:if (wrd %in% names(stats)) ## update
1753364831944:{ stats[wrd] <- stats[wrd] + 1}
1753364831944:else ## create
1753364831944:{ stats[wrd] <- 1}
1753364831944:} ## end count helper
1753364831945:clean <- function(ln)
1753364831945:{
1753364831945:## any punctuation with a space on either side of it must go
1753364831945:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753364831946:## out with ye contractions (an' what 'bout these?... an bout)
1753364831946:if(!keepContractions)
1753364831946:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753364831946:## filter empty lines
1753364831947:lines <- lines[nzchar(lines)]
1753364831947:return (ln)
1753364831947:} ## end clean
1753364831947:####################### end helper functions #################################
1753364831948:## finding a file or using a string input?
1753364831948:if(textIn == "chooseFile")
1753364831948:{
1753364831948:print("Please select your text file.")
1753364831948:## get the file path, open the file for reading
1753364831949:text <- file.choose()
1753364831949:#file.info <- file.info(file.path)
1753364831949:#text <- file(file.path, "r")
1753364831949:}
1753364831949:else ## for readLines to work, textConnection the string input
1753364831949:{ text <- textConnection(textIn) }
1753364831950:## just in case a line ends in a hyphen (initialize var)
1753364831950:last <- ""
1753364831950:lines <- readLines(text)
1753364831950:## go over the file line by line
1753364831950:for (line in lines)
1753364831951:{
1753364831951:## no capitals... i don't care. i am machine
1753364831951:## add the last hyphenated word maybe
1753364831951:line <- paste0(last, tolower(line))
1753364831952:## wash, rinse, Repeat!
1753364831952:line <- clean(line)
1753364831952:line <- clean(line) ## because, what if it is double punctuated?!
1753364831952:## split line into words by white space (hyphenated words still in tact)
1753364831953:words <- unlist(strsplit(line,"\\s+"))
1753364831953:last <- tail(words, n = 1)
1753364831953:## does the line end in a hyphenated/truncated word?
1753364831953:countLast <- TRUE
1753364831953:if (nchar(last) > 0 && substring(last, nchar(last), nchar(last)) == "-")
1753364831954:{
1753364831954:last = substring(last, 0, nchar(last) - 1)
1753364831954:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753364831954:}
1753364831954:else
1753364831954:{ last = "" }
1753364831955:numWords <- length(words)
1753364831955:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753364831955:## now it can add to the dictionary, and while it's looping these words
1753364831955:## it can check for hyphenated words and split or keep them
1753364831956:for (word in words)
1753364831956:{
1753364831956:## track the word it's on (one-indexed language, intuitive yet a pain)
1753364831956:onWord <- onWord + 1
1753364831957:## skipping the last word? break out
1753364831957:if(onWord == numWords && countLast == FALSE){ break }
1753364831957:## if it needs to split hyphenated words (AND the word has a hyphen)
1753364831957:if(!keepHyphens && grepl("-", word))
1753364831957:{
1753364831957:## split the words at the hyphen
1753364831958:both <- strsplit(word, "-")[[1]]
1753364831958:## now do all the dataframing for them
1753364831958:for(part in both)
1753364831958:{ count(part) } ## add/update words (count can figure it out)
1753364831958:} ## otherwise, count the word as it is
1753364831958:else { count(word) }
1753364831959:} ## end add words
1753364831959:} ## end reading file
1753364831960:## close file if open
1753364831960:on.exit(close(text))
1753364831960:return (c(stats))
1753364831960:}
1753364838262:c <- counter()
1753364979332:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753364979333:{
1753364979333:## initialize the named vector (c(word = #count#))
1753364979333:stats = c()
1753364979333:## internal helper function(s)
1753364979333:count <- function(wrd)
1753364979333:{
1753364979334:if (wrd %in% names(stats)) ## update
1753364979334:{ stats[wrd] <- stats[wrd] + 1}
1753364979334:else ## create
1753364979335:{ stats[wrd] <- 1}
1753364979335:} ## end count helper
1753364979335:clean <- function(ln)
1753364979336:{
1753364979336:## any punctuation with a space on either side of it must go
1753364979336:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753364979336:## out with ye contractions (an' what 'bout these?... an bout)
1753364979336:if(!keepContractions)
1753364979337:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753364979337:## filter empty lines
1753364979337:lines <- lines[nzchar(lines)]
1753364979337:return (ln)
1753364979337:} ## end clean
1753364979338:####################### end helper functions #################################
1753364979338:## finding a file or using a string input?
1753364979338:if(textIn == "chooseFile")
1753364979339:{
1753364979339:print("Please select your text file.")
1753364979339:## get the file path, open the file for reading
1753364979339:text <- file.choose()
1753364979340:#file.info <- file.info(file.path)
1753364979340:#text <- file(file.path, "r")
1753364979340:}
1753364979341:else ## for readLines to work, textConnection the string input
1753364979341:{ text <- textConnection(textIn) }
1753364979341:## just in case a line ends in a hyphen (initialize var)
1753364979342:last <- ""
1753364979342:lines <- readLines(text)
1753364979342:## go over the file line by line
1753364979342:for (line in lines)
1753364979342:{
1753364979343:## no capitals... i don't care. i am machine
1753364979343:## add the last hyphenated word maybe
1753364979343:line <- paste0(last, tolower(line))
1753364979344:## wash, rinse, Repeat!
1753364979344:line <- clean(line)
1753364979344:line <- clean(line) ## because, what if it is double punctuated?!
1753364979345:## split line into words by white space (hyphenated words still in tact)
1753364979345:words <- unlist(strsplit(line,"\\s+"))
1753364979345:last <- tail(words, n = 1)
1753364979346:## does the line end in a hyphenated/truncated word?
1753364979346:countLast <- TRUE
1753364979346:## such a pain in the ass
1753364979346:if(nchar(last > 0))
1753364979346:{ endsIn <- substring(last, nchar(last), nchar(last)) }
1753364979346:else {endsIn == "nothing"}
1753364979347:if (endsIn == "-")
1753364979347:{
1753364979347:last = substring(last, 0, nchar(last) - 1)
1753364979347:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753364979347:}
1753364979347:else
1753364979347:{ last = "" }
1753364979348:numWords <- length(words)
1753364979348:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753364979348:## now it can add to the dictionary, and while it's looping these words
1753364979348:## it can check for hyphenated words and split or keep them
1753364979349:for (word in words)
1753364979349:{
1753364979350:## track the word it's on (one-indexed language, intuitive yet a pain)
1753364979350:onWord <- onWord + 1
1753364979350:## skipping the last word? break out
1753364979351:if(onWord == numWords && countLast == FALSE){ break }
1753364979351:## if it needs to split hyphenated words (AND the word has a hyphen)
1753364979351:if(!keepHyphens && grepl("-", word))
1753364979351:{
1753364979351:## split the words at the hyphen
1753364979352:both <- strsplit(word, "-")[[1]]
1753364979352:## now do all the dataframing for them
1753364979352:for(part in both)
1753364979352:{ count(part) } ## add/update words (count can figure it out)
1753364979352:} ## otherwise, count the word as it is
1753364979352:else { count(word) }
1753364979353:} ## end add words
1753364979353:} ## end reading file
1753364979354:## close file if open
1753364979354:on.exit(close(text))
1753364979354:return (c(stats))
1753364979354:}
1753364984518:c <- counter()
1753365017426:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753365017427:{
1753365017427:## initialize the named vector (c(word = #count#))
1753365017427:stats = c()
1753365017427:## internal helper function(s)
1753365017428:count <- function(wrd)
1753365017428:{
1753365017428:if (wrd %in% names(stats)) ## update
1753365017428:{ stats[wrd] <- stats[wrd] + 1}
1753365017428:else ## create
1753365017429:{ stats[wrd] <- 1}
1753365017429:} ## end count helper
1753365017429:clean <- function(ln)
1753365017430:{
1753365017430:## any punctuation with a space on either side of it must go
1753365017430:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365017430:## out with ye contractions (an' what 'bout these?... an bout)
1753365017432:if(!keepContractions)
1753365017432:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753365017433:## filter empty lines
1753365017433:lines <- lines[nzchar(lines)]
1753365017433:return (ln)
1753365017433:} ## end clean
1753365017434:####################### end helper functions #################################
1753365017434:## finding a file or using a string input?
1753365017434:if(textIn == "chooseFile")
1753365017434:{
1753365017434:print("Please select your text file.")
1753365017434:## get the file path, open the file for reading
1753365017435:text <- file.choose()
1753365017435:#file.info <- file.info(file.path)
1753365017435:#text <- file(file.path, "r")
1753365017435:}
1753365017435:else ## for readLines to work, textConnection the string input
1753365017436:{ text <- textConnection(textIn) }
1753365017436:## just in case a line ends in a hyphen (initialize var)
1753365017436:last <- ""
1753365017437:lines <- readLines(text)
1753365017437:## go over the file line by line
1753365017437:for (line in lines)
1753365017438:{
1753365017438:## no capitals... i don't care. i am machine
1753365017438:## add the last hyphenated word maybe
1753365017438:line <- paste0(last, tolower(line))
1753365017438:## wash, rinse, Repeat!
1753365017438:line <- clean(line)
1753365017439:line <- clean(line) ## because, what if it is double punctuated?!
1753365017439:## split line into words by white space (hyphenated words still in tact)
1753365017439:words <- unlist(strsplit(line,"\\s+"))
1753365017439:last <- tail(words, n = 1)
1753365017439:## does the line end in a hyphenated/truncated word?
1753365017439:countLast <- TRUE
1753365017440:## such a pain in the ass
1753365017440:if(nchar(last) > 0)
1753365017440:{ endsIn <- substring(last, nchar(last), nchar(last)) }
1753365017440:else {endsIn == "nothing"}
1753365017440:if (endsIn == "-")
1753365017440:{
1753365017441:last = substring(last, 0, nchar(last) - 1)
1753365017441:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365017441:}
1753365017441:else
1753365017441:{ last = "" }
1753365017441:numWords <- length(words)
1753365017442:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365017442:## now it can add to the dictionary, and while it's looping these words
1753365017442:## it can check for hyphenated words and split or keep them
1753365017442:for (word in words)
1753365017442:{
1753365017443:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365017443:onWord <- onWord + 1
1753365017443:## skipping the last word? break out
1753365017443:if(onWord == numWords && countLast == FALSE){ break }
1753365017444:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365017444:if(!keepHyphens && grepl("-", word))
1753365017444:{
1753365017444:## split the words at the hyphen
1753365017444:both <- strsplit(word, "-")[[1]]
1753365017444:## now do all the dataframing for them
1753365017445:for(part in both)
1753365017445:{ count(part) } ## add/update words (count can figure it out)
1753365017445:} ## otherwise, count the word as it is
1753365017445:else { count(word) }
1753365017445:} ## end add words
1753365017446:} ## end reading file
1753365017446:## close file if open
1753365017446:on.exit(close(text))
1753365017447:return (c(stats))
1753365017447:}
1753365020768:c <- counter()
1753365034711:c
1753365213219:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753365213219:{
1753365213219:## initialize the named vector (c(word = #count#))
1753365213219:stats = c()
1753365213219:## internal helper function(s)
1753365213219:count <- function(wrd)
1753365213219:{
1753365213219:if (wrd %in% names(stats)) ## update
1753365213220:{ stats[wrd] <- stats[wrd] + 1}
1753365213220:else ## create
1753365213220:{ stats[wrd] <- 1}
1753365213220:} ## end count helper
1753365213220:clean <- function(ln)
1753365213221:{
1753365213221:## any punctuation with a space on either side of it must go
1753365213221:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365213222:## out with ye contractions (an' what 'bout these?... an bout)
1753365213222:if(!keepContractions)
1753365213222:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753365213223:## filter empty lines
1753365213223:lines <- lines[nzchar(lines)]
1753365213223:return (ln)
1753365213223:} ## end clean
1753365213223:####################### end helper functions #################################
1753365213224:## finding a file or using a string input?
1753365213224:if(textIn == "chooseFile")
1753365213224:{
1753365213224:print("Please select your text file.")
1753365213224:## get the file path, open the file for reading
1753365213224:text <- file.choose()
1753365213224:#file.info <- file.info(file.path)
1753365213225:#text <- file(file.path, "r")
1753365213225:}
1753365213225:else ## for readLines to work, textConnection the string input
1753365213225:{ text <- textConnection(textIn) }
1753365213225:## just in case a line ends in a hyphen (initialize var)
1753365213226:last <- ""
1753365213226:lines <- readLines(text)
1753365213226:## go over the file line by line
1753365213226:for (line in lines)
1753365213226:{
1753365213227:## no capitals... i don't care. i am machine
1753365213227:## add the last hyphenated word maybe
1753365213227:line <- paste0(last, tolower(line))
1753365213227:## wash, rinse, Repeat!
1753365213228:line <- clean(line)
1753365213228:line <- clean(line) ## because, what if it is double punctuated?!
1753365213228:## split line into words by white space (hyphenated words still in tact)
1753365213228:words <- unlist(strsplit(line,"\\s+"))
1753365213228:last <- tail(words, n = 1)
1753365213228:## does the line end in a hyphenated/truncated word?
1753365213229:countLast <- TRUE
1753365213229:if (grep("-$", last, value = TRUE))
1753365213229:{
1753365213229:last = substring(last, 0, nchar(last) - 1)
1753365213229:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365213230:}
1753365213230:else
1753365213230:{ last = "" }
1753365213230:numWords <- length(words)
1753365213230:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365213231:## now it can add to the dictionary, and while it's looping these words
1753365213231:## it can check for hyphenated words and split or keep them
1753365213231:for (word in words)
1753365213231:{
1753365213231:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365213231:onWord <- onWord + 1
1753365213232:## skipping the last word? break out
1753365213232:if(onWord == numWords && countLast == FALSE){ break }
1753365213232:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365213232:if(!keepHyphens && grepl("-", word))
1753365213232:{
1753365213233:## split the words at the hyphen
1753365213233:both <- strsplit(word, "-")[[1]]
1753365213233:## now do all the dataframing for them
1753365213233:for(part in both)
1753365213233:{ count(part) } ## add/update words (count can figure it out)
1753365213233:} ## otherwise, count the word as it is
1753365213233:else { count(word) }
1753365213234:} ## end add words
1753365213234:} ## end reading file
1753365213235:## close file if open
1753365213235:on.exit(close(text))
1753365213235:return (c(stats))
1753365213235:}
1753365217040:c <- counter()
1753365308283:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753365308283:{
1753365308283:## initialize the named vector (c(word = #count#))
1753365308283:stats = c()
1753365308284:## internal helper function(s)
1753365308284:count <- function(wrd)
1753365308284:{
1753365308285:if (wrd %in% names(stats)) ## update
1753365308285:{ stats[wrd] <- stats[wrd] + 1}
1753365308285:else ## create
1753365308285:{ stats[wrd] <- 1}
1753365308286:} ## end count helper
1753365308286:clean <- function(ln)
1753365308286:{
1753365308286:## any punctuation with a space on either side of it must go
1753365308286:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365308287:## out with ye contractions (an' what 'bout these?... an bout)
1753365308287:if(!keepContractions)
1753365308287:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753365308287:## filter empty lines
1753365308287:lines <- lines[nzchar(lines)]
1753365308287:return (ln)
1753365308288:} ## end clean
1753365308288:####################### end helper functions #################################
1753365308288:## finding a file or using a string input?
1753365308288:if(textIn == "chooseFile")
1753365308288:{
1753365308288:print("Please select your text file.")
1753365308289:## get the file path, open the file for reading
1753365308289:text <- file.choose()
1753365308289:#file.info <- file.info(file.path)
1753365308289:#text <- file(file.path, "r")
1753365308289:}
1753365308289:else ## for readLines to work, textConnection the string input
1753365308289:{ text <- textConnection(textIn) }
1753365308290:## just in case a line ends in a hyphen (initialize var)
1753365308290:last <- ""
1753365308290:lines <- readLines(text)
1753365308291:## go over the file line by line
1753365308291:for (line in lines)
1753365308291:{
1753365308291:## no capitals... i don't care. i am machine
1753365308291:## add the last hyphenated word maybe
1753365308292:line <- paste0(last, tolower(line))
1753365308292:## wash, rinse, Repeat!
1753365308292:line <- clean(line)
1753365308292:line <- clean(line) ## because, what if it is double punctuated?!
1753365308292:## split line into words by white space (hyphenated words still in tact)
1753365308293:words <- unlist(strsplit(line,"\\s+"))
1753365308293:last <- tail(words, n = 1)
1753365308293:## does the line end in a hyphenated/truncated word?
1753365308293:countLast <- TRUE
1753365308293:if (grep("-$", last))
1753365308294:{
1753365308294:last = substring(last, 0, nchar(last) - 1)
1753365308294:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365308294:}
1753365308294:else
1753365308294:{ last = "" }
1753365308295:numWords <- length(words)
1753365308295:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365308295:## now it can add to the dictionary, and while it's looping these words
1753365308295:## it can check for hyphenated words and split or keep them
1753365308295:for (word in words)
1753365308295:{
1753365308296:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365308296:onWord <- onWord + 1
1753365308296:## skipping the last word? break out
1753365308296:if(onWord == numWords && countLast == FALSE){ break }
1753365308296:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365308297:if(!keepHyphens && grepl("-", word))
1753365308297:{
1753365308297:## split the words at the hyphen
1753365308297:both <- strsplit(word, "-")[[1]]
1753365308297:## now do all the dataframing for them
1753365308297:for(part in both)
1753365308298:{ count(part) } ## add/update words (count can figure it out)
1753365308298:} ## otherwise, count the word as it is
1753365308298:else { count(word) }
1753365308298:} ## end add words
1753365308299:} ## end reading file
1753365308299:## close file if open
1753365308299:on.exit(close(text))
1753365308300:return (c(stats))
1753365308300:}
1753365311351:c <- counter()
1753365395325:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753365395325:{
1753365395325:## initialize the named vector (c(word = #count#))
1753365395325:stats = c()
1753365395325:## internal helper function(s)
1753365395325:count <- function(wrd)
1753365395325:{
1753365395325:if (wrd %in% names(stats)) ## update
1753365395326:{ stats[wrd] <- stats[wrd] + 1}
1753365395326:else ## create
1753365395326:{ stats[wrd] <- 1}
1753365395326:} ## end count helper
1753365395326:clean <- function(ln)
1753365395326:{
1753365395326:## any punctuation with a space on either side of it must go
1753365395327:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365395327:## out with ye contractions (an' what 'bout these?... an bout)
1753365395327:if(!keepContractions)
1753365395327:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753365395328:## filter empty lines
1753365395328:lines <- lines[nzchar(lines)]
1753365395328:return (ln)
1753365395329:} ## end clean
1753365395329:####################### end helper functions #################################
1753365395329:## finding a file or using a string input?
1753365395330:if(textIn == "chooseFile")
1753365395330:{
1753365395330:print("Please select your text file.")
1753365395330:## get the file path, open the file for reading
1753365395330:text <- file.choose()
1753365395331:#file.info <- file.info(file.path)
1753365395331:#text <- file(file.path, "r")
1753365395331:}
1753365395332:else ## for readLines to work, textConnection the string input
1753365395332:{ text <- textConnection(textIn) }
1753365395333:## just in case a line ends in a hyphen (initialize var)
1753365395334:last <- ""
1753365395335:lines <- readLines(text)
1753365395335:## go over the file line by line
1753365395335:for (line in lines)
1753365395335:{
1753365395336:## no capitals... i don't care. i am machine
1753365395336:## add the last hyphenated word maybe
1753365395336:line <- paste0(last, tolower(line))
1753365395336:## wash, rinse, Repeat!
1753365395337:line <- clean(line)
1753365395337:line <- clean(line) ## because, what if it is double punctuated?!
1753365395338:## split line into words by white space (hyphenated words still in tact)
1753365395338:words <- unlist(strsplit(line,"\\s+"))
1753365395339:last <- tail(words, n = 1)
1753365395339:## does the line end in a hyphenated/truncated word?
1753365395340:countLast <- TRUE
1753365395341:if(nzchar(last))
1753365395341:{
1753365395341:if (grep("-$", last))
1753365395342:{
1753365395342:last = substring(last, 0, nchar(last) - 1)
1753365395342:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365395342:}
1753365395343:}
1753365395343:numWords <- length(words)
1753365395343:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365395344:## now it can add to the dictionary, and while it's looping these words
1753365395344:## it can check for hyphenated words and split or keep them
1753365395344:for (word in words)
1753365395345:{
1753365395345:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365395346:onWord <- onWord + 1
1753365395346:## skipping the last word? break out
1753365395346:if(onWord == numWords && countLast == FALSE){ break }
1753365395347:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365395347:if(!keepHyphens && grepl("-", word))
1753365395347:{
1753365395348:## split the words at the hyphen
1753365395348:both <- strsplit(word, "-")[[1]]
1753365395348:## now do all the dataframing for them
1753365395348:for(part in both)
1753365395348:{ count(part) } ## add/update words (count can figure it out)
1753365395349:} ## otherwise, count the word as it is
1753365395349:else { count(word) }
1753365395350:} ## end add words
1753365395350:} ## end reading file
1753365395351:## close file if open
1753365395351:on.exit(close(text))
1753365395352:return (c(stats))
1753365395352:}
1753365398129:c <- counter()
1753365441185:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753365441185:{
1753365441185:## initialize the named vector (c(word = #count#))
1753365441185:stats = c()
1753365441185:## internal helper function(s)
1753365441186:count <- function(wrd)
1753365441186:{
1753365441186:if (wrd %in% names(stats)) ## update
1753365441188:{ stats[wrd] <- stats[wrd] + 1}
1753365441188:else ## create
1753365441189:{ stats[wrd] <- 1}
1753365441189:} ## end count helper
1753365441189:clean <- function(ln)
1753365441189:{
1753365441189:## any punctuation with a space on either side of it must go
1753365441190:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365441190:## out with ye contractions (an' what 'bout these?... an bout)
1753365441190:if(!keepContractions)
1753365441191:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753365441191:## filter empty lines
1753365441192:lines <- lines[nzchar(lines)]
1753365441192:return (ln)
1753365441193:} ## end clean
1753365441193:####################### end helper functions #################################
1753365441193:## finding a file or using a string input?
1753365441194:if(textIn == "chooseFile")
1753365441194:{
1753365441194:print("Please select your text file.")
1753365441194:## get the file path, open the file for reading
1753365441194:text <- file.choose()
1753365441195:#file.info <- file.info(file.path)
1753365441195:#text <- file(file.path, "r")
1753365441196:}
1753365441196:else ## for readLines to work, textConnection the string input
1753365441196:{ text <- textConnection(textIn) }
1753365441197:## just in case a line ends in a hyphen (initialize var)
1753365441197:last <- ""
1753365441198:lines <- readLines(text)
1753365441198:## go over the file line by line
1753365441198:for (line in lines)
1753365441198:{
1753365441199:## no capitals... i don't care. i am machine
1753365441199:## add the last hyphenated word maybe
1753365441199:line <- paste0(last, tolower(line))
1753365441199:## wash, rinse, Repeat!
1753365441200:line <- clean(line)
1753365441200:line <- clean(line) ## because, what if it is double punctuated?!
1753365441200:## split line into words by white space (hyphenated words still in tact)
1753365441200:words <- unlist(strsplit(line,"\\s+"))
1753365441201:last <- tail(words, n = 1)
1753365441201:## does the line end in a hyphenated/truncated word?
1753365441201:countLast <- TRUE
1753365441202:print(last)
1753365441202:if(nzchar(last))
1753365441202:{
1753365441203:if (grep("-$", last))
1753365441203:{
1753365441203:last = substring(last, 0, nchar(last) - 1)
1753365441203:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365441203:}
1753365441204:}
1753365441204:numWords <- length(words)
1753365441204:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365441205:## now it can add to the dictionary, and while it's looping these words
1753365441206:## it can check for hyphenated words and split or keep them
1753365441206:for (word in words)
1753365441206:{
1753365441207:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365441207:onWord <- onWord + 1
1753365441208:## skipping the last word? break out
1753365441208:if(onWord == numWords && countLast == FALSE){ break }
1753365441208:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365441209:if(!keepHyphens && grepl("-", word))
1753365441209:{
1753365441209:## split the words at the hyphen
1753365441209:both <- strsplit(word, "-")[[1]]
1753365441209:## now do all the dataframing for them
1753365441210:for(part in both)
1753365441210:{ count(part) } ## add/update words (count can figure it out)
1753365441210:} ## otherwise, count the word as it is
1753365441210:else { count(word) }
1753365441211:} ## end add words
1753365441212:} ## end reading file
1753365441213:## close file if open
1753365441213:on.exit(close(text))
1753365441214:return (c(stats))
1753365441214:}
1753365448738:c <- counter()
1753365668077:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE) {
1753365668077:## initialize the named vector (c(word = #count#))
1753365668077:stats = c()
1753365668077:## internal helper function(s)
1753365668077:count <- function(wrd) {
1753365668077:if (wrd %in% names(stats)) { ## update
1753365668078:stats[wrd] <- stats[wrd] + 1
1753365668078:} else { ## create
1753365668078:stats[wrd] <- 1
1753365668078:}
1753365668079:} ## end count helper
1753365668079:clean <- function(ln) {
1753365668079:## any punctuation with a space on either side of it must go
1753365668080:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365668080:## out with ye contractions (an' what 'bout these?... an bout)
1753365668080:if (!keepContractions) {
1753365668080:ln <- gsub("\\b\\w*'\\w\\b", " ", ln)
1753365668080:}
1753365668081:## filter empty lines
1753365668081:ln <- ln[nzchar(ln)]
1753365668081:return(ln)
1753365668081:} ## end clean
1753365668082:####################### end helper functions #################################
1753365668082:## finding a file or using a string input?
1753365668082:if (textIn == "chooseFile") {
1753365668082:print("Please select your text file.")
1753365668082:## get the file path, open the file for reading
1753365668082:text <- file.choose()
1753365668082:} else { ## for readLines to work, textConnection the string input
1753365668083:text <- textConnection(textIn)
1753365668083:}
1753365668083:## just in case a line ends in a hyphen (initialize var)
1753365668083:last <- ""
1753365668083:lines <- readLines(text)
1753365668083:## go over the file line by line
1753365668084:for (line in lines) {
1753365668084:## no capitals... i don't care. i am machine
1753365668084:## add the last hyphenated word maybe
1753365668084:line <- paste0(last, tolower(line))
1753365668085:## wash, rinse, Repeat!
1753365668085:line <- clean(line)
1753365668085:line <- clean(line) ## because, what if it is double punctuated?!
1753365668086:## split line into words by white space (hyphenated words still intact)
1753365668086:words <- unlist(strsplit(line, "\\s+"))
1753365668086:last <- tail(words, n = 1)
1753365668087:## does the line end in a hyphenated/truncated word?
1753365668087:countLast <- TRUE
1753365668088:print(last)
1753365668088:if (nzchar(last)) {
1753365668088:if (grepl("-$", last)) {
1753365668089:last = substring(last, 1, nchar(last) - 1)
1753365668089:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365668089:}
1753365668089:}
1753365668089:numWords <- length(words)
1753365668090:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365668090:## now it can add to the dictionary, and while it's looping these words
1753365668090:## it can check for hyphenated words and split or keep them
1753365668090:for (word in words) {
1753365668090:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365668091:onWord <- onWord + 1
1753365668091:## skipping the last word? break out
1753365668091:if(onWord == numWords && countLast == FALSE){ break }
1753365668091:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365668091:if(!keepHyphens && grepl("-", word))
1753365668092:{
1753365668092:## split the words at the hyphen
1753365668092:both <- strsplit(word, "-")[[1]]
1753365668092:## now do all the dataframing for them
1753365668092:for(part in both)
1753365668092:{ count(part) } ## add/update words (count can figure it out)
1753365668093:} ## otherwise, count the word as it is
1753365668093:else { count(word) }
1753365668093:} ## end add words
1753365668093:} ## end reading file
1753365668094:## close file if open
1753365668094:on.exit(close(text))
1753365668094:return (c(stats))
1753365668095:}
1753365668095:counter()
1753365747902:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE) {
1753365747902:## initialize the named vector (c(word = #count#))
1753365747903:stats = c()
1753365747903:## internal helper function(s)
1753365747903:count <- function(wrd) {
1753365747903:if (wrd %in% names(stats)) { ## update
1753365747903:stats[wrd] <- stats[wrd] + 1
1753365747903:} else { ## create
1753365747903:stats[wrd] <- 1
1753365747903:}
1753365747904:} ## end count helper
1753365747904:clean <- function(ln) {
1753365747904:## any punctuation with a space on either side of it must go
1753365747904:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365747904:## out with ye contractions (an' what 'bout these?... an bout)
1753365747904:if (!keepContractions) {
1753365747904:ln <- gsub("\\b\\w*'\\w\\b", " ", ln)
1753365747905:}
1753365747905:## filter empty lines
1753365747905:ln <- ln[nzchar(ln)]
1753365747905:return(ln)
1753365747905:} ## end clean
1753365747906:####################### end helper functions #################################
1753365747906:## finding a file or using a string input?
1753365747906:if (textIn == "chooseFile") {
1753365747906:print("Please select your text file.")
1753365747906:## get the file path, open the file for reading
1753365747906:text <- file.choose()
1753365747907:} else { ## for readLines to work, textConnection the string input
1753365747907:text <- textConnection(textIn)
1753365747907:}
1753365747907:## just in case a line ends in a hyphen (initialize var)
1753365747907:last <- ""
1753365747908:lines <- readLines(text)
1753365747908:## go over the file line by line
1753365747908:for (line in lines) {
1753365747908:## no capitals... i don't care. i am machine
1753365747908:## add the last hyphenated word maybe
1753365747908:line <- paste0(last, tolower(line))
1753365747909:## wash, rinse, Repeat!
1753365747909:line <- clean(line)
1753365747909:line <- clean(line) ## because, what if it is double punctuated?!
1753365747909:## split line into words by white space (hyphenated words still intact)
1753365747909:words <- unlist(strsplit(line, "\\s+"))
1753365747910:last <- tail(words, n = 1)
1753365747910:## does the line end in a hyphenated/truncated word?
1753365747910:countLast <- TRUE
1753365747910:print(last)
1753365747911:if (nzchar(last)) {
1753365747911:if (grepl("-$", last)) {
1753365747911:last = substring(last, 1, nchar(last) - 1)
1753365747911:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365747912:}
1753365747912:}
1753365747912:numWords <- length(words)
1753365747912:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365747913:## now it can add to the dictionary, and while it's looping these words
1753365747913:## it can check for hyphenated words and split or keep them
1753365747913:for (word in words) {
1753365747913:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365747913:onWord <- onWord + 1
1753365747913:## skipping the last word? break out
1753365747914:if(onWord == numWords && countLast == FALSE){ break }
1753365747914:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365747914:if(!keepHyphens && grepl("-", word))
1753365747914:{
1753365747914:## split the words at the hyphen
1753365747914:both <- strsplit(word, "-")[[1]]
1753365747914:## now do all the dataframing for them
1753365747914:for(part in both)
1753365747915:{ count(part) } ## add/update words (count can figure it out)
1753365747915:} ## otherwise, count the word as it is
1753365747915:else { count(word) }
1753365747915:} ## end add words
1753365747915:} ## end reading file
1753365747916:## close file if open
1753365747916:if(textIn == "chooseFile")
1753365747916:{on.exit(close(text))}
1753365747916:return (c(stats))
1753365747916:}
1753365758730:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE) {
1753365758731:## initialize the named vector (c(word = #count#))
1753365758731:stats = c()
1753365758731:## internal helper function(s)
1753365758731:count <- function(wrd) {
1753365758731:if (wrd %in% names(stats)) { ## update
1753365758731:stats[wrd] <- stats[wrd] + 1
1753365758732:} else { ## create
1753365758732:stats[wrd] <- 1
1753365758732:}
1753365758732:} ## end count helper
1753365758732:clean <- function(ln) {
1753365758732:## any punctuation with a space on either side of it must go
1753365758732:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365758733:## out with ye contractions (an' what 'bout these?... an bout)
1753365758733:if (!keepContractions) {
1753365758733:ln <- gsub("\\b\\w*'\\w\\b", " ", ln)
1753365758733:}
1753365758734:## filter empty lines
1753365758734:ln <- ln[nzchar(ln)]
1753365758735:return(ln)
1753365758735:} ## end clean
1753365758735:####################### end helper functions #################################
1753365758736:## finding a file or using a string input?
1753365758736:if (textIn == "chooseFile") {
1753365758736:print("Please select your text file.")
1753365758736:## get the file path, open the file for reading
1753365758736:text <- file.choose()
1753365758736:} else { ## for readLines to work, textConnection the string input
1753365758736:text <- textConnection(textIn)
1753365758737:}
1753365758737:## just in case a line ends in a hyphen (initialize var)
1753365758737:last <- ""
1753365758738:lines <- readLines(text)
1753365758738:## go over the file line by line
1753365758738:for (line in lines) {
1753365758738:## no capitals... i don't care. i am machine
1753365758738:## add the last hyphenated word maybe
1753365758738:line <- paste0(last, tolower(line))
1753365758739:## wash, rinse, Repeat!
1753365758739:line <- clean(line)
1753365758739:line <- clean(line) ## because, what if it is double punctuated?!
1753365758740:## split line into words by white space (hyphenated words still intact)
1753365758740:words <- unlist(strsplit(line, "\\s+"))
1753365758740:last <- tail(words, n = 1)
1753365758740:## does the line end in a hyphenated/truncated word?
1753365758740:countLast <- TRUE
1753365758741:print(last)
1753365758741:if (nzchar(last)) {
1753365758741:if (grepl("-$", last)) {
1753365758742:last = substring(last, 1, nchar(last) - 1)
1753365758742:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365758742:}
1753365758742:}
1753365758743:numWords <- length(words)
1753365758743:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365758743:## now it can add to the dictionary, and while it's looping these words
1753365758743:## it can check for hyphenated words and split or keep them
1753365758744:for (word in words) {
1753365758744:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365758744:onWord <- onWord + 1
1753365758744:## skipping the last word? break out
1753365758745:if(onWord == numWords && countLast == FALSE){ break }
1753365758745:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365758746:if(!keepHyphens && grepl("-", word))
1753365758746:{
1753365758746:## split the words at the hyphen
1753365758746:both <- strsplit(word, "-")[[1]]
1753365758747:## now do all the dataframing for them
1753365758747:for(part in both)
1753365758747:{ count(part) } ## add/update words (count can figure it out)
1753365758747:} ## otherwise, count the word as it is
1753365758748:else { count(word) }
1753365758748:} ## end add words
1753365758749:} ## end reading file
1753365758750:## close file if open
1753365758750:if(textIn == "chooseFile")
1753365758750:{on.exit(close(text))}
1753365758750:return (c(stats))
1753365758751:}
1753365758752:cunts <- counter()
1753365828742:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE) {
1753365828742:## initialize the named vector (c(word = #count#))
1753365828742:stats = c()
1753365828743:## internal helper function(s)
1753365828743:count <- function(wrd) {
1753365828743:if (wrd %in% names(stats)) { ## update
1753365828743:stats[wrd] <- stats[wrd] + 1
1753365828743:} else { ## create
1753365828743:stats[wrd] <- 1
1753365828744:}
1753365828744:} ## end count helper
1753365828744:clean <- function(ln) {
1753365828745:## any punctuation with a space on either side of it must go
1753365828745:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365828745:## out with ye contractions (an' what 'bout these?... an bout)
1753365828746:if (!keepContractions) {
1753365828746:ln <- gsub("\\b\\w*'\\w\\b", " ", ln)
1753365828746:}
1753365828747:## filter empty lines
1753365828747:ln <- ln[nzchar(ln)]
1753365828747:return(ln)
1753365828747:} ## end clean
1753365828748:####################### end helper functions #################################
1753365828748:## finding a file or using a string input?
1753365828748:if (textIn == "chooseFile") {
1753365828748:print("Please select your text file.")
1753365828749:## get the file path, open the file for reading
1753365828749:text <- file.choose()
1753365828749:} else { ## for readLines to work, textConnection the string input
1753365828749:text <- textConnection(textIn)
1753365828750:}
1753365828750:## just in case a line ends in a hyphen (initialize var)
1753365828750:last <- ""
1753365828750:lines <- readLines(text)
1753365828750:## go over the file line by line
1753365828751:for (line in lines) {
1753365828751:## no capitals... i don't care. i am machine
1753365828751:## add the last hyphenated word maybe
1753365828751:line <- paste0(last, tolower(line))
1753365828752:## wash, rinse, Repeat!
1753365828752:line <- clean(line)
1753365828753:line <- clean(line) ## because, what if it is double punctuated?!
1753365828753:## split line into words by white space (hyphenated words still intact)
1753365828753:words <- unlist(strsplit(line, "\\s+"))
1753365828753:last <- tail(words, n = 1)
1753365828754:## does the line end in a hyphenated/truncated word?
1753365828754:countLast <- TRUE
1753365828755:print(last)
1753365828755:if (nzchar(last)) {
1753365828755:if (grepl("-$", last)) {
1753365828755:last = substring(last, 1, nchar(last) - 1)
1753365828755:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365828755:}
1753365828756:}
1753365828756:numWords <- length(words)
1753365828756:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365828756:## now it can add to the dictionary, and while it's looping these words
1753365828756:## it can check for hyphenated words and split or keep them
1753365828757:for (word in words) {
1753365828757:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365828757:onWord <- onWord + 1
1753365828757:## skipping the last word? break out
1753365828757:if(onWord == numWords && countLast == FALSE){ break }
1753365828758:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365828758:if(!keepHyphens && grepl("-", word))
1753365828758:{
1753365828758:## split the words at the hyphen
1753365828758:both <- strsplit(word, "-")[[1]]
1753365828758:## now do all the dataframing for them
1753365828759:for(part in both)
1753365828759:{ count(part) } ## add/update words (count can figure it out)
1753365828759:} ## otherwise, count the word as it is
1753365828759:else { count(word) }
1753365828760:} ## end add words
1753365828760:} ## end reading file
1753365828760:## close file if open
1753365828760:#if(textIn == "chooseFile")
1753365828761:#{on.exit(close(text))}
1753365828761:return (c(stats))
1753365828761:}
1753365835944:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE) {
1753365835944:## initialize the named vector (c(word = #count#))
1753365835944:stats = c()
1753365835944:## internal helper function(s)
1753365835944:count <- function(wrd) {
1753365835945:if (wrd %in% names(stats)) { ## update
1753365835945:stats[wrd] <- stats[wrd] + 1
1753365835945:} else { ## create
1753365835945:stats[wrd] <- 1
1753365835945:}
1753365835945:} ## end count helper
1753365835945:clean <- function(ln) {
1753365835946:## any punctuation with a space on either side of it must go
1753365835946:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753365835946:## out with ye contractions (an' what 'bout these?... an bout)
1753365835946:if (!keepContractions) {
1753365835947:ln <- gsub("\\b\\w*'\\w\\b", " ", ln)
1753365835947:}
1753365835947:## filter empty lines
1753365835947:ln <- ln[nzchar(ln)]
1753365835948:return(ln)
1753365835948:} ## end clean
1753365835948:####################### end helper functions #################################
1753365835949:## finding a file or using a string input?
1753365835949:if (textIn == "chooseFile") {
1753365835949:print("Please select your text file.")
1753365835949:## get the file path, open the file for reading
1753365835950:text <- file.choose()
1753365835950:} else { ## for readLines to work, textConnection the string input
1753365835950:text <- textConnection(textIn)
1753365835950:}
1753365835950:## just in case a line ends in a hyphen (initialize var)
1753365835951:last <- ""
1753365835951:lines <- readLines(text)
1753365835951:## go over the file line by line
1753365835951:for (line in lines) {
1753365835951:## no capitals... i don't care. i am machine
1753365835952:## add the last hyphenated word maybe
1753365835952:line <- paste0(last, tolower(line))
1753365835952:## wash, rinse, Repeat!
1753365835952:line <- clean(line)
1753365835953:line <- clean(line) ## because, what if it is double punctuated?!
1753365835953:## split line into words by white space (hyphenated words still intact)
1753365835954:words <- unlist(strsplit(line, "\\s+"))
1753365835954:last <- tail(words, n = 1)
1753365835954:## does the line end in a hyphenated/truncated word?
1753365835955:countLast <- TRUE
1753365835955:print(last)
1753365835956:if (nzchar(last)) {
1753365835956:if (grepl("-$", last)) {
1753365835957:last = substring(last, 1, nchar(last) - 1)
1753365835957:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753365835957:}
1753365835958:}
1753365835958:numWords <- length(words)
1753365835958:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753365835958:## now it can add to the dictionary, and while it's looping these words
1753365835958:## it can check for hyphenated words and split or keep them
1753365835958:for (word in words) {
1753365835959:## track the word it's on (one-indexed language, intuitive yet a pain)
1753365835959:onWord <- onWord + 1
1753365835959:## skipping the last word? break out
1753365835959:if(onWord == numWords && countLast == FALSE){ break }
1753365835960:## if it needs to split hyphenated words (AND the word has a hyphen)
1753365835960:if(!keepHyphens && grepl("-", word))
1753365835960:{
1753365835960:## split the words at the hyphen
1753365835960:both <- strsplit(word, "-")[[1]]
1753365835960:## now do all the dataframing for them
1753365835960:for(part in both)
1753365835961:{ count(part) } ## add/update words (count can figure it out)
1753365835961:} ## otherwise, count the word as it is
1753365835961:else { count(word) }
1753365835961:} ## end add words
1753365835962:} ## end reading file
1753365835962:## close file if open
1753365835962:#if(textIn == "chooseFile")
1753365835962:#{on.exit(close(text))}
1753365835963:return (c(stats))
1753365835963:}
1753365835964:cunts <- counter()
1753365854483:cunts
1753365864080:print_r(cunts)
1753365866552:print(cunts)
1753365877817:for(c in cunts){print(c)}
1753365881217:cunts
1753365897805:print(stats)
1753366047629:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753366047629:{
1753366047629:## finding a file or using a string input?
1753366047629:if(textIn == "chooseFile")
1753366047629:{
1753366047629:print("Please select your text file.")
1753366047629:## get the file path, open the file for reading
1753366047630:file.path <- file.choose()
1753366047630:print(file.path)
1753366047630:file.info <- file.info(file.path)
1753366047630:text <- file(file.path, "r")
1753366047630:}
1753366047630:else ## for readLines to work, textConnection the string input
1753366047630:{ text <- textConnection(textIn) }
1753366047631:## just in case a line ends in a hyphen (initialize var)
1753366047631:last <- ""
1753366047631:lines <- readLines(text)
1753366047631:for(line in lines)
1753366047631:{
1753366047632:print(line)
1753366047632:}
1753366047632:} ## end readTheText
1753366062188:readTheText()
1753366373169:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753366373169:{
1753366373169:## initialize the named vector (c(word = #count#))
1753366373169:stats = c()
1753366373169:## internal helper function(s)
1753366373169:count <- function(wrd)
1753366373169:{
1753366373169:if (wrd %in% names(stats)) ## update
1753366373169:{ stats[wrd] <- stats[wrd] + 1}
1753366373170:else ## create
1753366373170:{ stats[wrd] <- 1}
1753366373170:} ## end count helper
1753366373170:clean <- function(ln)
1753366373170:{
1753366373171:## any punctuation with a space on either side of it must go
1753366373171:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753366373172:## out with ye contractions (an' what 'bout these?... an bout)
1753366373172:if(!keepContractions)
1753366373173:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753366373173:## filter empty lines
1753366373174:lines <- lines[nzchar(lines)]
1753366373174:return (ln)
1753366373175:} ## end clean
1753366373175:####################### end helper functions #################################
1753366373176:## finding a file or using a string input?
1753366373176:if(textIn == "chooseFile")
1753366373176:{
1753366373176:print("Please select your text file.")
1753366373177:## get the file path, open the file for reading
1753366373177:file.path <- file.choose()
1753366373177:print(file.path)
1753366373177:file.info <- file.info(file.path)
1753366373178:text <- file(file.path, "r")
1753366373178:}
1753366373178:else ## for readLines to work, textConnection the string input
1753366373178:{ text <- textConnection(textIn) }
1753366373178:## just in case a line ends in a hyphen (initialize var)
1753366373178:last <- ""
1753366373179:lines <- readLines(text)
1753366373179:for(line in lines)
1753366373179:{
1753366373179:## no capitals... i don't care. i am machine
1753366373179:## add the last hyphenated word maybe
1753366373179:line <- paste0(last, tolower(line))
1753366373180:## wash, rinse, Repeat!
1753366373180:line <- clean(line)
1753366373180:line <- clean(line) ## because, what if it is double punctuated?!
1753366373180:## split line into words by white space (hyphenated words still in tact)
1753366373180:words <- unlist(strsplit(line,"\\s+"))
1753366373180:last <- tail(words, n = 1)
1753366373181:## does the line end in a hyphenated/truncated word?
1753366373181:countLast <- TRUE
1753366373181:## print(last)
1753366373181:if(nzchar(last))
1753366373181:{
1753366373182:if (grep("-$", last))
1753366373182:{
1753366373182:last = substring(last, 0, nchar(last) - 1)
1753366373182:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753366373182:}
1753366373182:}
1753366373183:numWords <- length(words)
1753366373183:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753366373183:## now it can add to the dictionary, and while it's looping these words
1753366373183:## it can check for hyphenated words and split or keep them
1753366373183:for (word in words)
1753366373184:{
1753366373184:## track the word it's on (one-indexed language, intuitive yet a pain)
1753366373184:onWord <- onWord + 1
1753366373184:## skipping the last word? break out
1753366373184:if(onWord == numWords && countLast == FALSE){ break }
1753366373185:## if it needs to split hyphenated words (AND the word has a hyphen)
1753366373185:if(!keepHyphens && grepl("-", word))
1753366373185:{
1753366373185:## split the words at the hyphen
1753366373185:both <- strsplit(word, "-")[[1]]
1753366373185:## now do all the dataframing for them
1753366373186:for(part in both)
1753366373186:{ count(part) } ## add/update words (count can figure it out)
1753366373186:} ## otherwise, count the word as it is
1753366373186:else { count(word) }
1753366373186:} ## end add words
1753366373187:} ## end line in lines
1753366373187:## close file if open
1753366373188:if(textIn == "chooseFile")
1753366373188:{ on.exit(close(text)) }
1753366373188:return (c(stats))
1753366373188:} ## end readTheText
1753366373189:readTheText()
1753366512384:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753366512384:{
1753366512384:## initialize the named vector (c(word = #count#))
1753366512384:stats = c()
1753366512385:## internal helper function(s)
1753366512385:count <- function(wrd)
1753366512385:{
1753366512385:if (wrd %in% names(stats)) ## update
1753366512385:{ stats[wrd] <- stats[wrd] + 1}
1753366512385:else ## create
1753366512385:{ stats[wrd] <- 1}
1753366512386:} ## end count helper
1753366512386:clean <- function(ln)
1753366512386:{
1753366512387:## any punctuation with a space on either side of it must go
1753366512387:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753366512388:## out with ye contractions (an' what 'bout these?... an bout)
1753366512388:if(!keepContractions)
1753366512388:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753366512388:## filter empty lines
1753366512389:lines <- lines[nzchar(lines)]
1753366512389:return (ln)
1753366512389:} ## end clean
1753366512390:####################### end helper functions #################################
1753366512390:## finding a file or using a string input?
1753366512390:if(textIn == "chooseFile")
1753366512390:{
1753366512391:print("Please select your text file.")
1753366512391:## get the file path, open the file for reading
1753366512391:text <- file.choose()
1753366512391:#file.info <- file.info(file.path)
1753366512392:#text <- file(file.path, "r")
1753366512392:}
1753366512392:else ## for readLines to work, textConnection the string input
1753366512392:{ text <- textConnection(textIn) }
1753366512393:## just in case a line ends in a hyphen (initialize var)
1753366512393:last <- ""
1753366512393:lines <- readLines(text)
1753366512393:## go over the file line by line
1753366512394:for (line in lines)
1753366512394:{
1753366512394:## no capitals... i don't care. i am machine
1753366512394:## add the last hyphenated word maybe
1753366512394:line <- paste0(last, tolower(line))
1753366512395:## wash, rinse, Repeat!
1753366512395:line <- clean(line)
1753366512395:line <- clean(line) ## because, what if it is double punctuated?!
1753366512395:## split line into words by white space (hyphenated words still in tact)
1753366512395:words <- unlist(strsplit(line,"\\s+"))
1753366512396:if(length(words) > 0)
1753366512396:{ last <- tail(words, n = 1) }
1753366512396:else { last <- "noHyphen"}
1753366512396:## does the line end in a hyphenated/truncated word?
1753366512397:countLast <- TRUE
1753366512397:## print(last)
1753366512397:if(nzchar(last))
1753366512397:{
1753366512398:if (grep("-$", last))
1753366512398:{
1753366512398:last = substring(last, 0, nchar(last) - 1)
1753366512398:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753366512398:}
1753366512398:}
1753366512399:numWords <- length(words)
1753366512399:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753366512399:## now it can add to the dictionary, and while it's looping these words
1753366512400:## it can check for hyphenated words and split or keep them
1753366512400:for (word in words)
1753366512400:{
1753366512400:## track the word it's on (one-indexed language, intuitive yet a pain)
1753366512400:onWord <- onWord + 1
1753366512400:## skipping the last word? break out
1753366512401:if(onWord == numWords && countLast == FALSE){ break }
1753366512401:## if it needs to split hyphenated words (AND the word has a hyphen)
1753366512401:if(!keepHyphens && grepl("-", word))
1753366512401:{
1753366512402:## split the words at the hyphen
1753366512402:both <- strsplit(word, "-")[[1]]
1753366512402:## now do all the dataframing for them
1753366512402:for(part in both)
1753366512402:{ count(part) } ## add/update words (count can figure it out)
1753366512402:} ## otherwise, count the word as it is
1753366512403:else { count(word) }
1753366512403:} ## end add words
1753366512403:} ## end reading file
1753366512404:## close file if open
1753366512404:if(textIn == "chooseFile")
1753366512404:{ on.exit(close(text)) }
1753366512405:return (c(stats))
1753366512405:}
1753366516558:counter()
1753366682385:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753366682386:{
1753366682386:## initialize the named vector (c(word = #count#))
1753366682386:stats = c()
1753366682386:## internal helper function(s)
1753366682386:count <- function(wrd)
1753366682387:{
1753366682387:if (wrd %in% names(stats)) ## update
1753366682387:{ stats[wrd] <- stats[wrd] + 1}
1753366682387:else ## create
1753366682387:{ stats[wrd] <- 1}
1753366682388:} ## end count helper
1753366682388:clean <- function(ln)
1753366682389:{
1753366682389:## any punctuation with a space on either side of it must go
1753366682389:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753366682389:## out with ye contractions (an' what 'bout these?... an bout)
1753366682390:if(!keepContractions)
1753366682390:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753366682391:## filter empty lines
1753366682391:lines <- lines[nzchar(lines)]
1753366682391:return (ln)
1753366682391:} ## end clean
1753366682391:####################### end helper functions #################################
1753366682392:## finding a file or using a string input?
1753366682392:if(textIn == "chooseFile")
1753366682392:{
1753366682392:print("Please select your text file.")
1753366682393:## get the file path, open the file for reading
1753366682393:text <- file.choose()
1753366682393:#file.info <- file.info(file.path)
1753366682393:#text <- file(file.path, "r")
1753366682393:}
1753366682394:else ## for readLines to work, textConnection the string input
1753366682394:{ text <- textConnection(textIn) }
1753366682395:## just in case a line ends in a hyphen (initialize var)
1753366682395:last <- ""
1753366682395:lines <- readLines(text)
1753366682396:## go over the file line by line
1753366682396:for (line in lines)
1753366682396:{
1753366682396:## no capitals... i don't care. i am machine
1753366682396:## add the last hyphenated word maybe
1753366682396:line <- paste0(last, tolower(line))
1753366682397:## wash, rinse, Repeat!
1753366682397:line <- clean(line)
1753366682397:line <- clean(line) ## because, what if it is double punctuated?!
1753366682397:## split line into words by white space (hyphenated words still in tact)
1753366682397:words <- unlist(strsplit(line,"\\s+"))
1753366682398:if(length(words) > 0)
1753366682398:{ last <- tail(words, n = 1) }
1753366682398:else { last <- "noHyphen"}
1753366682398:## does the line end in a hyphenated/truncated word?
1753366682398:countLast <- TRUE
1753366682399:## print(last)
1753366682399:if(nzchar(last))
1753366682399:{
1753366682399:if (grepl("-$", last))
1753366682399:{
1753366682400:last = substring(last, 0, nchar(last) - 1)
1753366682400:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753366682400:}
1753366682400:}
1753366682400:numWords <- length(words)
1753366682400:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753366682401:## now it can add to the dictionary, and while it's looping these words
1753366682401:## it can check for hyphenated words and split or keep them
1753366682401:for (word in words)
1753366682401:{
1753366682401:## track the word it's on (one-indexed language, intuitive yet a pain)
1753366682402:onWord <- onWord + 1
1753366682402:## skipping the last word? break out
1753366682402:if(onWord == numWords && countLast == FALSE){ break }
1753366682402:## if it needs to split hyphenated words (AND the word has a hyphen)
1753366682402:if(!keepHyphens && grepl("-", word))
1753366682403:{
1753366682403:## split the words at the hyphen
1753366682403:both <- strsplit(word, "-")[[1]]
1753366682403:## now do all the dataframing for them
1753366682403:for(part in both)
1753366682404:{ count(part) } ## add/update words (count can figure it out)
1753366682404:} ## otherwise, count the word as it is
1753366682404:else { count(word) }
1753366682404:} ## end add words
1753366682405:} ## end reading file
1753366682405:## close file if open
1753366682405:if(textIn == "chooseFile")
1753366682406:{ on.exit(close(text)) }
1753366682406:return (c(stats))
1753366682406:}
1753366695629:c <- counter()
1753366731799:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753366731800:{
1753366731800:## initialize the named vector (c(word = #count#))
1753366731800:stats = c()
1753366731800:## internal helper function(s)
1753366731800:count <- function(wrd)
1753366731800:{
1753366731802:if (wrd %in% names(stats)) ## update
1753366731802:{ stats[wrd] <- stats[wrd] + 1}
1753366731803:else ## create
1753366731803:{ stats[wrd] <- 1}
1753366731803:} ## end count helper
1753366731803:clean <- function(ln)
1753366731804:{
1753366731804:## any punctuation with a space on either side of it must go
1753366731804:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753366731804:## out with ye contractions (an' what 'bout these?... an bout)
1753366731804:if(!keepContractions)
1753366731804:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753366731805:## filter empty lines
1753366731805:lines <- lines[nzchar(lines)]
1753366731805:return (ln)
1753366731805:} ## end clean
1753366731806:####################### end helper functions #################################
1753366731806:## finding a file or using a string input?
1753366731806:if(textIn == "chooseFile")
1753366731806:{
1753366731806:print("Please select your text file.")
1753366731807:## get the file path, open the file for reading
1753366731807:text <- file.choose()
1753366731807:#file.info <- file.info(file.path)
1753366731807:#text <- file(file.path, "r")
1753366731807:}
1753366731808:else ## for readLines to work, textConnection the string input
1753366731808:{ text <- textConnection(textIn) }
1753366731808:## just in case a line ends in a hyphen (initialize var)
1753366731808:last <- ""
1753366731809:lines <- readLines(text)
1753366731809:## go over the file line by line
1753366731809:for (line in lines)
1753366731809:{
1753366731810:## no capitals... i don't care. i am machine
1753366731810:## add the last hyphenated word maybe
1753366731810:line <- paste0(last, tolower(line))
1753366731810:## wash, rinse, Repeat!
1753366731810:line <- clean(line)
1753366731811:line <- clean(line) ## because, what if it is double punctuated?!
1753366731811:## split line into words by white space (hyphenated words still in tact)
1753366731811:words <- unlist(strsplit(line,"\\s+"))
1753366731811:if(length(words) > 0)
1753366731811:{ last <- tail(words, n = 1) }
1753366731811:else { last <- "noHyphen"}
1753366731812:## does the line end in a hyphenated/truncated word?
1753366731812:countLast <- TRUE
1753366731812:## print(last)
1753366731812:if(nzchar(last))
1753366731813:{
1753366731813:if (grepl("-$", last))
1753366731813:{
1753366731813:last = substring(last, 0, nchar(last) - 1)
1753366731813:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753366731813:}
1753366731813:}
1753366731814:numWords <- length(words)
1753366731814:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753366731814:## now it can add to the dictionary, and while it's looping these words
1753366731814:## it can check for hyphenated words and split or keep them
1753366731815:for (word in words)
1753366731815:{
1753366731815:## track the word it's on (one-indexed language, intuitive yet a pain)
1753366731815:onWord <- onWord + 1
1753366731815:## skipping the last word? break out
1753366731816:if(onWord == numWords && countLast == FALSE){ break }
1753366731816:## if it needs to split hyphenated words (AND the word has a hyphen)
1753366731816:if(!keepHyphens && grepl("-", word))
1753366731816:{
1753366731816:## split the words at the hyphen
1753366731817:both <- strsplit(word, "-")[[1]]
1753366731817:## now do all the dataframing for them
1753366731817:for(part in both)
1753366731817:{ count(part) } ## add/update words (count can figure it out)
1753366731817:} ## otherwise, count the word as it is
1753366731817:else { count(word) }
1753366731818:} ## end add words
1753366731818:} ## end reading file
1753366731819:## close file if open
1753366731819:#if(textIn == "chooseFile")
1753366731819:#{ on.exit(close(text)) }
1753366731819:return (c(stats))
1753366731820:}
1753366736358:c <- counter()
1753366883981:c
1753367000220:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753367000221:{
1753367000221:## initialize the named vector (c(word = #count#))
1753367000221:stats = c()
1753367000221:## internal helper function(s)
1753367000221:count <- function(wrd)
1753367000221:{
1753367000221:if (wrd %in% names(stats)) ## update
1753367000221:{ stats[wrd] <- stats[wrd] + 1}
1753367000221:else ## create
1753367000222:{ stats[wrd] <- 1}
1753367000222:return (stats)
1753367000222:} ## end count helper
1753367000222:clean <- function(ln)
1753367000223:{
1753367000223:## any punctuation with a space on either side of it must go
1753367000223:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753367000223:## out with ye contractions (an' what 'bout these?... an bout)
1753367000224:if(!keepContractions)
1753367000224:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753367000225:## filter empty lines
1753367000225:lines <- lines[nzchar(lines)]
1753367000225:return (ln)
1753367000225:} ## end clean
1753367000225:####################### end helper functions #################################
1753367000226:## finding a file or using a string input?
1753367000226:if(textIn == "chooseFile")
1753367000226:{
1753367000226:print("Please select your text file.")
1753367000226:## get the file path, open the file for reading
1753367000227:file.path <- file.choose()
1753367000227:print(file.path)
1753367000227:file.info <- file.info(file.path)
1753367000228:text <- file(file.path, "r")
1753367000228:}
1753367000228:else ## for readLines to work, textConnection the string input
1753367000228:{ text <- textConnection(textIn) }
1753367000229:## just in case a line ends in a hyphen (initialize var)
1753367000230:last <- ""
1753367000230:lines <- readLines(text)
1753367000230:for(line in lines)
1753367000230:{
1753367000230:## no capitals... i don't care. i am machine
1753367000230:## add the last hyphenated word maybe
1753367000231:line <- paste0(last, tolower(line))
1753367000231:## wash, rinse, Repeat!
1753367000231:line <- clean(line)
1753367000231:line <- clean(line) ## because, what if it is double punctuated?!
1753367000231:## split line into words by white space (hyphenated words still in tact)
1753367000231:words <- unlist(strsplit(line,"\\s+"))
1753367000232:last <- tail(words, n = 1)
1753367000232:## does the line end in a hyphenated/truncated word?
1753367000232:countLast <- TRUE
1753367000232:## print(last)
1753367000233:if(nzchar(last))
1753367000233:{
1753367000233:if (grep("-$", last))
1753367000233:{
1753367000233:last = substring(last, 0, nchar(last) - 1)
1753367000233:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753367000233:}
1753367000233:}
1753367000234:numWords <- length(words)
1753367000234:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753367000234:## now it can add to the dictionary, and while it's looping these words
1753367000234:## it can check for hyphenated words and split or keep them
1753367000235:for (word in words)
1753367000235:{
1753367000235:## track the word it's on (one-indexed language, intuitive yet a pain)
1753367000235:onWord <- onWord + 1
1753367000235:## skipping the last word? break out
1753367000236:if(onWord == numWords && countLast == FALSE){ break }
1753367000236:## if it needs to split hyphenated words (AND the word has a hyphen)
1753367000236:if(!keepHyphens && grepl("-", word))
1753367000236:{
1753367000236:## split the words at the hyphen
1753367000236:both <- strsplit(word, "-")[[1]]
1753367000237:## now do all the dataframing for them
1753367000237:for(part in both)
1753367000237:{ count(part) } ## add/update words (count can figure it out)
1753367000237:} ## otherwise, count the word as it is
1753367000237:else { count(word) }
1753367000238:} ## end add words
1753367000238:} ## end line in lines
1753367000239:## close file if open
1753367000239:if(textIn == "chooseFile")
1753367000239:{ on.exit(close(text)) }
1753367000239:return (c(stats))
1753367000240:} ## end readTheText
1753367000240:readTheText()
1753367017290:readTheText <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753367017290:{
1753367017291:## initialize the named vector (c(word = #count#))
1753367017291:stats = c()
1753367017291:## internal helper function(s)
1753367017291:count <- function(wrd)
1753367017291:{
1753367017291:if (wrd %in% names(stats)) ## update
1753367017291:{ stats[wrd] <- stats[wrd] + 1}
1753367017292:else ## create
1753367017292:{ stats[wrd] <- 1}
1753367017292:return (stats)
1753367017292:} ## end count helper
1753367017292:clean <- function(ln)
1753367017293:{
1753367017293:## any punctuation with a space on either side of it must go
1753367017293:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753367017293:## out with ye contractions (an' what 'bout these?... an bout)
1753367017294:if(!keepContractions)
1753367017294:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753367017294:## filter empty lines
1753367017294:lines <- lines[nzchar(lines)]
1753367017295:return (ln)
1753367017295:} ## end clean
1753367017295:####################### end helper functions #################################
1753367017296:## finding a file or using a string input?
1753367017296:if(textIn == "chooseFile")
1753367017296:{
1753367017296:print("Please select your text file.")
1753367017297:## get the file path, open the file for reading
1753367017297:file.path <- file.choose()
1753367017297:print(file.path)
1753367017297:file.info <- file.info(file.path)
1753367017298:text <- file(file.path, "r")
1753367017298:}
1753367017298:else ## for readLines to work, textConnection the string input
1753367017298:{ text <- textConnection(textIn) }
1753367017298:## just in case a line ends in a hyphen (initialize var)
1753367017298:last <- ""
1753367017299:lines <- readLines(text)
1753367017299:for(line in lines)
1753367017299:{
1753367017299:## no capitals... i don't care. i am machine
1753367017299:## add the last hyphenated word maybe
1753367017299:line <- paste0(last, tolower(line))
1753367017300:## wash, rinse, Repeat!
1753367017300:line <- clean(line)
1753367017300:line <- clean(line) ## because, what if it is double punctuated?!
1753367017300:## split line into words by white space (hyphenated words still in tact)
1753367017300:words <- unlist(strsplit(line,"\\s+"))
1753367017300:last <- tail(words, n = 1)
1753367017301:## does the line end in a hyphenated/truncated word?
1753367017301:countLast <- TRUE
1753367017301:## print(last)
1753367017301:if(nzchar(last))
1753367017302:{
1753367017302:if (grep("-$", last))
1753367017302:{
1753367017302:last = substring(last, 0, nchar(last) - 1)
1753367017302:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753367017302:}
1753367017302:}
1753367017303:numWords <- length(words)
1753367017303:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753367017303:## now it can add to the dictionary, and while it's looping these words
1753367017303:## it can check for hyphenated words and split or keep them
1753367017304:for (word in words)
1753367017304:{
1753367017304:## track the word it's on (one-indexed language, intuitive yet a pain)
1753367017304:onWord <- onWord + 1
1753367017304:## skipping the last word? break out
1753367017304:if(onWord == numWords && countLast == FALSE){ break }
1753367017305:## if it needs to split hyphenated words (AND the word has a hyphen)
1753367017305:if(!keepHyphens && grepl("-", word))
1753367017305:{
1753367017305:## split the words at the hyphen
1753367017305:both <- strsplit(word, "-")[[1]]
1753367017306:## now do all the dataframing for them
1753367017306:for(part in both)
1753367017306:{ count(part) } ## add/update words (count can figure it out)
1753367017306:} ## otherwise, count the word as it is
1753367017306:else { count(word) }
1753367017307:} ## end add words
1753367017307:} ## end line in lines
1753367017308:## close file if open
1753367017308:if(textIn == "chooseFile")
1753367017308:{ on.exit(close(text)) }
1753367017308:return (c(stats))
1753367017308:} ## end readTheText
1753367017309:r = readTheText()
1753367023264:r
1753367083154:counter <- function(textIn = "chooseFile", keepHyphens = TRUE, keepContractions = TRUE)
1753367083154:{
1753367083154:## initialize the named vector (c(word = #count#))
1753367083154:stats = c()
1753367083154:## internal helper function(s)
1753367083154:count <- function(wrd)
1753367083155:{
1753367083155:if (wrd %in% names(stats)) ## update
1753367083155:{ stats[wrd] <- stats[wrd] + 1}
1753367083155:else ## create
1753367083155:{ stats[wrd] <- 1}
1753367083155:print(stats)
1753367083156:} ## end count helper
1753367083156:clean <- function(ln)
1753367083156:{
1753367083156:## any punctuation with a space on either side of it must go
1753367083156:ln <- gsub("\\s[[:punct:]]|[[:punct:]]\\s", " ", ln)
1753367083157:## out with ye contractions (an' what 'bout these?... an bout)
1753367083157:if(!keepContractions)
1753367083157:{ ln <- gsub("\\b\\w*'\\w\\b", " ", ln)}
1753367083158:## filter empty lines
1753367083158:lines <- lines[nzchar(lines)]
1753367083158:return (ln)
1753367083159:} ## end clean
1753367083159:####################### end helper functions #################################
1753367083159:## finding a file or using a string input?
1753367083160:if(textIn == "chooseFile")
1753367083160:{
1753367083160:print("Please select your text file.")
1753367083161:## get the file path, open the file for reading
1753367083161:text <- file.choose()
1753367083161:#file.info <- file.info(file.path)
1753367083161:#text <- file(file.path, "r")
1753367083161:}
1753367083161:else ## for readLines to work, textConnection the string input
1753367083162:{ text <- textConnection(textIn) }
1753367083162:## just in case a line ends in a hyphen (initialize var)
1753367083162:last <- ""
1753367083163:lines <- readLines(text)
1753367083163:## go over the file line by line
1753367083163:for (line in lines)
1753367083163:{
1753367083164:## no capitals... i don't care. i am machine
1753367083164:## add the last hyphenated word maybe
1753367083164:line <- paste0(last, tolower(line))
1753367083165:## wash, rinse, Repeat!
1753367083165:line <- clean(line)
1753367083166:line <- clean(line) ## because, what if it is double punctuated?!
1753367083166:## split line into words by white space (hyphenated words still in tact)
1753367083166:words <- unlist(strsplit(line,"\\s+"))
1753367083166:if(length(words) > 0)
1753367083167:{ last <- tail(words, n = 1) }
1753367083167:else { last <- "noHyphen"}
1753367083168:## does the line end in a hyphenated/truncated word?
1753367083168:countLast <- TRUE
1753367083168:## print(last)
1753367083169:if(nzchar(last))
1753367083169:{
1753367083169:if (grepl("-$", last))
1753367083169:{
1753367083169:last = substring(last, 0, nchar(last) - 1)
1753367083170:countLast <- FALSE  ## not a whole word (could be a-hole word, though)
1753367083170:}
1753367083170:}
1753367083171:numWords <- length(words)
1753367083171:onWord <- 0 ## reset the counter and limit each time... (hyphenated enders)
1753367083171:## now it can add to the dictionary, and while it's looping these words
1753367083172:## it can check for hyphenated words and split or keep them
1753367083172:for (word in words)
1753367083172:{
1753367083173:## track the word it's on (one-indexed language, intuitive yet a pain)
1753367083173:onWord <- onWord + 1
1753367083173:## skipping the last word? break out
1753367083174:if(onWord == numWords && countLast == FALSE){ break }
1753367083174:## if it needs to split hyphenated words (AND the word has a hyphen)
1753367083174:if(!keepHyphens && grepl("-", word))
1753367083175:{
1753367083175:## split the words at the hyphen
1753367083175:both <- strsplit(word, "-")[[1]]
1753367083175:## now do all the dataframing for them
1753367083175:for(part in both)
1753367083176:{ count(part) } ## add/update words (count can figure it out)
1753367083176:} ## otherwise, count the word as it is
1753367083176:else { count(word) }
1753367083177:} ## end add words
1753367083177:} ## end reading file
1753367083178:## close file if open
1753367083178:#if(textIn == "chooseFile")
1753367083179:#{ on.exit(close(text)) }
1753367083179:return (c(stats))
1753367083179:}
1753367097148:c = counter()
1753367157895:c = counter(keepHyphens = FALSE)
1753381471171:analyze <- function(textIn = "file", keepHyphens = TRUE, keepContractions = TRUE)
1753381471171:{
1753381471172:## pick the file if need be, pick your nose, too!
1753381471172:chooseFile <- function()
1753381471172:{
1753381471172:## choose file or use path?
1753381471172:path <- readline(prompt = "enter the file path if you know it\n
1753381471172:or just hit enter to search")
1753381471172:if (path == "")
1753381471172:{ path <- file.choose() }
1753381471172:## and spit it out
1753381471172:return (path)
1753381471172:}
1753381471173:######################### end helper functions ##############################
1753381471173:## finding a file or using a string input?
1753381471173:if(textIn == "file")
1753381471173:{
1753381471174:## pick the file and verify
1753381471174:path <- chooseFile()
1753381471174:## no good?
1753381471174:whlie(!file.exists(path))
1753381471174:{
1753381471174:print("try again! file not found 404 SOS")
1753381471175:path <- chooseFile()
1753381471175:} ## end while invalid file path
1753381471175:## open the connection to the file
1753381471175:text <- file(path, open = "r")
1753381471175:} ## end if using file
1753381471176:else ## for readLines to work, textConnection the string input
1753381471176:{ text <- textConnection(textIn) }
1753381471176:while(TRUE)
1753381471176:{
1753381471176:line <- readLines(text, n = 1)
1753381471177:## but how does it know there are no more lines? MAGIC
1753381471177:if (length(line) == 0) { break }
1753381471177:print(line)
1753381471177:} ## end while reading lines
1753381471177:## close the file, if it was a file
1753381471178:if (textIn == "file") { close(text) }
1753381471178:} ## end readTheText
1753381471178:analyze()
1753381503389:analyze <- function(textIn = "file", keepHyphens = TRUE, keepContractions = TRUE)
1753381503389:{
1753381503389:## pick the file if need be, pick your nose, too!
1753381503389:chooseFile <- function()
1753381503389:{
1753381503389:## choose file or use path?
1753381503389:path <- readline(prompt = "enter the file path if you know it\n
1753381503390:or just hit enter to search")
1753381503390:if (path == "")
1753381503390:{ path <- file.choose() }
1753381503391:## and spit it out
1753381503391:return (path)
1753381503391:}
1753381503391:######################### end helper functions ##############################
1753381503392:## finding a file or using a string input?
1753381503392:if(textIn == "file")
1753381503392:{
1753381503392:## pick the file and verify
1753381503392:path <- chooseFile()
1753381503393:## no good?
1753381503393:while(!file.exists(path))
1753381503393:{
1753381503393:print("try again! file not found 404 SOS")
1753381503393:path <- chooseFile()
1753381503393:} ## end while invalid file path
1753381503393:## open the connection to the file
1753381503394:text <- file(path, open = "r")
1753381503394:} ## end if using file
1753381503394:else ## for readLines to work, textConnection the string input
1753381503394:{ text <- textConnection(textIn) }
1753381503394:while(TRUE)
1753381503394:{
1753381503395:line <- readLines(text, n = 1)
1753381503395:## but how does it know there are no more lines? MAGIC
1753381503395:if (length(line) == 0) { break }
1753381503395:print(line)
1753381503395:} ## end while reading lines
1753381503396:## close the file, if it was a file
1753381503396:if (textIn == "file") { close(text) }
1753381503396:} ## end readTheText
1753381503396:analyze()
1753381619314:analyze <- function(textIn = "file", keepHyphens = TRUE, keepContractions = TRUE)
1753381619315:{
1753381619315:## pick the file if need be, pick your nose, too!
1753381619315:chooseFile <- function()
1753381619315:{
1753381619315:## choose file or use path?
1753381619315:path <- readline(prompt = "enter the file path if you know it
1753381619315:(or hit enter to search): \n")
1753381619315:if (path == "")
1753381619315:{ path <- file.choose() }
1753381619316:## and spit it out
1753381619316:return (path)
1753381619316:}
1753381619316:######################### end helper functions ##############################
1753381619316:## finding a file or using a string input?
1753381619316:if(textIn == "file")
1753381619317:{
1753381619317:## pick the file and verify
1753381619317:path <- chooseFile()
1753381619317:## no good?
1753381619317:while(!file.exists(path))
1753381619317:{
1753381619317:print("try again! file not found 404 SOS")
1753381619317:path <- chooseFile()
1753381619318:} ## end while invalid file path
1753381619318:## open the connection to the file
1753381619318:text <- file(path, open = "r")
1753381619318:} ## end if using file
1753381619318:else ## for readLines to work, textConnection the string input
1753381619318:{ text <- textConnection(textIn) }
1753381619318:while(TRUE)
1753381619319:{
1753381619319:line <- readLines(text, n = 1)
1753381619319:## but how does it know there are no more lines? MAGIC
1753381619319:if (length(line) == 0) { break }
1753381619319:print(line)
1753381619319:} ## end while reading lines
1753381619320:## close the file, if it was a file
1753381619320:if (textIn == "file") { close(text) }
1753381619320:} ## end readTheText
1753381619320:analyze()
1753384102205:analyze <- function(textIn = "file",
1753384102205:keepHyphens = TRUE,
1753384102205:keepContractions = TRUE)
1753384102205:{
1753384102205:## pick the file if need be, pick your nose, too!
1753384102205:chooseFile <- function()
1753384102205:{
1753384102205:## choose file or use path?
1753384102205:path <- readline(prompt = "enter path or 'enter' to search")
1753384102205:if (path == "")
1753384102206:{ path <- file.choose() }
1753384102206:## and spit it out
1753384102206:return (path)
1753384102206:}
1753384102206:clean <- function(line, hyphens, contractions)
1753384102206:{
1753384102207:## no proper nouns allowed
1753384102207:line <- tolower(line)
1753384102207:## apropros keep hyphy chars
1753384102207:line <- gsub("[^a-z-']", " ", line)
1753384102207:if (!contractions) ## if no contractions, replace 'em with spaces
1753384102207:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384102207:else
1753384102208:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", your_string, perl = TRUE)}
1753384102208:if (!hyphens)
1753384102208:{ line <- gsub("-", " ", line) }
1753384102208:# Use gsub with regex to replace apostrophes between letters
1753384102208:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384102209:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384102209:## does the line end in a hyphenated word? damn, work
1753384102209:partialWord <- FALSE
1753384102209:if (grepl("-$", line))
1753384102209:{ partialWord <- TRUE }
1753384102210:return (c(line, partialWord)
1753384102210:}
1753384114835:analyze <- function(textIn = "file",
1753384114835:keepHyphens = TRUE,
1753384114835:keepContractions = TRUE)
1753384114835:{
1753384114835:## pick the file if need be, pick your nose, too!
1753384114835:chooseFile <- function()
1753384114835:{
1753384114836:## choose file or use path?
1753384114836:path <- readline(prompt = "enter path or 'enter' to search")
1753384114836:if (path == "")
1753384114836:{ path <- file.choose() }
1753384114836:## and spit it out
1753384114836:return (path)
1753384114836:}
1753384114836:clean <- function(line, hyphens, contractions)
1753384114836:{
1753384114837:## no proper nouns allowed
1753384114837:line <- tolower(line)
1753384114837:## apropros keep hyphy chars
1753384114837:line <- gsub("[^a-z-']", " ", line)
1753384114837:if (!contractions) ## if no contractions, replace 'em with spaces
1753384114837:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384114838:else
1753384114838:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", your_string, perl = TRUE)}
1753384114838:if (!hyphens)
1753384114838:{ line <- gsub("-", " ", line) }
1753384114838:# Use gsub with regex to replace apostrophes between letters
1753384114839:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384114839:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384114839:## does the line end in a hyphenated word? damn, work
1753384114839:partialWord <- FALSE
1753384114839:if (grepl("-$", line))
1753384114839:{ partialWord <- TRUE }
1753384114840:return (c(line, partialWord))
1753384114840:}
1753384114840:######################### end helper functions ##############################
1753384114840:## finding a file or using a string input?
1753384114840:if(textIn == "file")
1753384114841:{
1753384114841:## pick the file and verify
1753384114841:path <- chooseFile()
1753384114841:## no good?
1753384114841:while(!file.exists(path))
1753384114841:{
1753384114841:print("try again! file not found 404 SOS")
1753384114841:path <- chooseFile()
1753384114842:} ## end while invalid file path
1753384114842:## open the connection to the file
1753384114842:text <- file(path, open = "r")
1753384114842:} ## end if using file
1753384114842:else ## for readLines to work, textConnection the string input
1753384114843:{ text <- textConnection(textIn) }
1753384114843:stats <- data.frame(word = )
1753384114843:## initialize the variable to hold hyphenated end-of-liners
1753384114843:last <- ""
1753384114844:## initialize a vector to hold the counts
1753384114844:wordCount <- c()
1753384114844:while(TRUE)
1753384114844:{
1753384114845:line <- readLines(text, n = 1)
1753384114845:## if the last line ended with a hyphenated word, paste it on da start
1753384114845:line <- paste0(last, line)
1753384114845:## but how does it know there are no more lines? MAGIC
1753384114846:if (length(line) == 0) { break }
1753384114846:## lines of code where line is on line as line for line (wanna line?)
1753384114846:wash <- clean(line, keepHyphens, keepContractions)
1753384114846:line <- wash[1]
1753384114847:words <- unlist(strsplit(line,"\\s+"))
1753384114847:if (wash[2])
1753384114847:{
1753384114847:## store the last word frag
1753384114847:last <- words[length(words)]
1753384114848:## reset the line to not hold that part
1753384114848:words <- words[-length(words)]
1753384114848:}
1753384114848:for (word in words) ## word
1753384114848:{ wordCount[word] <- wordCount[word] + 1 }
1753384114849:} ## end while reading lines
1753384114849:## close the file, if it was a file
1753384114849:if (textIn == "file") { close(text) }
1753384114849:retrun (wordCount)
1753384114850:} ## end readTheText
1753384114850:wordCnt <- analyze()
1753384189327:analyze <- function(textIn = "file",
1753384189327:keepHyphens = TRUE,
1753384189327:keepContractions = TRUE)
1753384189328:{
1753384189328:######################## start helper functions #############################
1753384189328:## pick the file if need be, pick your nose, too!
1753384189328:chooseFile <- function()
1753384189329:{
1753384189329:## choose file or use path?
1753384189329:path <- readline(prompt = "enter path or 'enter' to search")
1753384189329:if (path == "")
1753384189329:{ path <- file.choose() }
1753384189330:## and spit it out
1753384189330:return (path)
1753384189330:}
1753384189330:clean <- function(line, hyphens, contractions)
1753384189330:{
1753384189331:## no proper nouns allowed
1753384189331:line <- tolower(line)
1753384189331:## apropros keep hyphy chars
1753384189331:line <- gsub("[^a-z-']", " ", line)
1753384189331:if (!contractions) ## if no contractions, replace 'em with spaces
1753384189331:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384189332:else
1753384189332:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", your_string, perl = TRUE)}
1753384189333:if (!hyphens)
1753384189333:{ line <- gsub("-", " ", line) }
1753384189334:# Use gsub with regex to replace apostrophes between letters
1753384189334:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384189334:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384189334:## does the line end in a hyphenated word? damn, work
1753384189335:partialWord <- FALSE
1753384189335:if (grepl("-$", line))
1753384189335:{ partialWord <- TRUE }
1753384189335:return (c(line, partialWord))
1753384189335:}
1753384189335:######################### end helper functions ##############################
1753384189336:## finding a file or using a string input?
1753384189336:if(textIn == "file")
1753384189336:{
1753384189336:## pick the file and verify
1753384189336:path <- chooseFile()
1753384189336:## no good?
1753384189336:while(!file.exists(path))
1753384189336:{
1753384189336:print("try again! file not found 404 SOS")
1753384189337:path <- chooseFile()
1753384189337:} ## end while invalid file path
1753384189337:## open the connection to the file
1753384189337:text <- file(path, open = "r")
1753384189337:} ## end if using file
1753384189337:else ## for readLines to work, textConnection the string input
1753384189337:{ text <- textConnection(textIn) }
1753384189338:## initialize the variable to hold hyphenated end-of-liners
1753384189338:last <- ""
1753384189338:## initialize a vector to hold the counts
1753384189338:wordCount <- c()
1753384189338:while(TRUE)
1753384189338:{
1753384189338:line <- readLines(text, n = 1)
1753384189339:## if the last line ended with a hyphenated word, paste it on da start
1753384189339:line <- paste0(last, line)
1753384189339:## but how does it know there are no more lines? MAGIC
1753384189339:if (length(line) == 0) { break }
1753384189339:## lines of code where line is on line as line for line (wanna line?)
1753384189339:wash <- clean(line, keepHyphens, keepContractions)
1753384189340:line <- wash[1]
1753384189340:words <- unlist(strsplit(line,"\\s+"))
1753384189340:if (wash[2])
1753384189340:{
1753384189340:## store the last word frag
1753384189340:last <- words[length(words)]
1753384189341:## reset the line to not hold that part
1753384189341:words <- words[-length(words)]
1753384189341:}
1753384189341:for (word in words) ## word
1753384189341:{ wordCount[word] <- wordCount[word] + 1 }
1753384189342:} ## end while reading lines
1753384189342:## close the file, if it was a file
1753384189342:if (textIn == "file") { close(text) }
1753384189342:retrun (wordCount)
1753384189343:} ## end readTheText
1753384193717:analyze <- function(textIn = "file",
1753384193717:keepHyphens = TRUE,
1753384193717:keepContractions = TRUE)
1753384193717:{
1753384193718:######################## start helper functions #############################
1753384193718:## pick the file if need be, pick your nose, too!
1753384193718:chooseFile <- function()
1753384193718:{
1753384193718:## choose file or use path?
1753384193718:path <- readline(prompt = "enter path or 'enter' to search")
1753384193719:if (path == "")
1753384193719:{ path <- file.choose() }
1753384193719:## and spit it out
1753384193719:return (path)
1753384193719:}
1753384193719:clean <- function(line, hyphens, contractions)
1753384193719:{
1753384193720:## no proper nouns allowed
1753384193720:line <- tolower(line)
1753384193720:## apropros keep hyphy chars
1753384193720:line <- gsub("[^a-z-']", " ", line)
1753384193720:if (!contractions) ## if no contractions, replace 'em with spaces
1753384193720:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384193720:else
1753384193720:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", your_string, perl = TRUE)}
1753384193721:if (!hyphens)
1753384193721:{ line <- gsub("-", " ", line) }
1753384193721:# Use gsub with regex to replace apostrophes between letters
1753384193721:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384193721:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384193722:## does the line end in a hyphenated word? damn, work
1753384193722:partialWord <- FALSE
1753384193722:if (grepl("-$", line))
1753384193722:{ partialWord <- TRUE }
1753384193722:return (c(line, partialWord))
1753384193723:}
1753384193723:######################### end helper functions ##############################
1753384193723:## finding a file or using a string input?
1753384193723:if(textIn == "file")
1753384193723:{
1753384193723:## pick the file and verify
1753384193724:path <- chooseFile()
1753384193724:## no good?
1753384193724:while(!file.exists(path))
1753384193724:{
1753384193724:print("try again! file not found 404 SOS")
1753384193724:path <- chooseFile()
1753384193725:} ## end while invalid file path
1753384193725:## open the connection to the file
1753384193725:text <- file(path, open = "r")
1753384193725:} ## end if using file
1753384193726:else ## for readLines to work, textConnection the string input
1753384193726:{ text <- textConnection(textIn) }
1753384193726:## initialize the variable to hold hyphenated end-of-liners
1753384193726:last <- ""
1753384193726:## initialize a vector to hold the counts
1753384193726:wordCount <- c()
1753384193727:while(TRUE)
1753384193727:{
1753384193727:line <- readLines(text, n = 1)
1753384193727:## if the last line ended with a hyphenated word, paste it on da start
1753384193727:line <- paste0(last, line)
1753384193728:## but how does it know there are no more lines? MAGIC
1753384193728:if (length(line) == 0) { break }
1753384193728:## lines of code where line is on line as line for line (wanna line?)
1753384193728:wash <- clean(line, keepHyphens, keepContractions)
1753384193728:line <- wash[1]
1753384193729:words <- unlist(strsplit(line,"\\s+"))
1753384193729:if (wash[2])
1753384193729:{
1753384193729:## store the last word frag
1753384193729:last <- words[length(words)]
1753384193730:## reset the line to not hold that part
1753384193730:words <- words[-length(words)]
1753384193730:}
1753384193730:for (word in words) ## word
1753384193730:{ wordCount[word] <- wordCount[word] + 1 }
1753384193731:} ## end while reading lines
1753384193731:## close the file, if it was a file
1753384193731:if (textIn == "file") { close(text) }
1753384193731:retrun (wordCount)
1753384193732:} ## end readTheText
1753384193732:wordCnt <- analyze()
1753384271771:analyze <- function(textIn = "file",
1753384271772:keepHyphens = TRUE,
1753384271772:keepContractions = TRUE)
1753384271772:{
1753384271772:######################## start helper functions #############################
1753384271772:## pick the file if need be, pick your nose, too!
1753384271772:chooseFile <- function()
1753384271772:{
1753384271772:## choose file or use path?
1753384271772:path <- readline(prompt = "enter path or 'enter' to search")
1753384271773:if (path == "")
1753384271773:{ path <- file.choose() }
1753384271773:## and spit it out
1753384271773:return (path)
1753384271773:}
1753384271774:clean <- function(line, hyphens, contractions)
1753384271774:{
1753384271774:## no proper nouns allowed
1753384271774:line <- tolower(line)
1753384271774:## apropros keep hyphy chars
1753384271774:line <- gsub("[^a-z'-]", " ", line)
1753384271774:if (!contractions) ## if no contractions, replace 'em with spaces
1753384271775:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384271775:else
1753384271775:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", your_string, perl = TRUE)}
1753384271775:if (!hyphens)
1753384271775:{ line <- gsub("-", " ", line) }
1753384271776:# Use gsub with regex to replace apostrophes between letters
1753384271776:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384271776:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384271776:## does the line end in a hyphenated word? damn, work
1753384271776:partialWord <- FALSE
1753384271777:if (grepl("-$", line))
1753384271777:{ partialWord <- TRUE }
1753384271777:return (c(line, partialWord))
1753384271777:}
1753384271778:######################### end helper functions ##############################
1753384271778:## finding a file or using a string input?
1753384271778:if(textIn == "file")
1753384271778:{
1753384271779:## pick the file and verify
1753384271779:path <- chooseFile()
1753384271779:## no good?
1753384271779:while(!file.exists(path))
1753384271780:{
1753384271780:print("try again! file not found 404 SOS")
1753384271780:path <- chooseFile()
1753384271780:} ## end while invalid file path
1753384271780:## open the connection to the file
1753384271780:text <- file(path, open = "r")
1753384271781:} ## end if using file
1753384271781:else ## for readLines to work, textConnection the string input
1753384271781:{ text <- textConnection(textIn) }
1753384271781:## initialize the variable to hold hyphenated end-of-liners
1753384271781:last <- ""
1753384271781:## initialize a vector to hold the counts
1753384271781:wordCount <- c()
1753384271782:while(TRUE)
1753384271782:{
1753384271782:line <- readLines(text, n = 1)
1753384271782:## if the last line ended with a hyphenated word, paste it on da start
1753384271782:line <- paste0(last, line)
1753384271782:## but how does it know there are no more lines? MAGIC
1753384271783:if (length(line) == 0) { break }
1753384271783:## lines of code where line is on line as line for line (wanna line?)
1753384271783:wash <- clean(line, keepHyphens, keepContractions)
1753384271783:line <- wash[1]
1753384271783:words <- unlist(strsplit(line,"\\s+"))
1753384271784:if (wash[2])
1753384271784:{
1753384271784:## store the last word frag
1753384271784:last <- words[length(words)]
1753384271784:## reset the line to not hold that part
1753384271784:words <- words[-length(words)]
1753384271784:}
1753384271785:for (word in words) ## word
1753384271785:{ wordCount[word] <- wordCount[word] + 1 }
1753384271785:} ## end while reading lines
1753384271786:## close the file, if it was a file
1753384271786:if (textIn == "file") { close(text) }
1753384271786:retrun (wordCount)
1753384271786:} ## end readTheText
1753384280410:analyze <- function(textIn = "file",
1753384280410:keepHyphens = TRUE,
1753384280410:keepContractions = TRUE)
1753384280411:{
1753384280411:######################## start helper functions #############################
1753384280411:## pick the file if need be, pick your nose, too!
1753384280411:chooseFile <- function()
1753384280411:{
1753384280411:## choose file or use path?
1753384280411:path <- readline(prompt = "enter path or 'enter' to search")
1753384280411:if (path == "")
1753384280411:{ path <- file.choose() }
1753384280411:## and spit it out
1753384280412:return (path)
1753384280412:}
1753384280412:clean <- function(line, hyphens, contractions)
1753384280413:{
1753384280413:## no proper nouns allowed
1753384280413:line <- tolower(line)
1753384280413:## apropros keep hyphy chars
1753384280413:line <- gsub("[^a-z'-]", " ", line)
1753384280414:if (!contractions) ## if no contractions, replace 'em with spaces
1753384280414:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384280414:else
1753384280414:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", your_string, perl = TRUE)}
1753384280414:if (!hyphens)
1753384280415:{ line <- gsub("-", " ", line) }
1753384280415:# Use gsub with regex to replace apostrophes between letters
1753384280415:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384280415:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384280415:## does the line end in a hyphenated word? damn, work
1753384280415:partialWord <- FALSE
1753384280415:if (grepl("-$", line))
1753384280416:{ partialWord <- TRUE }
1753384280416:return (c(line, partialWord))
1753384280416:}
1753384280416:######################### end helper functions ##############################
1753384280417:## finding a file or using a string input?
1753384280417:if(textIn == "file")
1753384280417:{
1753384280417:## pick the file and verify
1753384280417:path <- chooseFile()
1753384280417:## no good?
1753384280418:while(!file.exists(path))
1753384280418:{
1753384280418:print("try again! file not found 404 SOS")
1753384280418:path <- chooseFile()
1753384280418:} ## end while invalid file path
1753384280419:## open the connection to the file
1753384280419:text <- file(path, open = "r")
1753384280419:} ## end if using file
1753384280419:else ## for readLines to work, textConnection the string input
1753384280419:{ text <- textConnection(textIn) }
1753384280420:## initialize the variable to hold hyphenated end-of-liners
1753384280420:last <- ""
1753384280420:## initialize a vector to hold the counts
1753384280420:wordCount <- c()
1753384280420:while(TRUE)
1753384280421:{
1753384280421:line <- readLines(text, n = 1)
1753384280421:## if the last line ended with a hyphenated word, paste it on da start
1753384280421:line <- paste0(last, line)
1753384280421:## but how does it know there are no more lines? MAGIC
1753384280421:if (length(line) == 0) { break }
1753384280422:## lines of code where line is on line as line for line (wanna line?)
1753384280422:wash <- clean(line, keepHyphens, keepContractions)
1753384280422:line <- wash[1]
1753384280422:words <- unlist(strsplit(line,"\\s+"))
1753384280422:if (wash[2])
1753384280423:{
1753384280423:## store the last word frag
1753384280423:last <- words[length(words)]
1753384280423:## reset the line to not hold that part
1753384280423:words <- words[-length(words)]
1753384280423:}
1753384280424:for (word in words) ## word
1753384280424:{ wordCount[word] <- wordCount[word] + 1 }
1753384280424:} ## end while reading lines
1753384280424:## close the file, if it was a file
1753384280425:if (textIn == "file") { close(text) }
1753384280425:retrun (wordCount)
1753384280425:} ## end readTheText
1753384280425:wordCnt <- analyze()
1753384369676:analyze <- function(textIn = "file",
1753384369676:keepHyphens = TRUE,
1753384369676:keepContractions = TRUE)
1753384369676:{
1753384369676:######################## start helper functions #############################
1753384369677:## pick the file if need be, pick your nose, too!
1753384369677:chooseFile <- function()
1753384369677:{
1753384369677:## choose file or use path?
1753384369678:path <- readline(prompt = "enter path or 'enter' to search")
1753384369678:if (path == "")
1753384369678:{ path <- file.choose() }
1753384369678:## and spit it out
1753384369679:return (path)
1753384369679:}
1753384369680:## clean the line, keep or remove hyphens and contractions
1753384369680:clean <- function(line, hyphens, contractions)
1753384369680:{
1753384369680:## no proper nouns allowed
1753384369680:line <- tolower(line)
1753384369680:## apropros keep hyphy chars
1753384369681:line <- gsub("[^a-z'-]", " ", line)
1753384369681:if (!contractions) ## if no contractions, replace 'em with spaces
1753384369681:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384369681:else
1753384369681:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", line, perl = TRUE)}
1753384369681:if (!hyphens)
1753384369681:{ line <- gsub("-", " ", line) }
1753384369682:# Use gsub with regex to replace apostrophes between letters
1753384369682:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384369682:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384369682:## does the line end in a hyphenated word? damn, work
1753384369682:partialWord <- FALSE
1753384369683:if (grepl("-$", line))
1753384369683:{ partialWord <- TRUE }
1753384369683:return (c(line, partialWord))
1753384369683:}
1753384369683:######################### end helper functions ##############################
1753384369684:## finding a file or using a string input?
1753384369684:if(textIn == "file")
1753384369684:{
1753384369684:## pick the file and verify
1753384369684:path <- chooseFile()
1753384369685:## no good?
1753384369685:while(!file.exists(path))
1753384369685:{
1753384369685:print("try again! file not found 404 SOS")
1753384369685:path <- chooseFile()
1753384369685:} ## end while invalid file path
1753384369686:## open the connection to the file
1753384369686:text <- file(path, open = "r")
1753384369686:} ## end if using file
1753384369686:else ## for readLines to work, textConnection the string input
1753384369687:{ text <- textConnection(textIn) }
1753384369687:## initialize the variable to hold hyphenated end-of-liners
1753384369687:last <- ""
1753384369687:## initialize a vector to hold the counts
1753384369687:wordCount <- c()
1753384369688:while(TRUE)
1753384369688:{
1753384369688:line <- readLines(text, n = 1)
1753384369688:## if the last line ended with a hyphenated word, paste it on da start
1753384369688:line <- paste0(last, line)
1753384369688:## but how does it know there are no more lines? MAGIC
1753384369688:if (length(line) == 0) { break }
1753384369689:## lines of code where line is on line as line for line (wanna line?)
1753384369689:wash <- clean(line, keepHyphens, keepContractions)
1753384369689:line <- wash[1]
1753384369689:words <- unlist(strsplit(line,"\\s+"))
1753384369690:if (wash[2])
1753384369690:{
1753384369690:## store the last word frag
1753384369690:last <- words[length(words)]
1753384369690:## reset the line to not hold that part
1753384369690:words <- words[-length(words)]
1753384369690:}
1753384369691:for (word in words) ## word
1753384369691:{ wordCount[word] <- wordCount[word] + 1 }
1753384369691:} ## end while reading lines
1753384369692:## close the file, if it was a file
1753384369692:if (textIn == "file") { close(text) }
1753384369692:retrun (wordCount)
1753384369692:} ## end readTheText
1753384372686:analyze <- function(textIn = "file",
1753384372687:keepHyphens = TRUE,
1753384372687:keepContractions = TRUE)
1753384372687:{
1753384372687:######################## start helper functions #############################
1753384372687:## pick the file if need be, pick your nose, too!
1753384372687:chooseFile <- function()
1753384372687:{
1753384372688:## choose file or use path?
1753384372688:path <- readline(prompt = "enter path or 'enter' to search")
1753384372688:if (path == "")
1753384372688:{ path <- file.choose() }
1753384372688:## and spit it out
1753384372689:return (path)
1753384372689:}
1753384372689:## clean the line, keep or remove hyphens and contractions
1753384372689:clean <- function(line, hyphens, contractions)
1753384372689:{
1753384372689:## no proper nouns allowed
1753384372689:line <- tolower(line)
1753384372689:## apropros keep hyphy chars
1753384372690:line <- gsub("[^a-z'-]", " ", line)
1753384372690:if (!contractions) ## if no contractions, replace 'em with spaces
1753384372690:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384372690:else
1753384372690:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", line, perl = TRUE)}
1753384372691:if (!hyphens)
1753384372691:{ line <- gsub("-", " ", line) }
1753384372691:# Use gsub with regex to replace apostrophes between letters
1753384372691:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384372691:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384372691:## does the line end in a hyphenated word? damn, work
1753384372692:partialWord <- FALSE
1753384372692:if (grepl("-$", line))
1753384372692:{ partialWord <- TRUE }
1753384372692:return (c(line, partialWord))
1753384372692:}
1753384372693:######################### end helper functions ##############################
1753384372693:## finding a file or using a string input?
1753384372693:if(textIn == "file")
1753384372693:{
1753384372693:## pick the file and verify
1753384372693:path <- chooseFile()
1753384372694:## no good?
1753384372694:while(!file.exists(path))
1753384372694:{
1753384372694:print("try again! file not found 404 SOS")
1753384372694:path <- chooseFile()
1753384372695:} ## end while invalid file path
1753384372695:## open the connection to the file
1753384372695:text <- file(path, open = "r")
1753384372695:} ## end if using file
1753384372695:else ## for readLines to work, textConnection the string input
1753384372696:{ text <- textConnection(textIn) }
1753384372696:## initialize the variable to hold hyphenated end-of-liners
1753384372696:last <- ""
1753384372696:## initialize a vector to hold the counts
1753384372696:wordCount <- c()
1753384372697:while(TRUE)
1753384372697:{
1753384372697:line <- readLines(text, n = 1)
1753384372697:## if the last line ended with a hyphenated word, paste it on da start
1753384372697:line <- paste0(last, line)
1753384372697:## but how does it know there are no more lines? MAGIC
1753384372697:if (length(line) == 0) { break }
1753384372698:## lines of code where line is on line as line for line (wanna line?)
1753384372698:wash <- clean(line, keepHyphens, keepContractions)
1753384372698:line <- wash[1]
1753384372698:words <- unlist(strsplit(line,"\\s+"))
1753384372699:if (wash[2])
1753384372699:{
1753384372699:## store the last word frag
1753384372699:last <- words[length(words)]
1753384372699:## reset the line to not hold that part
1753384372699:words <- words[-length(words)]
1753384372699:}
1753384372700:for (word in words) ## word
1753384372700:{ wordCount[word] <- wordCount[word] + 1 }
1753384372700:} ## end while reading lines
1753384372700:## close the file, if it was a file
1753384372701:if (textIn == "file") { close(text) }
1753384372701:retrun (wordCount)
1753384372701:} ## end readTheText
1753384372702:wordCnt <- analyze()
1753384534868:analyze <- function(textIn = "file",
1753384534868:keepHyphens = TRUE,
1753384534868:keepContractions = TRUE)
1753384534869:{
1753384534869:######################## start helper functions #############################
1753384534869:## pick the file if need be, pick your nose, too!
1753384534869:chooseFile <- function()
1753384534869:{
1753384534869:## choose file or use path?
1753384534869:path <- readline(prompt = "enter path or 'enter' to search")
1753384534869:if (path == "")
1753384534869:{ path <- file.choose() }
1753384534870:## and spit it out
1753384534870:return (path)
1753384534870:}
1753384534870:## clean the line, keep or remove hyphens and contractions
1753384534870:clean <- function(line, hyphens, contractions)
1753384534870:{
1753384534870:## no proper nouns allowed
1753384534870:line <- tolower(line)
1753384534871:## apropros keep hyphy chars
1753384534871:line <- gsub("[^a-z'-]", " ", line)
1753384534871:if (!contractions) ## if no contractions, replace 'em with spaces
1753384534871:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384534871:else
1753384534871:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", line, perl = TRUE)}
1753384534871:if (!hyphens)
1753384534872:{ line <- gsub("-", " ", line) }
1753384534872:# Use gsub with regex to replace apostrophes between letters
1753384534872:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384534872:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384534872:## does the line end in a hyphenated word? damn, work
1753384534872:partialWord <- FALSE
1753384534873:if (grepl("-$", line))
1753384534873:{ partialWord <- TRUE }
1753384534873:return (c(line, partialWord))
1753384534873:}
1753384534873:######################### end helper functions ##############################
1753384534874:## finding a file or using a string input?
1753384534874:if(textIn == "file")
1753384534874:{
1753384534874:## pick the file and verify
1753384534874:path <- chooseFile()
1753384534874:## no good?
1753384534875:while(!file.exists(path))
1753384534875:{
1753384534875:print("try again! file not found 404 SOS")
1753384534875:path <- chooseFile()
1753384534875:} ## end while invalid file path
1753384534875:## open the connection to the file
1753384534876:text <- file(path, open = "r")
1753384534876:} ## end if using file
1753384534876:else ## for readLines to work, textConnection the string input
1753384534876:{ text <- textConnection(textIn) }
1753384534877:## initialize the variable to hold hyphenated end-of-liners
1753384534877:last <- ""
1753384534877:## initialize a vector to hold the counts
1753384534877:wordCount <- c()
1753384534878:while(TRUE)
1753384534878:{
1753384534878:line <- readLines(text, n = 1)
1753384534878:## if the last line ended with a hyphenated word, paste it on da start
1753384534878:line <- paste0(last, line)
1753384534879:## but how does it know there are no more lines? MAGIC
1753384534879:if (length(line) == 0) { break }
1753384534879:## lines of code where line is on line as line for line (wanna line?)
1753384534880:wash <- clean(line, keepHyphens, keepContractions)
1753384534880:line <- wash[1]
1753384534880:words <- unlist(strsplit(line,"\\s+"))
1753384534881:if (wash[2])
1753384534881:{
1753384534881:## store the last word frag
1753384534881:last <- words[length(words)]
1753384534881:## reset the line to not hold that part
1753384534882:words <- words[-length(words)]
1753384534882:}
1753384534882:for (word in words) ## word
1753384534883:{ wordCount[word] <- wordCount[word] + 1 }
1753384534884:} ## end while reading lines
1753384534884:## close the file, if it was a file
1753384534884:if (textIn == "file") { close(text) }
1753384534888:retrun (wordCount)
1753384534888:} ## end readTheText
1753384539104:wordCnt <- analyze()
1753384685525:analyze <- function(textIn = "file",
1753384685525:keepHyphens = TRUE,
1753384685525:keepContractions = TRUE)
1753384685525:{
1753384685526:######################## start helper functions #############################
1753384685526:## pick the file if need be, pick your nose, too!
1753384685526:chooseFile <- function()
1753384685526:{
1753384685526:## choose file or use path?
1753384685526:path <- readline(prompt = "enter path or 'enter' to search")
1753384685526:if (path == "")
1753384685527:{ path <- file.choose() }
1753384685527:if(!file.exists(path))
1753384685527:{
1753384685527:print("try again! file not found 404 SOS")
1753384685527:## try again
1753384685527:chooseFile()
1753384685527:} ## end while invalid file path
1753384685527:## and spit it out
1753384685528:return (path)
1753384685528:}
1753384685528:## clean the line, keep or remove hyphens and contractions
1753384685528:clean <- function(line, hyphens, contractions)
1753384685528:{
1753384685528:## no proper nouns allowed
1753384685528:line <- tolower(line)
1753384685529:## apropros keep hyphy chars
1753384685529:line <- gsub("[^a-z'-]", " ", line)
1753384685529:if (!contractions) ## if no contractions, replace 'em with spaces
1753384685529:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384685529:else
1753384685529:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", line, perl = TRUE)}
1753384685530:if (!hyphens)
1753384685530:{ line <- gsub("-", " ", line) }
1753384685530:# Use gsub with regex to replace apostrophes between letters
1753384685530:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384685530:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384685531:## does the line end in a hyphenated word? damn, work
1753384685531:partialWord <- FALSE
1753384685531:if (grepl("-$", line))
1753384685531:{ partialWord <- TRUE }
1753384685532:return (c(line, partialWord))
1753384685532:}
1753384685532:######################### end helper functions ##############################
1753384685533:## finding a file or using a string input?
1753384685533:if(textIn == "file")
1753384685533:{
1753384685533:## pick the file and verify
1753384685533:path <- chooseFile()
1753384685533:## open the connection to the file
1753384685534:text <- file(path, open = "r")
1753384685534:} ## end if using file
1753384685534:else ## for readLines to work, textConnection the string input
1753384685534:{ text <- textConnection(textIn) }
1753384685535:## initialize the variable to hold hyphenated end-of-liners
1753384685535:last <- ""
1753384685535:## initialize a vector to hold the counts
1753384685535:wordCount <- c()
1753384685535:while(TRUE)
1753384685536:{
1753384685536:line <- readLines(text, n = 1)
1753384685536:## if the last line ended with a hyphenated word, paste it on da start
1753384685536:line <- paste0(last, line)
1753384685537:## but how does it know there are no more lines? MAGIC
1753384685537:if (length(line) == 0) { break }
1753384685537:## lines of code where line is on line as line for line (wanna line?)
1753384685537:wash <- clean(line, keepHyphens, keepContractions)
1753384685538:line <- wash[1]
1753384685538:words <- unlist(strsplit(line,"\\s+"))
1753384685538:if (wash[2])
1753384685538:{
1753384685538:## store the last word frag
1753384685539:last <- words[length(words)]
1753384685539:## reset the line to not hold that part
1753384685539:words <- words[-length(words)]
1753384685539:}
1753384685539:for (word in words) ## word
1753384685539:{ wordCount[word] <- wordCount[word] + 1 }
1753384685540:} ## end while reading lines
1753384685540:## close the file, if it was a file
1753384685540:if (textIn == "file") { close(text) }
1753384685540:retrun (wordCount)
1753384685541:} ## end readTheText
1753384685541:wordCnt <- analyze()
1753384814310:analyze <- function(textIn = "file",
1753384814310:keepHyphens = TRUE,
1753384814310:keepContractions = TRUE)
1753384814310:{
1753384814310:######################## start helper functions #############################
1753384814310:## pick the file if need be, pick your nose, too!
1753384814311:chooseFile <- function()
1753384814311:{
1753384814311:## choose file or use path?
1753384814311:path <- readline(prompt = "enter path or 'enter' to search")
1753384814311:if (path == "")
1753384814311:{ path <- file.choose() }
1753384814311:if(!file.exists(path))
1753384814311:{
1753384814311:print("try again! file not found 404 SOS")
1753384814311:## try again
1753384814312:chooseFile()
1753384814312:} ## end while invalid file path
1753384814312:## and spit it out
1753384814313:return (path)
1753384814313:}
1753384814313:## clean the line, keep or remove hyphens and contractions
1753384814313:clean <- function(line, hyphens, contractions)
1753384814313:{
1753384814313:## no proper nouns allowed
1753384814314:line <- tolower(line)
1753384814314:## apropros keep hyphy chars
1753384814314:line <- gsub("[^a-z'-]", " ", line)
1753384814314:if (!contractions) ## if no contractions, replace 'em with spaces
1753384814315:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384814315:else
1753384814315:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", line, perl = TRUE)}
1753384814315:if (!hyphens)
1753384814315:{ line <- gsub("-", " ", line) }
1753384814316:# Use gsub with regex to replace apostrophes between letters
1753384814316:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384814316:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384814316:## does the line end in a hyphenated word? damn, work
1753384814316:partialWord <- FALSE
1753384814317:if (grepl("-$", line))
1753384814317:{ partialWord <- TRUE }
1753384814317:return (c(line, partialWord))
1753384814317:}
1753384814318:######################### end helper functions ##############################
1753384814319:## finding a file or using a string input?
1753384814319:if(textIn == "file")
1753384814319:{
1753384814319:## pick the file and verify
1753384814319:path <- chooseFile()
1753384814320:## open the connection to the file
1753384814320:text <- file(path, open = "r")
1753384814320:} ## end if using file
1753384814320:else ## for readLines to work, textConnection the string input
1753384814320:{ text <- textConnection(textIn) }
1753384814321:## initialize the variable to hold hyphenated end-of-liners
1753384814321:last <- ""
1753384814321:## initialize a vector to hold the counts
1753384814321:wordCount <- c()
1753384814321:while(TRUE)
1753384814321:{
1753384814321:line <- readLines(text, n = 1)
1753384814322:## if the last line ended with a hyphenated word, paste it on da start
1753384814322:line <- paste0(last, line)
1753384814322:## but how does it know there are no more lines? MAGIC
1753384814322:if (length(line) == 0) { break }
1753384814322:## lines of code where line is on line as line for line (wanna line?)
1753384814323:wash <- clean(line, keepHyphens, keepContractions)
1753384814323:line <- wash[1]
1753384814323:words <- unlist(strsplit(line,"\\s+"))
1753384814323:if (wash[2])
1753384814323:{
1753384814324:## store the last word frag
1753384814324:last <- words[length(words)]
1753384814324:## reset the line to not hold that part
1753384814324:words <- words[-length(words)]
1753384814325:}
1753384814325:for (word in words) ## word
1753384814325:{ wordCount[word] <- wordCount[word] + 1 }
1753384814326:} ## end while reading lines
1753384814326:## close the file, if it was a file
1753384814326:if (textIn == "file") { close(text) }
1753384814326:retrun (wordCount)
1753384814327:} ## end readTheText
1753384843488:wordCnt <- analyze("This is! som'n fresh AND it's fresh")
1753384995331:analyze <- function(textIn = "file",
1753384995331:keepHyphens = TRUE,
1753384995332:keepContractions = TRUE)
1753384995332:{
1753384995332:######################## start helper functions #############################
1753384995332:## pick the file if need be, pick your nose, too!
1753384995332:chooseFile <- function()
1753384995332:{
1753384995332:## choose file or use path?
1753384995332:path <- readline(prompt = "enter path or 'enter' to search")
1753384995332:if (path == "")
1753384995332:{ path <- file.choose() }
1753384995333:if(!file.exists(path))
1753384995333:{
1753384995333:print("try again! file not found 404 SOS")
1753384995333:## try again
1753384995333:chooseFile()
1753384995333:} ## end while invalid file path
1753384995333:## and spit it out
1753384995333:return (path)
1753384995333:}
1753384995334:## clean the line, keep or remove hyphens and contractions
1753384995334:clean <- function(line, hyphens, contractions)
1753384995334:{
1753384995334:## no proper nouns allowed
1753384995334:line <- tolower(line)
1753384995334:## apropros keep hyphy chars
1753384995334:line <- gsub("[^a-z'-]", " ", line)
1753384995335:print("removed punctuation?")
1753384995335:print(line)
1753384995335:if (!contractions) ## if no contractions, replace 'em with spaces
1753384995335:{ line <- gsub("(?<=\\w)'(?=\\w)", " ", line, perl = TRUE)    }
1753384995335:else
1753384995335:{ line <- gsub("(?<!\\w)'|'(?!\\w)", " ", line, perl = TRUE)}
1753384995336:if (!hyphens)
1753384995336:{ line <- gsub("-", " ", line) }
1753384995336:# Use gsub with regex to replace apostrophes between letters
1753384995336:# The pattern "(?<=\\w)'(?=\\w)" matches an apostrophe between word characters
1753384995336:modified_text <- gsub("(?<=\\w)'(?=\\w)", "", text, perl = TRUE)
1753384995336:## does the line end in a hyphenated word? damn, work
1753384995337:partialWord <- FALSE
1753384995337:if (grepl("-$", line))
1753384995337:{ partialWord <- TRUE }
1753384995337:return (c(line, partialWord))
1753384995337:}
1753384995338:######################### end helper functions ##############################
1753384995338:## finding a file or using a string input?
1753384995338:if(textIn == "file")
1753384995338:{
1753384995338:## pick the file and verify
1753384995339:path <- chooseFile()
1753384995339:## open the connection to the file
1753384995339:text <- file(path, open = "r")
1753384995339:} ## end if using file
1753384995339:else ## for readLines to work, textConnection the string input
1753384995340:{ text <- textConnection(textIn) }
1753384995340:## initialize the variable to hold hyphenated end-of-liners
1753384995340:last <- ""
1753384995340:## initialize a vector to hold the counts
1753384995340:wordCount <- c()
1753384995341:while(TRUE)
1753384995341:{
1753384995341:line <- readLines(text, n = 1)
1753384995342:## if the last line ended with a hyphenated word, paste it on da start
1753384995342:line <- paste0(last, line)
1753384995342:## but how does it know there are no more lines? MAGIC
1753384995342:if (length(line) == 0) { break }
1753384995343:## lines of code where line is on line as line for line (wanna line?)
1753384995343:wash <- clean(line, keepHyphens, keepContractions)
1753384995343:line <- wash[1]
1753384995344:words <- unlist(strsplit(line,"\\s+"))
1753384995344:if (wash[2])
1753384995344:{
1753384995344:## store the last word frag
1753384995344:last <- words[length(words)]
1753384995345:## reset the line to not hold that part
1753384995345:words <- words[-length(words)]
1753384995345:}
1753384995346:for (word in words) ## word
1753384995346:{ wordCount[word] <- wordCount[word] + 1 }
1753384995346:} ## end while reading lines
1753384995347:## close the file, if it was a file
1753384995347:if (textIn == "file") { close(text) }
1753384995347:retrun (wordCount)
1753384995348:} ## end readTheText
1753385002800:wordCnt <- analyze("This is! som'n fresh AND it's fresh")
1753385113382:# Sample string
1753385113382:text <- "Hello, World! It's a beautiful day - isn't it?"
1753385113382:# Use gsub to remove unwanted characters
1753385113382:cleaned_text <- gsub("[^a-zA-Z'-]", "", text)
1753385113383:# Print the cleaned text
1753385113383:print(cleaned_text)
1753385126297:# Sample string
1753385126297:text <- "Hello, World! It's a beautiful day - isn't it?"
1753385126297:# Use gsub to remove unwanted characters
1753385126297:cleaned_text <- gsub("[^a-zA-Z'-]", " ", text)
1753385126298:# Print the cleaned text
1753385126298:print(cleaned_text)
1753385418267:analyze <- function(textIn = "file",
1753385418267:keepHyphens = TRUE,
1753385418267:keepContractions = TRUE)
1753385418267:{
1753385418267:######################## start helper functions #############################
1753385418267:## pick the file if need be, pick your nose, too!
1753385418267:chooseFile <- function()
1753385418268:{
1753385418268:## choose file or use path?
1753385418268:path <- readline(prompt = "enter path or 'enter' to search")
1753385418268:if (path == "")
1753385418268:{ path <- file.choose() }
1753385418268:if(!file.exists(path))
1753385418268:{
1753385418268:print("try again! file not found 404 SOS")
1753385418268:## try again
1753385418268:chooseFile()
1753385418268:} ## end while invalid file path
1753385418269:## and spit it out
1753385418269:return (path)
1753385418269:}
1753385418270:## clean the line, keep or remove hyphens and contractions
1753385418270:clean <- function(line, hyphens, contractions)
1753385418270:{
1753385418270:## does the line end in a hyphenated word? damn, work
1753385418270:partialWord <- FALSE
1753385418270:if (grepl("-$", line))
1753385418271:{ partialWord <- TRUE }
1753385418271:## no proper nouns allowed
1753385418271:line <- tolower(line)
1753385418271:## apropros keep hyphy chars
1753385418271:line <- gsub("[^a-z'-]", " ", line)
1753385418271:## okay WTF is going on here?
1753385418272:print("removed punctuation?")
1753385418272:print(line)
1753385418272:if (!contractions)
1753385418272:{ line <- gsub("'", " ", line) }
1753385418272:else
1753385418272:{
1753385418272:## it'll kill quotes and weird contractions ('bout)
1753385418272:line <- gsub("' ", " ", line)
1753385418273:line <- gsub(" '", " ", line)
1753385418273:}
1753385418273:if (!hyphens)
1753385418274:{ line <- gsub("-", " ", line) }
1753385418274:return (c(line, partialWord))
1753385418274:}
1753385418275:######################### end helper functions ##############################
1753385418275:## finding a file or using a string input?
1753385418276:if(textIn == "file")
1753385418276:{
1753385418276:## pick the file and verify
1753385418276:path <- chooseFile()
1753385418276:## open the connection to the file
1753385418276:text <- file(path, open = "r")
1753385418276:} ## end if using file
1753385418277:else ## for readLines to work, textConnection the string input
1753385418277:{ text <- textConnection(textIn) }
1753385418277:## initialize the variable to hold hyphenated end-of-liners
1753385418277:last <- ""
1753385418277:## initialize a vector to hold the counts
1753385418277:wordCount <- c()
1753385418277:while(TRUE)
1753385418278:{
1753385418278:line <- readLines(text, n = 1)
1753385418278:## if the last line ended with a hyphenated word, paste it on da start
1753385418278:line <- paste0(last, line)
1753385418278:## but how does it know there are no more lines? MAGIC
1753385418278:if (length(line) == 0) { break }
1753385418278:## lines of code where line is on line as line for line (wanna line?)
1753385418279:wash <- clean(line, keepHyphens, keepContractions)
1753385418279:line <- wash[1]
1753385418279:words <- unlist(strsplit(line,"\\s+"))
1753385418279:if (wash[2])
1753385418279:{
1753385418280:## store the last word frag
1753385418280:last <- words[length(words)]
1753385418280:## reset the line to not hold that part
1753385418280:words <- words[-length(words)]
1753385418280:}
1753385418280:for (word in words) ## word
1753385418281:{ wordCount[word] <- wordCount[word] + 1 }
1753385418281:} ## end while reading lines
1753385418281:## close the file, if it was a file
1753385418281:if (textIn == "file") { close(text) }
1753385418282:retrun (wordCount)
1753385418282:} ## end readTheText
1753385432197:wordCnt <- analyze()
1753385682597:analyze <- function(textIn = "file",
1753385682598:keepHyphens = TRUE,
1753385682598:keepContractions = TRUE)
1753385682598:{
1753385682598:######################## start helper functions #############################
1753385682598:## pick the file if need be, pick your nose, too!
1753385682598:chooseFile <- function()
1753385682598:{
1753385682598:## choose file or use path?
1753385682598:path <- readline(prompt = "enter path or 'enter' to search")
1753385682598:if (path == "")
1753385682598:{ path <- file.choose() }
1753385682599:if(!file.exists(path))
1753385682599:{
1753385682599:print("try again! file not found 404 SOS")
1753385682599:## try again
1753385682599:chooseFile()
1753385682599:} ## end while invalid file path
1753385682600:## and spit it out
1753385682600:return (path)
1753385682600:}
1753385682600:## clean the line, keep or remove hyphens and contractions
1753385682600:clean <- function(line, hyphens, contractions)
1753385682600:{
1753385682600:## does the line end in a hyphenated word? damn, work
1753385682601:partialWord <- FALSE
1753385682601:if (grepl("-$", line))
1753385682601:{ partialWord <- TRUE }
1753385682601:## no proper nouns allowed
1753385682601:line <- tolower(line)
1753385682601:## apropros keep hyphy chars
1753385682601:line <- gsub("[^a-z'-]", " ", line)
1753385682602:## okay WTF is going on here?
1753385682602:print("removed punctuation?")
1753385682602:print(line)
1753385682602:if (!contractions)
1753385682602:{ line <- gsub("'", " ", line) }
1753385682602:else
1753385682602:{
1753385682603:## it'll kill quotes and weird contractions ('bout)
1753385682603:line <- gsub("' ", " ", line)
1753385682603:line <- gsub(" '", " ", line)
1753385682603:}
1753385682603:if (!hyphens)
1753385682603:{ line <- gsub("-", " ", line) }
1753385682603:return (c(line, partialWord))
1753385682604:}
1753385682604:######################### end helper functions ##############################
1753385682604:## finding a file or using a string input?
1753385682604:if(textIn == "file")
1753385682605:{
1753385682605:## pick the file and verify
1753385682605:path <- chooseFile()
1753385682605:## open the connection to the file
1753385682605:text <- file(path, open = "r")
1753385682605:} ## end if using file
1753385682605:else ## for readLines to work, textConnection the string input
1753385682605:{ text <- textConnection(textIn) }
1753385682605:## initialize the variable to hold hyphenated end-of-liners
1753385682606:last <- ""
1753385682606:## initialize a vector to hold the counts
1753385682606:wordCount <- c()
1753385682606:while(TRUE)
1753385682606:{
1753385682606:line <- readLines(text, n = 1)
1753385682606:## if the last line ended with a hyphenated word, paste it on da start
1753385682606:line <- paste0(last, line)
1753385682606:## but how does it know there are no more lines? MAGIC
1753385682607:if (length(line) == 0) { break }
1753385682607:else
1753385682607:{
1753385682607:## lines of code where line is on line as line for line (wanna line?)
1753385682607:wash <- clean(line, keepHyphens, keepContractions)
1753385682607:## wtf
1753385682607:print(wash)
1753385682607:line <- wash[1]
1753385682608:words <- unlist(strsplit(line,"\\s+"))
1753385682608:if (wash[2])
1753385682608:{
1753385682608:## store the last word frag
1753385682608:last <- words[length(words)]
1753385682608:## reset the line to not hold that part
1753385682608:words <- words[-length(words)]
1753385682608:} ## partial word saved for next line
1753385682609:for (word in words) ## word
1753385682609:{ wordCount[word] <- wordCount[word] + 1 }
1753385682609:} ## end not empty line
1753385682609:} ## end while reading lines
1753385682609:## close the file, if it was a file
1753385682610:if (textIn == "file") { close(text) }
1753385682610:retrun (wordCount)
1753385682610:} ## end readTheText
1753385688238:wordCnt <- analyze()
1753385774282:analyze <- function(textIn = "file",
1753385774282:keepHyphens = TRUE,
1753385774282:keepContractions = TRUE)
1753385774283:{
1753385774283:######################## start helper functions #############################
1753385774283:## pick the file if need be, pick your nose, too!
1753385774283:chooseFile <- function()
1753385774283:{
1753385774283:## choose file or use path?
1753385774283:path <- readline(prompt = "enter path or 'enter' to search")
1753385774283:if (path == "")
1753385774283:{ path <- file.choose() }
1753385774284:if(!file.exists(path))
1753385774284:{
1753385774284:print("try again! file not found 404 SOS")
1753385774284:## try again
1753385774284:chooseFile()
1753385774284:} ## end while invalid file path
1753385774285:## and spit it out
1753385774285:return (path)
1753385774285:}
1753385774285:## clean the line, keep or remove hyphens and contractions
1753385774285:clean <- function(line, hyphens, contractions)
1753385774286:{
1753385774286:## does the line end in a hyphenated word? damn, work
1753385774286:partialWord <- FALSE
1753385774286:if (grepl("-$", line))
1753385774287:{ partialWord <- TRUE }
1753385774287:## no proper nouns allowed
1753385774287:line <- tolower(line)
1753385774287:## apropros keep hyphy chars
1753385774287:line <- gsub("[^a-z'-]", " ", line)
1753385774288:## okay WTF is going on here?
1753385774288:print("removed punctuation?")
1753385774288:print(line)
1753385774288:if (!contractions)
1753385774288:{ line <- gsub("'", " ", line) }
1753385774289:else
1753385774289:{
1753385774289:## it'll kill quotes and weird contractions ('bout)
1753385774289:line <- gsub("' ", " ", line)
1753385774290:line <- gsub(" '", " ", line)
1753385774290:}
1753385774290:if (!hyphens)
1753385774290:{ line <- gsub("-", " ", line) }
1753385774291:return (c(line, partialWord))
1753385774291:}
1753385774291:######################### end helper functions ##############################
1753385774291:## finding a file or using a string input?
1753385774291:if(textIn == "file")
1753385774292:{
1753385774292:## pick the file and verify
1753385774292:path <- chooseFile()
1753385774292:## open the connection to the file
1753385774292:text <- file(path, open = "r")
1753385774292:} ## end if using file
1753385774292:else ## for readLines to work, textConnection the string input
1753385774293:{ text <- textConnection(textIn) }
1753385774293:## initialize the variable to hold hyphenated end-of-liners
1753385774293:last <- ""
1753385774293:## initialize a vector to hold the counts
1753385774293:wordCount <- c()
1753385774293:## while(TRUE)
1753385774294:for (i in 1:3)
1753385774294:{
1753385774294:line <- readLines(text, n = 1)
1753385774294:## if the last line ended with a hyphenated word, paste it on da start
1753385774294:line <- paste0(last, line)
1753385774294:cat("this is line:" , line)
1753385774295:## but how does it know there are no more lines? MAGIC
1753385774295:if (length(line) == 0) { break }
1753385774295:else
1753385774295:{
1753385774295:## lines of code where line is on line as line for line (wanna line?)
1753385774295:wash <- clean(line, keepHyphens, keepContractions)
1753385774295:## wtf
1753385774296:print(wash)
1753385774296:line <- wash[1]
1753385774296:words <- unlist(strsplit(line,"\\s+"))
1753385774296:if (wash[2])
1753385774296:{
1753385774297:## store the last word frag
1753385774297:last <- words[length(words)]
1753385774297:## reset the line to not hold that part
1753385774297:words <- words[-length(words)]
1753385774297:} ## partial word saved for next line
1753385774298:for (word in words) ## word
1753385774298:{ wordCount[word] <- wordCount[word] + 1 }
1753385774298:} ## end not empty line
1753385774298:} ## end while reading lines
1753385774299:## close the file, if it was a file
1753385774299:if (textIn == "file") { close(text) }
1753385774299:retrun (wordCount)
1753385774299:} ## end readTheText
1753385774300:wordCnt <- analyze()
1753385912959:analyze <- function(textIn = "file",
1753385912959:keepHyphens = TRUE,
1753385912959:keepContractions = TRUE)
1753385912959:{
1753385912959:######################## start helper functions #############################
1753385912959:## pick the file if need be, pick your nose, too!
1753385912959:chooseFile <- function()
1753385912960:{
1753385912960:## choose file or use path?
1753385912960:path <- readline(prompt = "enter path or 'enter' to search")
1753385912960:if (path == "")
1753385912961:{ path <- file.choose() }
1753385912961:if(!file.exists(path))
1753385912961:{
1753385912961:print("try again! file not found 404 SOS")
1753385912961:## try again
1753385912961:chooseFile()
1753385912961:} ## end while invalid file path
1753385912962:## and spit it out
1753385912962:return (path)
1753385912962:}
1753385912962:## clean the line, keep or remove hyphens and contractions
1753385912962:clean <- function(line, hyphens, contractions)
1753385912963:{
1753385912963:## does the line end in a hyphenated word? damn, work
1753385912963:partialWord <- FALSE
1753385912963:if (grepl("-$", line))
1753385912963:{ partialWord <- TRUE }
1753385912964:## no proper nouns allowed
1753385912964:line <- tolower(line)
1753385912964:## apropros keep hyphy chars
1753385912964:line <- gsub("[^a-z'-]", " ", line)
1753385912964:## okay WTF is going on here?
1753385912965:print("removed punctuation?")
1753385912965:print(line)
1753385912965:if (!contractions)
1753385912965:{ line <- gsub("'", " ", line) }
1753385912965:else
1753385912965:{
1753385912965:## it'll kill quotes and weird contractions ('bout)
1753385912966:line <- gsub("' ", " ", line)
1753385912966:line <- gsub(" '", " ", line)
1753385912966:}
1753385912966:if (!hyphens)
1753385912966:{ line <- gsub("-", " ", line) }
1753385912967:return (c(line, partialWord))
1753385912967:}
1753385912967:######################### end helper functions ##############################
1753385912968:## finding a file or using a string input?
1753385912968:if(textIn == "file")
1753385912968:{
1753385912968:## pick the file and verify
1753385912968:path <- chooseFile()
1753385912969:## open the connection to the file
1753385912969:text <- file(path, open = "r")
1753385912969:} ## end if using file
1753385912969:else ## for readLines to work, textConnection the string input
1753385912969:{ text <- textConnection(textIn) }
1753385912970:## initialize the variable to hold hyphenated end-of-liners
1753385912970:last <- ""
1753385912970:## initialize a vector to hold the counts
1753385912970:wordCount <- c()
1753385912970:## while(TRUE)
1753385912971:for (i in 1:3)
1753385912971:{
1753385912971:line <- readLines(text, n = 1)
1753385912971:## if the last line ended with a hyphenated word, paste it on da start
1753385912971:line <- paste0(last, line)
1753385912971:cat("\n")
1753385912972:cat("this is line:" , line)
1753385912972:## but how does it know there are no more lines? MAGIC
1753385912972:if (length(line) == 0) { break }
1753385912972:else
1753385912972:{
1753385912972:## lines of code where line is on line as line for line (wanna line?)
1753385912972:wash <- clean(line, keepHyphens, keepContractions)
1753385912973:## wtf
1753385912973:print(wash)
1753385912973:line <- wash[1]
1753385912973:words <- unlist(strsplit(line,"\\s+"))
1753385912973:if (wash[2])
1753385912974:{
1753385912974:## store the last word frag
1753385912974:last <- words[length(words)]
1753385912974:## reset the line to not hold that part
1753385912974:words <- words[-length(words)]
1753385912974:} ## partial word saved for next line
1753385912975:for (word in words) ## word
1753385912975:{ wordCount[word] <- wordCount[word] + 1 }
1753385912975:} ## end not empty line
1753385912976:} ## end while reading lines
1753385912976:## close the file, if it was a file
1753385912976:if (textIn == "file") { close(text) }
1753385912976:retrun (wordCount)
1753385912976:} ## end readTheText
1753385912977:wordCnt <- analyze()
1753385944086:analyze <- function(textIn = "file",
1753385944087:keepHyphens = TRUE,
1753385944087:keepContractions = TRUE)
1753385944087:{
1753385944087:######################## start helper functions #############################
1753385944087:## pick the file if need be, pick your nose, too!
1753385944087:chooseFile <- function()
1753385944087:{
1753385944087:## choose file or use path?
1753385944087:path <- readline(prompt = "enter path or 'enter' to search")
1753385944087:if (path == "")
1753385944088:{ path <- file.choose() }
1753385944088:if(!file.exists(path))
1753385944088:{
1753385944088:print("try again! file not found 404 SOS")
1753385944088:## try again
1753385944088:chooseFile()
1753385944088:} ## end while invalid file path
1753385944088:## and spit it out
1753385944088:return (path)
1753385944088:}
1753385944089:## clean the line, keep or remove hyphens and contractions
1753385944089:clean <- function(line, hyphens, contractions)
1753385944089:{
1753385944090:## does the line end in a hyphenated word? damn, work
1753385944090:partialWord <- FALSE
1753385944090:if (grepl("-$", line))
1753385944090:{ partialWord <- TRUE }
1753385944090:## no proper nouns allowed
1753385944090:line <- tolower(line)
1753385944091:## apropros keep hyphy chars
1753385944091:line <- gsub("[^a-z'-]", " ", line)
1753385944091:## okay WTF is going on here?
1753385944091:print("removed punctuation?")
1753385944091:print(line)
1753385944092:if (!contractions)
1753385944092:{ line <- gsub("'", " ", line) }
1753385944092:else
1753385944092:{
1753385944092:## it'll kill quotes and weird contractions ('bout)
1753385944093:line <- gsub("' ", " ", line)
1753385944093:line <- gsub(" '", " ", line)
1753385944093:}
1753385944093:if (!hyphens)
1753385944093:{ line <- gsub("-", " ", line) }
1753385944094:return (c(line, partialWord))
1753385944094:}
1753385944094:######################### end helper functions ##############################
1753385944095:## finding a file or using a string input?
1753385944095:if(textIn == "file")
1753385944095:{
1753385944095:## pick the file and verify
1753385944095:path <- chooseFile()
1753385944096:## open the connection to the file
1753385944096:text <- file(path, open = "r")
1753385944096:} ## end if using file
1753385944096:else ## for readLines to work, textConnection the string input
1753385944097:{ text <- textConnection(textIn) }
1753385944097:## initialize the variable to hold hyphenated end-of-liners
1753385944097:last <- ""
1753385944097:## initialize a vector to hold the counts
1753385944097:wordCount <- c()
1753385944098:## while(TRUE)
1753385944098:for (i in 1:3)
1753385944098:{
1753385944098:line <- readLines(text, n = 1)
1753385944098:## if the last line ended with a hyphenated word, paste it on da start
1753385944098:line <- paste0(last, line)
1753385944099:cat("\n")
1753385944099:cat("this is line:" , line)
1753385944099:## but how does it know there are no more lines? MAGIC
1753385944099:if (length(line) == 0) { break }
1753385944099:else
1753385944099:{
1753385944099:## lines of code where line is on line as line for line (wanna line?)
1753385944100:wash <- clean(line, keepHyphens, keepContractions)
1753385944100:## wtf
1753385944100:print(wash)
1753385944100:line <- wash[1]
1753385944100:words <- unlist(strsplit(line,"\\s+"))
1753385944101:if (wash[2])
1753385944101:{
1753385944101:## store the last word frag
1753385944101:last <- words[length(words)]
1753385944101:## reset the line to not hold that part
1753385944101:words <- words[-length(words)]
1753385944102:} ## partial word saved for next line
1753385944102:for (word in words) ## word
1753385944102:{ wordCount[word] <- wordCount[word] + 1 }
1753385944103:} ## end not empty line
1753385944103:} ## end while reading lines
1753385944103:## close the file, if it was a file
1753385944103:if (textIn == "file") { close(text) }
1753385944103:return (wordCount)
1753385944104:} ## end readTheText
1753385944104:wordCnt <- analyze()
1753386083801:analyze <- function(textIn = "file",
1753386083801:keepHyphens = TRUE,
1753386083801:keepContractions = TRUE)
1753386083801:{
1753386083801:######################## start helper functions #############################
1753386083801:## pick the file if need be, pick your nose, too!
1753386083802:chooseFile <- function()
1753386083802:{
1753386083802:## choose file or use path?
1753386083802:path <- readline(prompt = "enter path or 'enter' to search")
1753386083802:if (path == "")
1753386083802:{ path <- file.choose() }
1753386083802:if(!file.exists(path))
1753386083802:{
1753386083802:print("try again! file not found 404 SOS")
1753386083803:## try again
1753386083803:chooseFile()
1753386083803:} ## end while invalid file path
1753386083803:## and spit it out
1753386083803:return (path)
1753386083803:}
1753386083804:## clean the line, keep or remove hyphens and contractions
1753386083804:clean <- function(line, hyphens, contractions)
1753386083804:{
1753386083804:## does the line end in a hyphenated word? damn, work
1753386083804:partialWord <- FALSE
1753386083804:if (grepl("-$", line))
1753386083804:{ partialWord <- TRUE }
1753386083805:## no proper nouns allowed
1753386083805:line <- tolower(line)
1753386083805:## apropros keep hyphy chars
1753386083805:line <- gsub("[^a-z'-]", " ", line)
1753386083805:## okay WTF is going on here?
1753386083805:print("removed punctuation?")
1753386083805:print(line)
1753386083806:if (!contractions)
1753386083806:{ line <- gsub("'", " ", line) }
1753386083806:else
1753386083806:{
1753386083806:## it'll kill quotes and weird contractions ('bout)
1753386083806:line <- gsub("' ", " ", line)
1753386083806:line <- gsub(" '", " ", line)
1753386083807:}
1753386083807:if (!hyphens)
1753386083807:{ line <- gsub("-", " ", line) }
1753386083807:return (c(line, partialWord))
1753386083807:}
1753386083808:######################### end helper functions ##############################
1753386083808:## finding a file or using a string input?
1753386083808:if(textIn == "file")
1753386083808:{
1753386083808:## pick the file and verify
1753386083809:path <- chooseFile()
1753386083809:## open the connection to the file
1753386083809:text <- file(path, open = "r")
1753386083809:} ## end if using file
1753386083810:else ## for readLines to work, textConnection the string input
1753386083810:{ text <- textConnection(textIn) }
1753386083810:## initialize the variable to hold hyphenated end-of-liners
1753386083810:last <- ""
1753386083811:## initialize a vector to hold the counts
1753386083811:wordCount <- c()
1753386083811:while(TRUE)
1753386083811:{
1753386083811:line <- readLines(text, n = 1)
1753386083812:## if the last line ended with a hyphenated word, paste it on da start
1753386083812:line <- paste0(last, line)
1753386083812:cat("\n")
1753386083813:cat("this is line:" , line)
1753386083813:## but how does it know there are no more lines? MAGIC
1753386083813:if (length(line) == 0) { break }
1753386083813:else
1753386083813:{
1753386083814:## lines of code where line is on line as line for line (wanna line?)
1753386083814:wash <- clean(line, keepHyphens, keepContractions)
1753386083814:## wtf
1753386083814:print(wash)
1753386083815:line <- wash[1]
1753386083815:words <- unlist(strsplit(line,"\\s+"))
1753386083815:if (wash[2])
1753386083815:{
1753386083816:## store the last word frag
1753386083816:last <- words[length(words)]
1753386083816:## reset the line to not hold that part
1753386083816:words <- words[-length(words)]
1753386083816:} ## partial word saved for next line
1753386083817:for (word in words) ## word
1753386083817:{ wordCount[word] <- wordCount[word] + 1 }
1753386083817:} ## end not empty line
1753386083817:} ## end while reading lines
1753386083818:## close the file, if it was a file
1753386083818:if (textIn == "file") { close(text) }
1753386083818:return (wordCount)
1753386083818:} ## end readTheText
1753386083819:wordCnt <- analyze()
1753386176867:analyze <- function(textIn = "file",
1753386176867:keepHyphens = TRUE,
1753386176867:keepContractions = TRUE)
1753386176867:{
1753386176867:######################## start helper functions #############################
1753386176867:## pick the file if need be, pick your nose, too!
1753386176867:chooseFile <- function()
1753386176867:{
1753386176868:## choose file or use path?
1753386176868:path <- readline(prompt = "enter path or 'enter' to search")
1753386176868:if (path == "")
1753386176868:{ path <- file.choose() }
1753386176868:if(!file.exists(path))
1753386176868:{
1753386176868:print("try again! file not found 404 SOS")
1753386176869:## try again
1753386176869:chooseFile()
1753386176869:} ## end while invalid file path
1753386176869:## and spit it out
1753386176869:return (path)
1753386176869:}
1753386176869:## clean the line, keep or remove hyphens and contractions
1753386176869:clean <- function(line, hyphens, contractions)
1753386176869:{
1753386176870:## does the line end in a hyphenated word? damn, work
1753386176870:partialWord <- FALSE
1753386176870:if (grepl("-$", line))
1753386176870:{ partialWord <- TRUE }
1753386176870:## no proper nouns allowed
1753386176870:line <- tolower(line)
1753386176871:## apropros keep hyphy chars
1753386176871:line <- gsub("[^a-z'-]", " ", line)
1753386176871:## okay WTF is going on here?
1753386176871:print("removed punctuation?")
1753386176871:print(line)
1753386176871:if (!contractions)
1753386176872:{ line <- gsub("'", " ", line) }
1753386176872:else
1753386176872:{
1753386176872:## it'll kill quotes and weird contractions ('bout)
1753386176872:line <- gsub("' ", " ", line)
1753386176872:line <- gsub(" '", " ", line)
1753386176872:}
1753386176873:if (!hyphens)
1753386176873:{ line <- gsub("-", " ", line) }
1753386176873:return (c(line, partialWord))
1753386176873:}
1753386176873:######################### end helper functions ##############################
1753386176874:## finding a file or using a string input?
1753386176874:if(textIn == "file")
1753386176874:{
1753386176874:## pick the file and verify
1753386176874:path <- chooseFile()
1753386176875:## open the connection to the file
1753386176875:text <- file(path, open = "r")
1753386176875:} ## end if using file
1753386176875:else ## for readLines to work, textConnection the string input
1753386176875:{ text <- textConnection(textIn) }
1753386176876:## initialize the variable to hold hyphenated end-of-liners
1753386176876:last <- ""
1753386176876:## initialize a vector to hold the counts
1753386176876:wordCount <- c()
1753386176877:##while(TRUE)
1753386176877:for (i in 1:5)
1753386176877:{
1753386176877:line <- readLines(text, n = 1)
1753386176878:## if the last line ended with a hyphenated word, paste it on da start
1753386176878:line <- paste0(last, line)
1753386176878:cat("\n")
1753386176878:cat("this is line:" , line)
1753386176879:## but how does it know there are no more lines? MAGIC
1753386176879:if (length(line) == 0) { break }
1753386176879:else
1753386176879:{
1753386176879:## lines of code where line is on line as line for line (wanna line?)
1753386176880:wash <- clean(line, keepHyphens, keepContractions)
1753386176880:## wtf
1753386176880:print(wash)
1753386176880:line <- wash[1]
1753386176881:words <- unlist(strsplit(line,"\\s+"))
1753386176881:if (wash[2])
1753386176881:{
1753386176882:## store the last word frag
1753386176882:last <- words[length(words)]
1753386176882:## reset the line to not hold that part
1753386176882:words <- words[-length(words)]
1753386176883:} ## partial word saved for next line
1753386176883:for (word in words) ## word
1753386176883:{ wordCount[word] <- wordCount[word] + 1 }
1753386176884:} ## end not empty line
1753386176884:} ## end while reading lines
1753386176885:## close the file, if it was a file
1753386176885:if (textIn == "file") { close(text) }
1753386176885:return (wordCount)
1753386176886:} ## end readTheText
1753386176887:wordCnt <- analyze()
1753386204782:analyze <- function(textIn = "file",
1753386204782:keepHyphens = TRUE,
1753386204782:keepContractions = TRUE)
1753386204782:{
1753386204783:######################## start helper functions #############################
1753386204783:## pick the file if need be, pick your nose, too!
1753386204783:chooseFile <- function()
1753386204783:{
1753386204783:## choose file or use path?
1753386204783:path <- readline(prompt = "enter path or 'enter' to search")
1753386204783:if (path == "")
1753386204783:{ path <- file.choose() }
1753386204783:if(!file.exists(path))
1753386204784:{
1753386204784:print("try again! file not found 404 SOS")
1753386204784:## try again
1753386204784:chooseFile()
1753386204784:} ## end while invalid file path
1753386204784:## and spit it out
1753386204785:return (path)
1753386204785:}
1753386204785:## clean the line, keep or remove hyphens and contractions
1753386204785:clean <- function(line, hyphens, contractions)
1753386204785:{
1753386204785:## does the line end in a hyphenated word? damn, work
1753386204785:partialWord <- FALSE
1753386204786:if (grepl("-$", line))
1753386204786:{ partialWord <- TRUE }
1753386204786:## no proper nouns allowed
1753386204786:line <- tolower(line)
1753386204786:## apropros keep hyphy chars
1753386204786:line <- gsub("[^a-z'-]", " ", line)
1753386204787:## okay WTF is going on here?
1753386204787:print("removed punctuation?")
1753386204787:print(line)
1753386204787:if (!contractions)
1753386204787:{ line <- gsub("'", " ", line) }
1753386204787:else
1753386204787:{
1753386204788:## it'll kill quotes and weird contractions ('bout)
1753386204788:line <- gsub("' ", " ", line)
1753386204788:line <- gsub(" '", " ", line)
1753386204788:}
1753386204788:if (!hyphens)
1753386204788:{ line <- gsub("-", " ", line) }
1753386204789:return (c(line, partialWord))
1753386204789:}
1753386204789:######################### end helper functions ##############################
1753386204789:## finding a file or using a string input?
1753386204790:if(textIn == "file")
1753386204790:{
1753386204790:## pick the file and verify
1753386204790:path <- chooseFile()
1753386204790:## open the connection to the file
1753386204791:text <- file(path, open = "r")
1753386204791:} ## end if using file
1753386204791:else ## for readLines to work, textConnection the string input
1753386204791:{ text <- textConnection(textIn) }
1753386204792:## initialize the variable to hold hyphenated end-of-liners
1753386204792:last <- ""
1753386204792:## initialize a vector to hold the counts
1753386204792:wordCount <- c()
1753386204793:##while(TRUE)
1753386204793:for (i in 1:10)
1753386204793:{
1753386204793:line <- readLines(text, n = 1)
1753386204793:## if the last line ended with a hyphenated word, paste it on da start
1753386204794:line <- paste0(last, line)
1753386204794:cat("\n")
1753386204794:cat("this is line:" , line)
1753386204794:## but how does it know there are no more lines? MAGIC
1753386204795:if (length(line) == 0) { break }
1753386204795:else
1753386204795:{
1753386204795:## lines of code where line is on line as line for line (wanna line?)
1753386204795:wash <- clean(line, keepHyphens, keepContractions)
1753386204795:## wtf
1753386204795:print(wash)
1753386204796:line <- wash[1]
1753386204796:words <- unlist(strsplit(line,"\\s+"))
1753386204796:if (wash[2])
1753386204796:{
1753386204797:## store the last word frag
1753386204797:last <- words[length(words)]
1753386204797:## reset the line to not hold that part
1753386204797:words <- words[-length(words)]
1753386204797:} ## partial word saved for next line
1753386204798:for (word in words) ## word
1753386204798:{ wordCount[word] <- wordCount[word] + 1 }
1753386204798:} ## end not empty line
1753386204798:} ## end while reading lines
1753386204799:## close the file, if it was a file
1753386204799:if (textIn == "file") { close(text) }
1753386204799:return (wordCount)
1753386204799:} ## end readTheText
1753386204800:wordCnt <- analyze()
1753386228860:wordCnt
1753386339455:wordCnt = c("fuck" = 3, "this" = 43, "piece" = 2, "of" = 38, "goddamn-shit" = 7)
1753386341651:wrdCnt
1753386345782:wordCnt
1753386385223:wordCnt["newWord"] <- wordCnt["newWord"] + 1
1753386388038:wordCnt
1753386419799:wordCnt["virgo"]
1753386509095:analyze <- function(textIn = "file",
1753386509095:keepHyphens = TRUE,
1753386509095:keepContractions = TRUE)
1753386509095:{
1753386509095:######################## start helper functions #############################
1753386509095:## pick the file if need be, pick your nose, too!
1753386509096:chooseFile <- function()
1753386509096:{
1753386509096:## choose file or use path?
1753386509096:path <- readline(prompt = "enter path or 'enter' to search")
1753386509096:if (path == "")
1753386509096:{ path <- file.choose() }
1753386509097:if(!file.exists(path))
1753386509097:{
1753386509097:print("try again! file not found 404 SOS")
1753386509097:## try again
1753386509097:chooseFile()
1753386509097:} ## end while invalid file path
1753386509098:## and spit it out
1753386509098:return (path)
1753386509098:}
1753386509098:## clean the line, keep or remove hyphens and contractions
1753386509098:clean <- function(line, hyphens, contractions)
1753386509098:{
1753386509099:## does the line end in a hyphenated word? damn, work
1753386509099:partialWord <- FALSE
1753386509099:if (grepl("-$", line))
1753386509099:{ partialWord <- TRUE }
1753386509099:## no proper nouns allowed
1753386509100:line <- tolower(line)
1753386509100:## apropros keep hyphy chars
1753386509100:line <- gsub("[^a-z'-]", " ", line)
1753386509100:## okay WTF is going on here?
1753386509100:print("removed punctuation?")
1753386509100:print(line)
1753386509101:if (!contractions)
1753386509101:{ line <- gsub("'", " ", line) }
1753386509101:else
1753386509101:{
1753386509101:## it'll kill quotes and weird contractions ('bout)
1753386509101:line <- gsub("' ", " ", line)
1753386509101:line <- gsub(" '", " ", line)
1753386509101:}
1753386509102:if (!hyphens)
1753386509102:{ line <- gsub("-", " ", line) }
1753386509102:return (c(line, partialWord))
1753386509102:}
1753386509103:######################### end helper functions ##############################
1753386509103:## finding a file or using a string input?
1753386509103:if(textIn == "file")
1753386509103:{
1753386509104:## pick the file and verify
1753386509104:path <- chooseFile()
1753386509104:## open the connection to the file
1753386509104:text <- file(path, open = "r")
1753386509105:} ## end if using file
1753386509105:else ## for readLines to work, textConnection the string input
1753386509105:{ text <- textConnection(textIn) }
1753386509106:## initialize the variable to hold hyphenated end-of-liners
1753386509106:last <- ""
1753386509106:## initialize a vector to hold the counts
1753386509106:wordCount <- c()
1753386509107:##while(TRUE)
1753386509107:for (i in 1:10)
1753386509107:{
1753386509108:line <- readLines(text, n = 1)
1753386509108:## if the last line ended with a hyphenated word, paste it on da start
1753386509108:line <- paste0(last, line)
1753386509108:cat("\n")
1753386509108:cat("this is line:" , line)
1753386509109:## but how does it know there are no more lines? MAGIC
1753386509109:if (length(line) == 0) { break }
1753386509109:else
1753386509109:{
1753386509109:## lines of code where line is on line as line for line (wanna line?)
1753386509109:wash <- clean(line, keepHyphens, keepContractions)
1753386509110:## wtf
1753386509110:print(wash)
1753386509110:line <- wash[1]
1753386509110:words <- unlist(strsplit(line,"\\s+"))
1753386509110:if (wash[2])
1753386509110:{
1753386509111:## store the last word frag
1753386509111:last <- words[length(words)]
1753386509111:## reset the line to not hold that part
1753386509111:words <- words[-length(words)]
1753386509111:} ## partial word saved for next line
1753386509112:for (word in words) ## word
1753386509112:{
1753386509112:if(wordCount[word] == NA)
1753386509112:{ wordCount[word] <- 1}
1753386509112:else ## wordCount[word]++, no? 'course not
1753386509112:{ wordCount[word] <- wordCount[word] + 1}
1753386509112:}
1753386509113:} ## end not empty line
1753386509113:} ## end while reading lines
1753386509113:## close the file, if it was a file
1753386509114:if (textIn == "file") { close(text) }
1753386509114:return (wordCount)
1753386509114:} ## end readTheText
1753386509115:wordCnt <- analyze()
1753386561470:analyze <- function(textIn = "file",
1753386561470:keepHyphens = TRUE,
1753386561470:keepContractions = TRUE)
1753386561470:{
1753386561470:######################## start helper functions #############################
1753386561471:## pick the file if need be, pick your nose, too!
1753386561471:chooseFile <- function()
1753386561471:{
1753386561471:## choose file or use path?
1753386561471:path <- readline(prompt = "enter path or 'enter' to search")
1753386561471:if (path == "")
1753386561471:{ path <- file.choose() }
1753386561471:if(!file.exists(path))
1753386561472:{
1753386561472:print("try again! file not found 404 SOS")
1753386561472:## try again
1753386561472:chooseFile()
1753386561472:} ## end while invalid file path
1753386561472:## and spit it out
1753386561472:return (path)
1753386561473:}
1753386561473:## clean the line, keep or remove hyphens and contractions
1753386561473:clean <- function(line, hyphens, contractions)
1753386561473:{
1753386561473:## does the line end in a hyphenated word? damn, work
1753386561473:partialWord <- FALSE
1753386561474:if (grepl("-$", line))
1753386561474:{ partialWord <- TRUE }
1753386561474:## no proper nouns allowed
1753386561474:line <- tolower(line)
1753386561474:## apropros keep hyphy chars
1753386561474:line <- gsub("[^a-z'-]", " ", line)
1753386561475:## okay WTF is going on here?
1753386561475:print("removed punctuation?")
1753386561475:print(line)
1753386561475:if (!contractions)
1753386561475:{ line <- gsub("'", " ", line) }
1753386561475:else
1753386561475:{
1753386561476:## it'll kill quotes and weird contractions ('bout)
1753386561476:line <- gsub("' ", " ", line)
1753386561476:line <- gsub(" '", " ", line)
1753386561476:}
1753386561476:if (!hyphens)
1753386561476:{ line <- gsub("-", " ", line) }
1753386561477:return (c(line, partialWord))
1753386561477:}
1753386561477:######################### end helper functions ##############################
1753386561477:## finding a file or using a string input?
1753386561478:if(textIn == "file")
1753386561478:{
1753386561478:## pick the file and verify
1753386561478:path <- chooseFile()
1753386561478:## open the connection to the file
1753386561479:text <- file(path, open = "r")
1753386561479:} ## end if using file
1753386561479:else ## for readLines to work, textConnection the string input
1753386561479:{ text <- textConnection(textIn) }
1753386561480:## initialize the variable to hold hyphenated end-of-liners
1753386561480:last <- ""
1753386561480:## initialize a vector to hold the counts
1753386561480:wordCount <- c()
1753386561481:##while(TRUE)
1753386561481:for (i in 1:10)
1753386561481:{
1753386561481:line <- readLines(text, n = 1)
1753386561482:## if the last line ended with a hyphenated word, paste it on da start
1753386561482:line <- paste0(last, line)
1753386561482:cat("\n")
1753386561482:cat("this is line:" , line)
1753386561483:## but how does it know there are no more lines? MAGIC
1753386561483:if (length(line) == 0) { break }
1753386561483:else
1753386561483:{
1753386561483:## lines of code where line is on line as line for line (wanna line?)
1753386561484:wash <- clean(line, keepHyphens, keepContractions)
1753386561484:## wtf
1753386561484:print(wash)
1753386561485:line <- wash[1]
1753386561485:words <- unlist(strsplit(line,"\\s+"))
1753386561485:if (wash[2])
1753386561485:{
1753386561486:## store the last word frag
1753386561486:last <- words[length(words)]
1753386561486:## reset the line to not hold that part
1753386561486:words <- words[-length(words)]
1753386561486:} ## partial word saved for next line
1753386561487:for (word in words) ## word
1753386561487:{
1753386561487:if(wordCount[word] == NA)
1753386561487:{ wordCount[word] <- 1}
1753386561487:else ## wordCount[word]++, no? 'course not
1753386561488:{ wordCount[word] <- wordCount[word] + 1}
1753386561488:}
1753386561488:} ## end not empty line
1753386561488:} ## end while reading lines
1753386561489:## close the file, if it was a file
1753386561489:if (textIn == "file") { close(text) }
1753386561489:return (wordCount)
1753386561489:} ## end readTheText
1753386564972:analyze <- function(textIn = "file",
1753386564972:keepHyphens = TRUE,
1753386564972:keepContractions = TRUE)
1753386564972:{
1753386564972:######################## start helper functions #############################
1753386564973:## pick the file if need be, pick your nose, too!
1753386564973:chooseFile <- function()
1753386564973:{
1753386564973:## choose file or use path?
1753386564973:path <- readline(prompt = "enter path or 'enter' to search")
1753386564973:if (path == "")
1753386564973:{ path <- file.choose() }
1753386564973:if(!file.exists(path))
1753386564973:{
1753386564974:print("try again! file not found 404 SOS")
1753386564974:## try again
1753386564974:chooseFile()
1753386564974:} ## end while invalid file path
1753386564974:## and spit it out
1753386564975:return (path)
1753386564975:}
1753386564975:## clean the line, keep or remove hyphens and contractions
1753386564975:clean <- function(line, hyphens, contractions)
1753386564975:{
1753386564975:## does the line end in a hyphenated word? damn, work
1753386564975:partialWord <- FALSE
1753386564976:if (grepl("-$", line))
1753386564976:{ partialWord <- TRUE }
1753386564976:## no proper nouns allowed
1753386564976:line <- tolower(line)
1753386564976:## apropros keep hyphy chars
1753386564977:line <- gsub("[^a-z'-]", " ", line)
1753386564977:## okay WTF is going on here?
1753386564977:print("removed punctuation?")
1753386564977:print(line)
1753386564977:if (!contractions)
1753386564978:{ line <- gsub("'", " ", line) }
1753386564978:else
1753386564978:{
1753386564978:## it'll kill quotes and weird contractions ('bout)
1753386564978:line <- gsub("' ", " ", line)
1753386564978:line <- gsub(" '", " ", line)
1753386564978:}
1753386564979:if (!hyphens)
1753386564979:{ line <- gsub("-", " ", line) }
1753386564979:return (c(line, partialWord))
1753386564979:}
1753386564980:######################### end helper functions ##############################
1753386564980:## finding a file or using a string input?
1753386564981:if(textIn == "file")
1753386564981:{
1753386564981:## pick the file and verify
1753386564981:path <- chooseFile()
1753386564981:## open the connection to the file
1753386564981:text <- file(path, open = "r")
1753386564982:} ## end if using file
1753386564982:else ## for readLines to work, textConnection the string input
1753386564982:{ text <- textConnection(textIn) }
1753386564982:## initialize the variable to hold hyphenated end-of-liners
1753386564983:last <- ""
1753386564983:## initialize a vector to hold the counts
1753386564983:wordCount <- c()
1753386564984:##while(TRUE)
1753386564984:for (i in 1:10)
1753386564984:{
1753386564984:line <- readLines(text, n = 1)
1753386564985:## if the last line ended with a hyphenated word, paste it on da start
1753386564985:line <- paste0(last, line)
1753386564985:cat("\n")
1753386564985:cat("this is line:" , line)
1753386564985:## but how does it know there are no more lines? MAGIC
1753386564986:if (length(line) == 0) { break }
1753386564986:else
1753386564986:{
1753386564986:## lines of code where line is on line as line for line (wanna line?)
1753386564986:wash <- clean(line, keepHyphens, keepContractions)
1753386564986:## wtf
1753386564986:print(wash)
1753386564987:line <- wash[1]
1753386564987:words <- unlist(strsplit(line,"\\s+"))
1753386564987:if (wash[2])
1753386564987:{
1753386564987:## store the last word frag
1753386564988:last <- words[length(words)]
1753386564988:## reset the line to not hold that part
1753386564988:words <- words[-length(words)]
1753386564988:} ## partial word saved for next line
1753386564988:for (word in words) ## word
1753386564989:{
1753386564989:if(wordCount[word] == NA)
1753386564989:{ wordCount[word] <- 1}
1753386564989:else ## wordCount[word]++, no? 'course not
1753386564989:{ wordCount[word] <- wordCount[word] + 1}
1753386564989:}
1753386564990:} ## end not empty line
1753386564990:} ## end while reading lines
1753386564990:## close the file, if it was a file
1753386564990:if (textIn == "file") { close(text) }
1753386564991:return (wordCount)
1753386564991:} ## end readTheText
1753386564991:wordCnt <- analyze()
1753386603452:wordCnt["fabric"] = 3
1753386605443:wordCnt
1753386639314:if(wordCnt['non-word'] == NA) {print("ok")}
1753386648771:if(wordCnt['non-word'] == "NA") {print("ok")}
1753386669247:analyze <- function(textIn = "file",
1753386669247:keepHyphens = TRUE,
1753386669247:keepContractions = TRUE)
1753386669247:{
1753386669247:######################## start helper functions #############################
1753386669247:## pick the file if need be, pick your nose, too!
1753386669247:chooseFile <- function()
1753386669247:{
1753386669247:## choose file or use path?
1753386669248:path <- readline(prompt = "enter path or 'enter' to search")
1753386669248:if (path == "")
1753386669248:{ path <- file.choose() }
1753386669248:if(!file.exists(path))
1753386669248:{
1753386669248:print("try again! file not found 404 SOS")
1753386669248:## try again
1753386669248:chooseFile()
1753386669248:} ## end while invalid file path
1753386669249:## and spit it out
1753386669249:return (path)
1753386669249:}
1753386669249:## clean the line, keep or remove hyphens and contractions
1753386669249:clean <- function(line, hyphens, contractions)
1753386669249:{
1753386669249:## does the line end in a hyphenated word? damn, work
1753386669250:partialWord <- FALSE
1753386669250:if (grepl("-$", line))
1753386669250:{ partialWord <- TRUE }
1753386669250:## no proper nouns allowed
1753386669250:line <- tolower(line)
1753386669251:## apropros keep hyphy chars
1753386669251:line <- gsub("[^a-z'-]", " ", line)
1753386669251:## okay WTF is going on here?
1753386669251:print("removed punctuation?")
1753386669251:print(line)
1753386669252:if (!contractions)
1753386669252:{ line <- gsub("'", " ", line) }
1753386669252:else
1753386669252:{
1753386669252:## it'll kill quotes and weird contractions ('bout)
1753386669252:line <- gsub("' ", " ", line)
1753386669252:line <- gsub(" '", " ", line)
1753386669252:}
1753386669253:if (!hyphens)
1753386669253:{ line <- gsub("-", " ", line) }
1753386669253:return (c(line, partialWord))
1753386669253:}
1753386669253:######################### end helper functions ##############################
1753386669254:## finding a file or using a string input?
1753386669254:if(textIn == "file")
1753386669254:{
1753386669254:## pick the file and verify
1753386669254:path <- chooseFile()
1753386669255:## open the connection to the file
1753386669255:text <- file(path, open = "r")
1753386669255:} ## end if using file
1753386669255:else ## for readLines to work, textConnection the string input
1753386669255:{ text <- textConnection(textIn) }
1753386669256:## initialize the variable to hold hyphenated end-of-liners
1753386669256:last <- ""
1753386669256:## initialize a vector to hold the counts
1753386669256:wordCount <- c()
1753386669257:##while(TRUE)
1753386669257:for (i in 1:10)
1753386669257:{
1753386669257:line <- readLines(text, n = 1)
1753386669257:## if the last line ended with a hyphenated word, paste it on da start
1753386669257:line <- paste0(last, line)
1753386669258:cat("\n")
1753386669258:cat("this is line:" , line)
1753386669258:## but how does it know there are no more lines? MAGIC
1753386669258:if (length(line) == 0) { break }
1753386669258:else
1753386669258:{
1753386669259:## lines of code where line is on line as line for line (wanna line?)
1753386669259:wash <- clean(line, keepHyphens, keepContractions)
1753386669259:## wtf
1753386669259:print(wash)
1753386669259:line <- wash[1]
1753386669260:words <- unlist(strsplit(line,"\\s+"))
1753386669260:if (wash[2])
1753386669260:{
1753386669260:## store the last word frag
1753386669260:last <- words[length(words)]
1753386669260:## reset the line to not hold that part
1753386669260:words <- words[-length(words)]
1753386669261:} ## partial word saved for next line
1753386669261:for (word in words) ## word
1753386669261:{
1753386669261:if(wordCount[word])
1753386669262:{ wordCount[word] <- 1}
1753386669262:else ## wordCount[word]++, no? 'course not
1753386669262:{ wordCount[word] <- wordCount[word] + 1}
1753386669262:}
1753386669262:} ## end not empty line
1753386669263:} ## end while reading lines
1753386669263:## close the file, if it was a file
1753386669263:if (textIn == "file") { close(text) }
1753386669263:return (wordCount)
1753386669264:} ## end readTheText
1753386669264:wordCnt <- analyze()
1753386735567:"found" %in% names(wordCnt)
1753386744520:"fuck" %in% names(wordCnt)
1753386777636:analyze <- function(textIn = "file",
1753386777636:keepHyphens = TRUE,
1753386777636:keepContractions = TRUE)
1753386777636:{
1753386777636:######################## start helper functions #############################
1753386777636:## pick the file if need be, pick your nose, too!
1753386777636:chooseFile <- function()
1753386777636:{
1753386777636:## choose file or use path?
1753386777637:path <- readline(prompt = "enter path or 'enter' to search")
1753386777637:if (path == "")
1753386777637:{ path <- file.choose() }
1753386777638:if(!file.exists(path))
1753386777638:{
1753386777638:print("try again! file not found 404 SOS")
1753386777638:## try again
1753386777638:chooseFile()
1753386777638:} ## end while invalid file path
1753386777638:## and spit it out
1753386777638:return (path)
1753386777639:}
1753386777639:## clean the line, keep or remove hyphens and contractions
1753386777639:clean <- function(line, hyphens, contractions)
1753386777639:{
1753386777639:## does the line end in a hyphenated word? damn, work
1753386777639:partialWord <- FALSE
1753386777639:if (grepl("-$", line))
1753386777639:{ partialWord <- TRUE }
1753386777640:## no proper nouns allowed
1753386777640:line <- tolower(line)
1753386777640:## apropros keep hyphy chars
1753386777640:line <- gsub("[^a-z'-]", " ", line)
1753386777640:## okay WTF is going on here?
1753386777640:print("removed punctuation?")
1753386777641:print(line)
1753386777641:if (!contractions)
1753386777641:{ line <- gsub("'", " ", line) }
1753386777641:else
1753386777641:{
1753386777641:## it'll kill quotes and weird contractions ('bout)
1753386777642:line <- gsub("' ", " ", line)
1753386777642:line <- gsub(" '", " ", line)
1753386777642:}
1753386777642:if (!hyphens)
1753386777642:{ line <- gsub("-", " ", line) }
1753386777642:return (c(line, partialWord))
1753386777643:}
1753386777643:######################### end helper functions ##############################
1753386777643:## finding a file or using a string input?
1753386777643:if(textIn == "file")
1753386777644:{
1753386777644:## pick the file and verify
1753386777644:path <- chooseFile()
1753386777644:## open the connection to the file
1753386777644:text <- file(path, open = "r")
1753386777644:} ## end if using file
1753386777644:else ## for readLines to work, textConnection the string input
1753386777645:{ text <- textConnection(textIn) }
1753386777645:## initialize the variable to hold hyphenated end-of-liners
1753386777645:last <- ""
1753386777645:## initialize a vector to hold the counts
1753386777645:wordCount <- c()
1753386777646:##while(TRUE)
1753386777646:for (i in 1:10)
1753386777646:{
1753386777646:line <- readLines(text, n = 1)
1753386777646:## if the last line ended with a hyphenated word, paste it on da start
1753386777646:line <- paste0(last, line)
1753386777646:cat("\n")
1753386777647:cat("this is line:" , line)
1753386777647:## but how does it know there are no more lines? MAGIC
1753386777647:if (length(line) == 0) { break }
1753386777647:else
1753386777647:{
1753386777647:## lines of code where line is on line as line for line (wanna line?)
1753386777647:wash <- clean(line, keepHyphens, keepContractions)
1753386777648:## wtf
1753386777648:print(wash)
1753386777648:line <- wash[1]
1753386777648:words <- unlist(strsplit(line,"\\s+"))
1753386777648:if (wash[2])
1753386777649:{
1753386777649:## store the last word frag
1753386777649:last <- words[length(words)]
1753386777649:## reset the line to not hold that part
1753386777649:words <- words[-length(words)]
1753386777649:} ## partial word saved for next line
1753386777650:for (word in words) ## word
1753386777650:{
1753386777650:if(word %in% names(wordCount))
1753386777650:{ wordCount[word] <- 1}
1753386777650:else ## wordCount[word]++, no? 'course not
1753386777650:{ wordCount[word] <- wordCount[word] + 1}
1753386777651:}
1753386777651:} ## end not empty line
1753386777651:} ## end while reading lines
1753386777652:## close the file, if it was a file
1753386777652:if (textIn == "file") { close(text) }
1753386777652:return (wordCount)
1753386777652:} ## end readTheText
1753386777653:wordCnt <- analyze()
1753386791188:wordCnt
1753386822298:analyze <- function(textIn = "file",
1753386822298:keepHyphens = TRUE,
1753386822298:keepContractions = TRUE)
1753386822298:{
1753386822298:######################## start helper functions #############################
1753386822298:## pick the file if need be, pick your nose, too!
1753386822298:chooseFile <- function()
1753386822298:{
1753386822298:## choose file or use path?
1753386822299:path <- readline(prompt = "enter path or 'enter' to search")
1753386822299:if (path == "")
1753386822299:{ path <- file.choose() }
1753386822299:if(!file.exists(path))
1753386822300:{
1753386822300:print("try again! file not found 404 SOS")
1753386822300:## try again
1753386822300:chooseFile()
1753386822300:} ## end while invalid file path
1753386822300:## and spit it out
1753386822301:return (path)
1753386822301:}
1753386822301:## clean the line, keep or remove hyphens and contractions
1753386822301:clean <- function(line, hyphens, contractions)
1753386822302:{
1753386822302:## does the line end in a hyphenated word? damn, work
1753386822302:partialWord <- FALSE
1753386822302:if (grepl("-$", line))
1753386822302:{ partialWord <- TRUE }
1753386822302:## no proper nouns allowed
1753386822302:line <- tolower(line)
1753386822302:## apropros keep hyphy chars
1753386822303:line <- gsub("[^a-z'-]", " ", line)
1753386822303:## okay WTF is going on here?
1753386822303:print("removed punctuation?")
1753386822303:print(line)
1753386822303:if (!contractions)
1753386822303:{ line <- gsub("'", " ", line) }
1753386822303:else
1753386822304:{
1753386822304:## it'll kill quotes and weird contractions ('bout)
1753386822304:line <- gsub("' ", " ", line)
1753386822304:line <- gsub(" '", " ", line)
1753386822304:}
1753386822304:if (!hyphens)
1753386822305:{ line <- gsub("-", " ", line) }
1753386822305:return (c(line, partialWord))
1753386822305:}
1753386822305:######################### end helper functions ##############################
1753386822306:## finding a file or using a string input?
1753386822306:if(textIn == "file")
1753386822306:{
1753386822306:## pick the file and verify
1753386822306:path <- chooseFile()
1753386822307:## open the connection to the file
1753386822307:text <- file(path, open = "r")
1753386822307:} ## end if using file
1753386822307:else ## for readLines to work, textConnection the string input
1753386822307:{ text <- textConnection(textIn) }
1753386822308:## initialize the variable to hold hyphenated end-of-liners
1753386822308:last <- ""
1753386822308:## initialize a vector to hold the counts
1753386822308:wordCount <- c()
1753386822308:##while(TRUE)
1753386822308:for (i in 1:1)
1753386822309:{
1753386822309:line <- readLines(text, n = 1)
1753386822309:## if the last line ended with a hyphenated word, paste it on da start
1753386822309:line <- paste0(last, line)
1753386822309:cat("\n")
1753386822309:cat("this is line:" , line)
1753386822310:## but how does it know there are no more lines? MAGIC
1753386822310:if (length(line) == 0) { break }
1753386822310:else
1753386822310:{
1753386822310:## lines of code where line is on line as line for line (wanna line?)
1753386822310:wash <- clean(line, keepHyphens, keepContractions)
1753386822310:## wtf
1753386822311:print(wash)
1753386822311:line <- wash[1]
1753386822311:words <- unlist(strsplit(line,"\\s+"))
1753386822311:if (wash[2])
1753386822311:{
1753386822312:## store the last word frag
1753386822312:last <- words[length(words)]
1753386822312:## reset the line to not hold that part
1753386822312:words <- words[-length(words)]
1753386822312:} ## partial word saved for next line
1753386822313:for (word in words) ## word
1753386822313:{
1753386822313:if(word %in% names(wordCount))
1753386822313:{ wordCount[word] <- 1}
1753386822313:else ## wordCount[word]++, no? 'course not
1753386822313:{ wordCount[word] <- wordCount[word] + 1}
1753386822313:}
1753386822314:} ## end not empty line
1753386822314:} ## end while reading lines
1753386822314:## close the file, if it was a file
1753386822314:if (textIn == "file") { close(text) }
1753386822315:return (wordCount)
1753386822315:} ## end readTheText
1753386822315:wordCnt <- analyze()
1753386833681:wordCnt
1753386858136:analyze <- function(textIn = "file",
1753386858137:keepHyphens = TRUE,
1753386858137:keepContractions = TRUE)
1753386858137:{
1753386858137:######################## start helper functions #############################
1753386858137:## pick the file if need be, pick your nose, too!
1753386858137:chooseFile <- function()
1753386858137:{
1753386858137:## choose file or use path?
1753386858137:path <- readline(prompt = "enter path or 'enter' to search")
1753386858137:if (path == "")
1753386858137:{ path <- file.choose() }
1753386858138:if(!file.exists(path))
1753386858138:{
1753386858138:print("try again! file not found 404 SOS")
1753386858138:## try again
1753386858138:chooseFile()
1753386858138:} ## end while invalid file path
1753386858139:## and spit it out
1753386858139:return (path)
1753386858139:}
1753386858139:## clean the line, keep or remove hyphens and contractions
1753386858139:clean <- function(line, hyphens, contractions)
1753386858140:{
1753386858140:## does the line end in a hyphenated word? damn, work
1753386858140:partialWord <- FALSE
1753386858140:if (grepl("-$", line))
1753386858140:{ partialWord <- TRUE }
1753386858141:## no proper nouns allowed
1753386858141:line <- tolower(line)
1753386858141:## apropros keep hyphy chars
1753386858141:line <- gsub("[^a-z'-]", " ", line)
1753386858141:## okay WTF is going on here?
1753386858142:print("removed punctuation?")
1753386858142:print(line)
1753386858142:if (!contractions)
1753386858142:{ line <- gsub("'", " ", line) }
1753386858142:else
1753386858142:{
1753386858143:## it'll kill quotes and weird contractions ('bout)
1753386858143:line <- gsub("' ", " ", line)
1753386858143:line <- gsub(" '", " ", line)
1753386858143:}
1753386858143:if (!hyphens)
1753386858144:{ line <- gsub("-", " ", line) }
1753386858144:return (c(line, partialWord))
1753386858144:}
1753386858144:######################### end helper functions ##############################
1753386858145:## finding a file or using a string input?
1753386858145:if(textIn == "file")
1753386858145:{
1753386858145:## pick the file and verify
1753386858145:path <- chooseFile()
1753386858145:## open the connection to the file
1753386858145:text <- file(path, open = "r")
1753386858146:} ## end if using file
1753386858146:else ## for readLines to work, textConnection the string input
1753386858146:{ text <- textConnection(textIn) }
1753386858146:## initialize the variable to hold hyphenated end-of-liners
1753386858146:last <- ""
1753386858146:## initialize a vector to hold the counts
1753386858146:wordCount <- c()
1753386858147:##while(TRUE)
1753386858147:for (i in 1:1)
1753386858147:{
1753386858147:line <- readLines(text, n = 1)
1753386858147:## if the last line ended with a hyphenated word, paste it on da start
1753386858147:line <- paste0(last, line)
1753386858148:cat("\n")
1753386858148:cat("this is line:" , line)
1753386858148:## but how does it know there are no more lines? MAGIC
1753386858148:if (length(line) == 0) { break }
1753386858148:else
1753386858148:{
1753386858148:## lines of code where line is on line as line for line (wanna line?)
1753386858149:wash <- clean(line, keepHyphens, keepContractions)
1753386858149:## wtf
1753386858149:print(wash)
1753386858149:line <- wash[1]
1753386858149:words <- unlist(strsplit(line,"\\s+"))
1753386858150:if (wash[2])
1753386858150:{
1753386858150:## store the last word frag
1753386858150:last <- words[length(words)]
1753386858150:## reset the line to not hold that part
1753386858150:words <- words[-length(words)]
1753386858151:} ## partial word saved for next line
1753386858151:for (word in words) ## word
1753386858151:{
1753386858151:if(word %in% names(wordCount))
1753386858151:{ wordCount[word] <- 1}
1753386858152:else ## wordCount[word]++, no? 'course not
1753386858152:{ wordCount[word] <- wordCount[word] + 1}
1753386858152:}
1753386858152:} ## end not empty line
1753386858152:} ## end while reading lines
1753386858153:## close the file, if it was a file
1753386858153:if (textIn == "file") { close(text) }
1753386858153:wordCount
1753386858153:return (wordCount)
1753386858154:} ## end readTheText
1753386858154:wordCnt <- analyze()
1753386875616:wordCount
1753386881590:wordCnt
1753386910068:analyze <- function(textIn = "file",
1753386910068:keepHyphens = TRUE,
1753386910068:keepContractions = TRUE)
1753386910068:{
1753386910069:######################## start helper functions #############################
1753386910069:## pick the file if need be, pick your nose, too!
1753386910069:chooseFile <- function()
1753386910069:{
1753386910069:## choose file or use path?
1753386910069:path <- readline(prompt = "enter path or 'enter' to search")
1753386910069:if (path == "")
1753386910070:{ path <- file.choose() }
1753386910070:if(!file.exists(path))
1753386910070:{
1753386910071:print("try again! file not found 404 SOS")
1753386910071:## try again
1753386910071:chooseFile()
1753386910071:} ## end while invalid file path
1753386910072:## and spit it out
1753386910072:return (path)
1753386910072:}
1753386910072:## clean the line, keep or remove hyphens and contractions
1753386910072:clean <- function(line, hyphens, contractions)
1753386910072:{
1753386910073:## does the line end in a hyphenated word? damn, work
1753386910073:partialWord <- FALSE
1753386910073:if (grepl("-$", line))
1753386910073:{ partialWord <- TRUE }
1753386910073:## no proper nouns allowed
1753386910073:line <- tolower(line)
1753386910073:## apropros keep hyphy chars
1753386910074:line <- gsub("[^a-z'-]", " ", line)
1753386910074:## okay WTF is going on here?
1753386910074:print("removed punctuation?")
1753386910074:print(line)
1753386910075:if (!contractions)
1753386910075:{ line <- gsub("'", " ", line) }
1753386910075:else
1753386910075:{
1753386910075:## it'll kill quotes and weird contractions ('bout)
1753386910075:line <- gsub("' ", " ", line)
1753386910075:line <- gsub(" '", " ", line)
1753386910075:}
1753386910076:if (!hyphens)
1753386910076:{ line <- gsub("-", " ", line) }
1753386910076:return (c(line, partialWord))
1753386910076:}
1753386910077:######################### end helper functions ##############################
1753386910077:## finding a file or using a string input?
1753386910077:if(textIn == "file")
1753386910077:{
1753386910077:## pick the file and verify
1753386910078:path <- chooseFile()
1753386910078:## open the connection to the file
1753386910078:text <- file(path, open = "r")
1753386910078:} ## end if using file
1753386910078:else ## for readLines to work, textConnection the string input
1753386910078:{ text <- textConnection(textIn) }
1753386910079:## initialize the variable to hold hyphenated end-of-liners
1753386910079:last <- ""
1753386910079:## initialize a vector to hold the counts
1753386910079:wordCount <- c()
1753386910079:##while(TRUE)
1753386910079:for (i in 1:1)
1753386910080:{
1753386910080:line <- readLines(text, n = 1)
1753386910080:## if the last line ended with a hyphenated word, paste it on da start
1753386910080:line <- paste0(last, line)
1753386910080:cat("\n")
1753386910080:cat("this is line:" , line)
1753386910081:## but how does it know there are no more lines? MAGIC
1753386910081:if (length(line) == 0) { break }
1753386910081:else
1753386910081:{
1753386910081:## lines of code where line is on line as line for line (wanna line?)
1753386910081:wash <- clean(line, keepHyphens, keepContractions)
1753386910081:## wtf
1753386910082:print(wash)
1753386910082:line <- wash[1]
1753386910082:words <- unlist(strsplit(line,"\\s+"))
1753386910082:if (wash[2])
1753386910082:{
1753386910083:## store the last word frag
1753386910083:last <- words[length(words)]
1753386910083:## reset the line to not hold that part
1753386910083:words <- words[-length(words)]
1753386910083:} ## partial word saved for next line
1753386910084:for (word in words) ## word
1753386910084:{
1753386910084:if(word %in% names(wordCount))
1753386910084:{ wordCount[word] <- 1}
1753386910084:else ## wordCount[word]++, no? 'course not
1753386910084:{ wordCount[word] <- wordCount[word] + 1}
1753386910084:}
1753386910085:} ## end not empty line
1753386910085:} ## end while reading lines
1753386910085:## close the file, if it was a file
1753386910086:if (textIn == "file") { close(text) }
1753386910086:print(wordCount)
1753386910086:return (wordCount)
1753386910086:} ## end readTheText
1753386910087:wordCnt <- analyze()
1753386946750:analyze <- function(textIn = "file",
1753386946750:keepHyphens = TRUE,
1753386946750:keepContractions = TRUE)
1753386946750:{
1753386946750:######################## start helper functions #############################
1753386946750:## pick the file if need be, pick your nose, too!
1753386946751:chooseFile <- function()
1753386946751:{
1753386946751:## choose file or use path?
1753386946751:path <- readline(prompt = "enter path or 'enter' to search")
1753386946751:if (path == "")
1753386946751:{ path <- file.choose() }
1753386946752:if(!file.exists(path))
1753386946752:{
1753386946752:print("try again! file not found 404 SOS")
1753386946752:## try again
1753386946752:chooseFile()
1753386946752:} ## end while invalid file path
1753386946752:## and spit it out
1753386946752:return (path)
1753386946753:}
1753386946753:## clean the line, keep or remove hyphens and contractions
1753386946753:clean <- function(line, hyphens, contractions)
1753386946753:{
1753386946753:## does the line end in a hyphenated word? damn, work
1753386946753:partialWord <- FALSE
1753386946753:if (grepl("-$", line))
1753386946753:{ partialWord <- TRUE }
1753386946754:## no proper nouns allowed
1753386946754:line <- tolower(line)
1753386946754:## apropros keep hyphy chars
1753386946754:line <- gsub("[^a-z'-]", " ", line)
1753386946754:## okay WTF is going on here?
1753386946754:print("removed punctuation?")
1753386946755:print(line)
1753386946755:if (!contractions)
1753386946755:{ line <- gsub("'", " ", line) }
1753386946755:else
1753386946755:{
1753386946755:## it'll kill quotes and weird contractions ('bout)
1753386946756:line <- gsub("' ", " ", line)
1753386946756:line <- gsub(" '", " ", line)
1753386946756:}
1753386946756:if (!hyphens)
1753386946756:{ line <- gsub("-", " ", line) }
1753386946757:return (c(line, partialWord))
1753386946757:}
1753386946757:######################### end helper functions ##############################
1753386946758:## finding a file or using a string input?
1753386946758:if(textIn == "file")
1753386946758:{
1753386946758:## pick the file and verify
1753386946758:path <- chooseFile()
1753386946758:## open the connection to the file
1753386946759:text <- file(path, open = "r")
1753386946759:} ## end if using file
1753386946759:else ## for readLines to work, textConnection the string input
1753386946760:{ text <- textConnection(textIn) }
1753386946760:## initialize the variable to hold hyphenated end-of-liners
1753386946760:last <- ""
1753386946760:## initialize a vector to hold the counts
1753386946761:wordCount <- c("fak" = 1)
1753386946762:##while(TRUE)
1753386946762:for (i in 1:1)
1753386946762:{
1753386946762:line <- readLines(text, n = 1)
1753386946762:## if the last line ended with a hyphenated word, paste it on da start
1753386946763:line <- paste0(last, line)
1753386946763:cat("\n")
1753386946763:cat("this is line:" , line)
1753386946763:## but how does it know there are no more lines? MAGIC
1753386946763:if (length(line) == 0) { break }
1753386946763:else
1753386946764:{
1753386946764:## lines of code where line is on line as line for line (wanna line?)
1753386946764:wash <- clean(line, keepHyphens, keepContractions)
1753386946764:## wtf
1753386946764:print(wash)
1753386946764:line <- wash[1]
1753386946765:words <- unlist(strsplit(line,"\\s+"))
1753386946765:if (wash[2])
1753386946765:{
1753386946765:## store the last word frag
1753386946765:last <- words[length(words)]
1753386946766:## reset the line to not hold that part
1753386946766:words <- words[-length(words)]
1753386946766:} ## partial word saved for next line
1753386946766:for (word in words) ## word
1753386946766:{
1753386946767:if(word %in% names(wordCount))
1753386946767:{ wordCount[word] <- 1}
1753386946767:else ## wordCount[word]++, no? 'course not
1753386946767:{ wordCount[word] <- wordCount[word] + 1}
1753386946767:}
1753386946768:} ## end not empty line
1753386946768:} ## end while reading lines
1753386946768:## close the file, if it was a file
1753386946768:if (textIn == "file") { close(text) }
1753386946768:print(wordCount)
1753386946769:return (wordCount)
1753386946769:} ## end readTheText
1753386946770:wordCnt <- analyze()
1753387054531:analyze <- function(textIn = "file",
1753387054531:keepHyphens = TRUE,
1753387054532:keepContractions = TRUE)
1753387054532:{
1753387054532:######################## start helper functions #############################
1753387054532:## pick the file if need be, pick your nose, too!
1753387054532:chooseFile <- function()
1753387054532:{
1753387054532:## choose file or use path?
1753387054532:path <- readline(prompt = "enter path or 'enter' to search")
1753387054532:if (path == "")
1753387054532:{ path <- file.choose() }
1753387054533:if(!file.exists(path))
1753387054533:{
1753387054533:print("try again! file not found 404 SOS")
1753387054533:## try again
1753387054534:chooseFile()
1753387054534:} ## end while invalid file path
1753387054534:## and spit it out
1753387054534:return (path)
1753387054534:}
1753387054535:## clean the line, keep or remove hyphens and contractions
1753387054535:clean <- function(line, hyphens, contractions)
1753387054535:{
1753387054535:## does the line end in a hyphenated word? damn, work
1753387054535:partialWord <- FALSE
1753387054536:if (grepl("-$", line))
1753387054536:{ partialWord <- TRUE }
1753387054536:## no proper nouns allowed
1753387054536:line <- tolower(line)
1753387054536:## apropros keep hyphy chars
1753387054537:line <- gsub("[^a-z'-]", " ", line)
1753387054537:## okay WTF is going on here?
1753387054537:print("removed punctuation?")
1753387054537:print(line)
1753387054538:if (!contractions)
1753387054538:{ line <- gsub("'", " ", line) }
1753387054538:else
1753387054538:{
1753387054538:## it'll kill quotes and weird contractions ('bout)
1753387054538:line <- gsub("' ", " ", line)
1753387054538:line <- gsub(" '", " ", line)
1753387054539:}
1753387054539:if (!hyphens)
1753387054539:{ line <- gsub("-", " ", line) }
1753387054540:return (c(line, partialWord))
1753387054540:}
1753387054540:######################### end helper functions ##############################
1753387054541:## finding a file or using a string input?
1753387054541:if(textIn == "file")
1753387054541:{
1753387054541:## pick the file and verify
1753387054541:path <- chooseFile()
1753387054542:## open the connection to the file
1753387054542:text <- file(path, open = "r")
1753387054542:} ## end if using file
1753387054542:else ## for readLines to work, textConnection the string input
1753387054542:{ text <- textConnection(textIn) }
1753387054543:## initialize the variable to hold hyphenated end-of-liners
1753387054543:last <- ""
1753387054543:## initialize a vector to hold the counts
1753387054543:wordCount <- c("fak" = 1)
1753387054543:##while(TRUE)
1753387054543:for (i in 1:1)
1753387054543:{
1753387054544:line <- readLines(text, n = 1)
1753387054544:## if the last line ended with a hyphenated word, paste it on da start
1753387054544:line <- paste0(last, line)
1753387054544:cat("\n")
1753387054544:cat("this is line:" , line)
1753387054545:## but how does it know there are no more lines? MAGIC
1753387054545:if (length(line) == 0) { break }
1753387054545:else
1753387054545:{
1753387054545:## lines of code where line is on line as line for line (wanna line?)
1753387054545:wash <- clean(line, keepHyphens, keepContractions)
1753387054545:## wtf
1753387054546:print(wash)
1753387054546:line <- wash[1]
1753387054546:words <- unlist(strsplit(line,"\\s+"))
1753387054546:if (wash[2])
1753387054546:{
1753387054547:## store the last word frag
1753387054547:last <- words[length(words)]
1753387054547:## reset the line to not hold that part
1753387054547:words <- words[-length(words)]
1753387054547:} ## partial word saved for next line
1753387054548:for (word in words) ## word
1753387054548:{
1753387054548:if(word %in% names(wordCount))
1753387054548:{ wordCount[word] <- 1}
1753387054548:else ## wordCount[word]++, no? 'course not
1753387054548:{ wordCount[word] <- wordCount[word] + 1}
1753387054548:}
1753387054549:} ## end not empty line
1753387054549:} ## end while reading lines
1753387054549:## close the file, if it was a file
1753387054550:if (textIn == "file") { close(text) }
1753387054550:print(wordCount)
1753387054550:return (wordCount)
1753387054550:} ## end readTheText
1753387054551:wordCnt <- analyze()
1753387085644:analyze <- function(textIn = "file",
1753387085644:keepHyphens = TRUE,
1753387085644:keepContractions = TRUE)
1753387085644:{
1753387085644:######################## start helper functions #############################
1753387085644:## pick the file if need be, pick your nose, too!
1753387085644:chooseFile <- function()
1753387085645:{
1753387085645:## choose file or use path?
1753387085645:path <- readline(prompt = "enter path or 'enter' to search")
1753387085645:if (path == "")
1753387085645:{ path <- file.choose() }
1753387085645:if(!file.exists(path))
1753387085645:{
1753387085645:print("try again! file not found 404 SOS")
1753387085645:## try again
1753387085645:chooseFile()
1753387085645:} ## end while invalid file path
1753387085646:## and spit it out
1753387085646:return (path)
1753387085646:}
1753387085647:## clean the line, keep or remove hyphens and contractions
1753387085647:clean <- function(line, hyphens, contractions)
1753387085647:{
1753387085647:## does the line end in a hyphenated word? damn, work
1753387085647:partialWord <- FALSE
1753387085647:if (grepl("-$", line))
1753387085647:{ partialWord <- TRUE }
1753387085648:## no proper nouns allowed
1753387085648:line <- tolower(line)
1753387085648:## apropros keep hyphy chars
1753387085648:line <- gsub("[^a-z'-]", " ", line)
1753387085649:## okay WTF is going on here?
1753387085649:print("removed punctuation?")
1753387085649:print(line)
1753387085649:if (!contractions)
1753387085649:{ line <- gsub("'", " ", line) }
1753387085650:else
1753387085650:{
1753387085650:## it'll kill quotes and weird contractions ('bout)
1753387085650:line <- gsub("' ", " ", line)
1753387085650:line <- gsub(" '", " ", line)
1753387085650:}
1753387085651:if (!hyphens)
1753387085651:{ line <- gsub("-", " ", line) }
1753387085651:return (c(line, partialWord))
1753387085651:}
1753387085652:######################### end helper functions ##############################
1753387085652:## finding a file or using a string input?
1753387085652:if(textIn == "file")
1753387085653:{
1753387085653:## pick the file and verify
1753387085653:path <- chooseFile()
1753387085653:## open the connection to the file
1753387085653:text <- file(path, open = "r")
1753387085653:} ## end if using file
1753387085654:else ## for readLines to work, textConnection the string input
1753387085654:{ text <- textConnection(textIn) }
1753387085654:## initialize the variable to hold hyphenated end-of-liners
1753387085654:last <- ""
1753387085654:## initialize a vector to hold the counts
1753387085654:wordCount <- c()
1753387085655:##while(TRUE)
1753387085655:for (i in 1:1)
1753387085655:{
1753387085655:line <- readLines(text, n = 1)
1753387085655:## if the last line ended with a hyphenated word, paste it on da start
1753387085655:line <- paste0(last, line)
1753387085656:cat("\n")
1753387085656:cat("this is line:" , line)
1753387085656:## but how does it know there are no more lines? MAGIC
1753387085656:if (length(line) == 0) { break }
1753387085656:else
1753387085656:{
1753387085656:## lines of code where line is on line as line for line (wanna line?)
1753387085657:wash <- clean(line, keepHyphens, keepContractions)
1753387085657:## wtf
1753387085657:print(wash)
1753387085657:line <- wash[1]
1753387085657:words <- unlist(strsplit(line,"\\s+"))
1753387085658:if (wash[2])
1753387085658:{
1753387085658:## store the last word frag
1753387085658:last <- words[length(words)]
1753387085658:## reset the line to not hold that part
1753387085658:words <- words[-length(words)]
1753387085659:} ## partial word saved for next line
1753387085659:for (word in words) ## word
1753387085659:{
1753387085659:if(word %in% names(wordCount))
1753387085659:{ wordCount[word] <- 1}
1753387085659:else ## wordCount[word]++, no? 'course not
1753387085660:{ wordCount[word] <- wordCount[word] + 1}
1753387085660:}
1753387085660:} ## end not empty line
1753387085660:} ## end while reading lines
1753387085661:## close the file, if it was a file
1753387085661:if (textIn == "file") { close(text) }
1753387085661:print(wordCount)
1753387085661:return (wordCount)
1753387085662:} ## end readTheText
1753387085662:wordCnt <- analyze()
1753387197644:analyze <- function(textIn = "file",
1753387197644:keepHyphens = TRUE,
1753387197644:keepContractions = TRUE)
1753387197644:{
1753387197644:######################## start helper functions #############################
1753387197645:## pick the file if need be, pick your nose, too!
1753387197645:chooseFile <- function()
1753387197645:{
1753387197645:## choose file or use path?
1753387197645:path <- readline(prompt = "enter path or 'enter' to search")
1753387197645:if (path == "")
1753387197645:{ path <- file.choose() }
1753387197645:if(!file.exists(path))
1753387197645:{
1753387197645:print("try again! file not found 404 SOS")
1753387197646:## try again
1753387197646:chooseFile()
1753387197646:} ## end while invalid file path
1753387197646:## and spit it out
1753387197646:return (path)
1753387197646:}
1753387197647:## clean the line, keep or remove hyphens and contractions
1753387197647:clean <- function(line, hyphens, contractions)
1753387197647:{
1753387197647:## does the line end in a hyphenated word? damn, work
1753387197647:partialWord <- FALSE
1753387197647:if (grepl("-$", line))
1753387197647:{ partialWord <- TRUE }
1753387197647:## no proper nouns allowed
1753387197648:line <- tolower(line)
1753387197648:## apropros keep hyphy chars
1753387197648:line <- gsub("[^a-z'-]", " ", line)
1753387197648:## okay WTF is going on here?
1753387197648:print("removed punctuation?")
1753387197648:print(line)
1753387197649:if (!contractions)
1753387197649:{ line <- gsub("'", " ", line) }
1753387197649:else
1753387197649:{
1753387197649:## it'll kill quotes and weird contractions ('bout)
1753387197649:line <- gsub("' ", " ", line)
1753387197649:line <- gsub(" '", " ", line)
1753387197650:}
1753387197650:if (!hyphens)
1753387197650:{ line <- gsub("-", " ", line) }
1753387197650:return (c(line, partialWord))
1753387197650:}
1753387197651:######################### end helper functions ##############################
1753387197651:## finding a file or using a string input?
1753387197651:if(textIn == "file")
1753387197651:{
1753387197652:## pick the file and verify
1753387197652:path <- chooseFile()
1753387197652:## open the connection to the file
1753387197652:text <- file(path, open = "r")
1753387197652:} ## end if using file
1753387197652:else ## for readLines to work, textConnection the string input
1753387197652:{ text <- textConnection(textIn) }
1753387197653:## initialize the variable to hold hyphenated end-of-liners
1753387197653:last <- ""
1753387197653:## initialize a vector to hold the counts
1753387197653:wordCount <- c("word" = 0)
1753387197653:##while(TRUE)
1753387197653:for (i in 1:1)
1753387197654:{
1753387197654:line <- readLines(text, n = 1)
1753387197654:## if the last line ended with a hyphenated word, paste it on da start
1753387197654:line <- paste0(last, line)
1753387197654:cat("\n")
1753387197654:cat("this is line:" , line)
1753387197655:## but how does it know there are no more lines? MAGIC
1753387197655:if (length(line) == 0) { break }
1753387197655:else
1753387197655:{
1753387197655:## lines of code where line is on line as line for line (wanna line?)
1753387197655:wash <- clean(line, keepHyphens, keepContractions)
1753387197655:## wtf
1753387197656:print(wash)
1753387197656:line <- wash[1]
1753387197656:words <- unlist(strsplit(line,"\\s+"))
1753387197656:if (wash[2])
1753387197656:{
1753387197657:## store the last word frag
1753387197657:last <- words[length(words)]
1753387197657:## reset the line to not hold that part
1753387197657:words <- words[-length(words)]
1753387197657:} ## partial word saved for next line
1753387197658:for (word in words) ## word
1753387197658:{
1753387197658:if(word %in% names(wordCount))
1753387197658:{ wordCount <- c(word, 1)}
1753387197658:else ## wordCount[word]++, no? 'course not
1753387197658:{ wordCount[word] <- wordCount[word] + 1}
1753387197658:}
1753387197659:} ## end not empty line
1753387197659:} ## end while reading lines
1753387197659:## close the file, if it was a file
1753387197660:if (textIn == "file") { close(text) }
1753387197660:print(wordCount)
1753387197660:return (wordCount)
1753387197660:} ## end readTheText
1753387197661:wordCnt <- analyze()
1753447863024:analyze <- function(textIn = "file",
1753447863024:keepHyphens = TRUE,
1753447863024:keepContractions = TRUE)
1753447863024:{
1753447863025:######################## start helper functions #############################
1753447863025:## pick the file if need be, pick your nose, too!
1753447863025:chooseFile <- function()
1753447863026:{
1753447863026:## choose file or use path?
1753447863026:path <- readline(prompt = "enter path or 'enter' to search")
1753447863026:if (path == "")
1753447863027:{ path <- file.choose() }
1753447863027:if(!file.exists(path))
1753447863027:{
1753447863027:print("try again! file not found 404 SOS")
1753447863028:## try again
1753447863028:chooseFile()
1753447863028:} ## end while invalid file path
1753447863028:## and spit it out
1753447863028:return (path)
1753447863029:}
1753447863029:## clean the line, keep or remove hyphens and contractions
1753447863029:clean <- function(line, hyphens, contractions)
1753447863029:{
1753447863030:## does the line end in a hyphenated word? damn, work
1753447863030:partialWord <- FALSE
1753447863030:if (grepl("-$", line))
1753447863031:{ partialWord <- TRUE }
1753447863031:## no proper nouns allowed
1753447863031:line <- tolower(line)
1753447863031:## apropros keep hyphy chars
1753447863032:line <- gsub("[^a-z'-]", " ", line)
1753447863032:## okay WTF is going on here?
1753447863032:print("removed punctuation?")
1753447863032:print(line)
1753447863033:if (!contractions)
1753447863033:{ line <- gsub("'", " ", line) }
1753447863033:else
1753447863033:{
1753447863034:## it'll kill quotes and weird contractions ('bout)
1753447863034:line <- gsub("' ", " ", line)
1753447863034:line <- gsub(" '", " ", line)
1753447863034:}
1753447863035:if (!hyphens)
1753447863035:{ line <- gsub("-", " ", line) }
1753447863035:return (c(line, partialWord))
1753447863035:}
1753447863035:######################### end helper functions ##############################
1753447863036:## finding a file or using a string input?
1753447863036:if(textIn == "file")
1753447863036:{
1753447863036:## pick the file and verify
1753447863036:path <- chooseFile()
1753447863037:## open the connection to the file
1753447863037:text <- file(path, open = "r")
1753447863037:} ## end if using file
1753447863037:else ## for readLines to work, textConnection the string input
1753447863037:{ text <- textConnection(textIn) }
1753447863038:## initialize the variable to hold hyphenated end-of-liners
1753447863038:last <- ""
1753447863038:## initialize a vector to hold the counts
1753447863038:wordCount <- c("word" = 0)
1753447863039:##while(TRUE)
1753447863039:for (i in 1:1)
1753447863039:{
1753447863039:line <- readLines(text, n = 1)
1753447863039:## if the last line ended with a hyphenated word, paste it on da start
1753447863039:line <- paste0(last, line)
1753447863040:cat("\n")
1753447863040:cat("this is line:" , line)
1753447863040:## but how does it know there are no more lines? MAGIC
1753447863040:if (length(line) == 0) { break }
1753447863040:else
1753447863041:{
1753447863041:## lines of code where line is on line as line for line (wanna line?)
1753447863041:wash <- clean(line, keepHyphens, keepContractions)
1753447863041:## wtf
1753447863041:print(wash)
1753447863042:line <- wash[1]
1753447863042:words <- unlist(strsplit(line,"\\s+"))
1753447863042:if (wash[2])
1753447863042:{
1753447863042:## store the last word frag
1753447863043:last <- words[length(words)]
1753447863043:## reset the line to not hold that part
1753447863043:words <- words[-length(words)]
1753447863043:} ## partial word saved for next line
1753447863044:for (word in words) ## word
1753447863044:{
1753447863044:if(word %in% names(wordCount))
1753447863044:{ wordCount <- c(word, 1)}
1753447863044:else ## wordCount[word]++, no? 'course not
1753447863045:{ wordCount[word] <- wordCount[word] + 1}
1753447863045:}
1753447863045:} ## end not empty line
1753447863046:} ## end while reading lines
1753447863046:## close the file, if it was a file
1753447863046:if (textIn == "file") { close(text) }
1753447863046:print(wordCount)
1753447863047:return (wordCount)
1753447863047:} ## end readTheText
1753447863048:wordCnt <- analyze()
1753447902162:analyze <- function(textIn = "file",
1753447902162:keepHyphens = TRUE,
1753447902163:keepContractions = TRUE)
1753447902163:{
1753447902163:######################## start helper functions #############################
1753447902164:## pick the file if need be, pick your nose, too!
1753447902164:chooseFile <- function()
1753447902164:{
1753447902164:## choose file or use path?
1753447902164:path <- readline(prompt = "enter path or 'enter' to search")
1753447902164:if (path == "")
1753447902164:{ path <- file.choose() }
1753447902164:if(!file.exists(path))
1753447902164:{
1753447902165:print("try again! file not found 404 SOS")
1753447902165:## try again
1753447902165:chooseFile()
1753447902165:} ## end while invalid file path
1753447902165:## and spit it out
1753447902166:return (path)
1753447902166:}
1753447902167:## clean the line, keep or remove hyphens and contractions
1753447902167:clean <- function(line, hyphens, contractions)
1753447902167:{
1753447902167:## does the line end in a hyphenated word? damn, work
1753447902168:partialWord <- FALSE
1753447902168:if (grepl("-$", line))
1753447902168:{ partialWord <- TRUE }
1753447902168:## no proper nouns allowed
1753447902169:line <- tolower(line)
1753447902169:## apropros keep hyphy chars
1753447902169:line <- gsub("[^a-z'-]", " ", line)
1753447902170:## okay WTF is going on here?
1753447902170:print("removed punctuation?")
1753447902170:print(line)
1753447902170:if (!contractions)
1753447902171:{ line <- gsub("'", " ", line) }
1753447902171:else
1753447902171:{
1753447902171:## it'll kill quotes and weird contractions ('bout)
1753447902171:line <- gsub("' ", " ", line)
1753447902171:line <- gsub(" '", " ", line)
1753447902172:}
1753447902172:if (!hyphens)
1753447902172:{ line <- gsub("-", " ", line) }
1753447902172:return (c(line, partialWord))
1753447902172:}
1753447902172:######################### end helper functions ##############################
1753447902173:## finding a file or using a string input?
1753447902173:if(textIn == "file")
1753447902173:{
1753447902173:## pick the file and verify
1753447902173:path <- chooseFile()
1753447902174:## open the connection to the file
1753447902174:text <- file(path, open = "r")
1753447902174:} ## end if using file
1753447902174:else ## for readLines to work, textConnection the string input
1753447902174:{ text <- textConnection(textIn) }
1753447902175:## initialize the variable to hold hyphenated end-of-liners
1753447902175:last <- ""
1753447902175:## initialize a vector to hold the counts
1753447902175:wordCount <- c("word" = 0)
1753447902175:##while(TRUE)
1753447902176:for (i in 1:1)
1753447902176:{
1753447902176:line <- readLines(text, n = 1)
1753447902176:## if the last line ended with a hyphenated word, paste it on da start
1753447902176:line <- paste0(last, line)
1753447902177:cat("\n")
1753447902177:cat("this is line:" , line)
1753447902177:## but how does it know there are no more lines? MAGIC
1753447902177:if (length(line) == 0) { break }
1753447902177:else
1753447902177:{
1753447902178:## lines of code where line is on line as line for line (wanna line?)
1753447902178:wash <- clean(line, keepHyphens, keepContractions)
1753447902178:## wtf
1753447902178:print(wash)
1753447902178:line <- wash[1]
1753447902179:words <- unlist(strsplit(line,"\\s+"))
1753447902179:if (wash[2])
1753447902179:{
1753447902179:## store the last word frag
1753447902179:last <- words[length(words)]
1753447902180:## reset the line to not hold that part
1753447902180:words <- words[-length(words)]
1753447902180:} ## partial word saved for next line
1753447902181:for (word in words) ## word
1753447902181:{
1753447902181:if(word %in% names(wordCount))
1753447902181:{ wordCount <- c(word, 1)}
1753447902181:else ## wordCount[word]++, no? 'course not
1753447902181:{ wordCount[word] <- as.numeric(wordCount[word] + 1)}
1753447902182:}
1753447902182:} ## end not empty line
1753447902182:} ## end while reading lines
1753447902183:## close the file, if it was a file
1753447902183:if (textIn == "file") { close(text) }
1753447902183:print(wordCount)
1753447902183:return (wordCount)
1753447902184:} ## end readTheText
1753447902184:wordCnt <- analyze()
1753448023990:analyze <- function(textIn = "file",
1753448023990:keepHyphens = TRUE,
1753448023990:keepContractions = TRUE)
1753448023990:{
1753448023990:######################## start helper functions #############################
1753448023991:## pick the file if need be, pick your nose, too!
1753448023991:chooseFile <- function()
1753448023991:{
1753448023991:## choose file or use path?
1753448023991:path <- readline(prompt = "enter path or 'enter' to search")
1753448023991:if (path == "")
1753448023991:{ path <- file.choose() }
1753448023991:if(!file.exists(path))
1753448023992:{
1753448023992:print("try again! file not found 404 SOS")
1753448023992:## try again
1753448023992:chooseFile()
1753448023992:} ## end while invalid file path
1753448023992:## and spit it out
1753448023992:return (path)
1753448023993:}
1753448023993:## clean the line, keep or remove hyphens and contractions
1753448023993:clean <- function(line, hyphens, contractions)
1753448023994:{
1753448023994:## does the line end in a hyphenated word? damn, work
1753448023994:partialWord <- FALSE
1753448023994:if (grepl("-$", line))
1753448023995:{ partialWord <- TRUE }
1753448023995:## no proper nouns allowed
1753448023995:line <- tolower(line)
1753448023996:## apropros keep hyphy chars
1753448023996:line <- gsub("[^a-z'-]", " ", line)
1753448023996:## okay WTF is going on here?
1753448023996:print("removed punctuation?")
1753448023997:print(line)
1753448023997:if (!contractions)
1753448023997:{ line <- gsub("'", " ", line) }
1753448023997:else
1753448023998:{
1753448023998:## it'll kill quotes and weird contractions ('bout)
1753448023998:line <- gsub("' ", " ", line)
1753448023998:line <- gsub(" '", " ", line)
1753448023999:}
1753448023999:if (!hyphens)
1753448023999:{ line <- gsub("-", " ", line) }
1753448023999:return (c(line, partialWord))
1753448023999:}
1753448024000:######################### end helper functions ##############################
1753448024000:## finding a file or using a string input?
1753448024000:if(textIn == "file")
1753448024000:{
1753448024000:## pick the file and verify
1753448024000:path <- chooseFile()
1753448024001:## open the connection to the file
1753448024001:text <- file(path, open = "r")
1753448024001:} ## end if using file
1753448024001:else ## for readLines to work, textConnection the string input
1753448024001:{ text <- textConnection(textIn) }
1753448024002:## initialize the variable to hold hyphenated end-of-liners
1753448024002:last <- ""
1753448024002:## initialize a vector to hold the counts
1753448024002:wordCount <- c("word" = 0)
1753448024003:##while(TRUE)
1753448024003:for (i in 1:1)
1753448024003:{
1753448024003:line <- readLines(text, n = 1)
1753448024003:## if the last line ended with a hyphenated word, paste it on da start
1753448024003:line <- paste0(last, line)
1753448024004:cat("\n")
1753448024004:cat("this is line:" , line)
1753448024004:## but how does it know there are no more lines? MAGIC
1753448024004:if (length(line) == 0) { break }
1753448024004:else
1753448024005:{
1753448024005:## lines of code where line is on line as line for line (wanna line?)
1753448024005:wash <- clean(line, keepHyphens, keepContractions)
1753448024005:## wtf
1753448024005:print(wash)
1753448024006:line <- wash[1]
1753448024006:words <- unlist(strsplit(line,"\\s+"))
1753448024006:if (wash[2])
1753448024006:{
1753448024006:## store the last word frag
1753448024007:last <- words[length(words)]
1753448024007:## reset the line to not hold that part
1753448024007:words <- words[-length(words)]
1753448024007:} ## partial word saved for next line
1753448024008:for (word in words) ## word
1753448024008:{
1753448024008:if(word %in% names(wordCount))
1753448024008:{ wordCount <- c(word, 1)}
1753448024008:else ## wordCount[word]++, no? 'course not
1753448024009:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448024009:}
1753448024009:} ## end not empty line
1753448024009:} ## end while reading lines
1753448024010:## close the file, if it was a file
1753448024010:if (textIn == "file") { close(text) }
1753448024010:print(wordCount)
1753448024011:return (wordCount)
1753448024011:} ## end readTheText
1753448024011:wordCnt <- analyze()
1753448028308:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448041849:wordCnt
1753448372973:analyze <- function(textIn = "file",
1753448372973:keepHyphens = TRUE,
1753448372973:keepContractions = TRUE)
1753448372973:{
1753448372973:######################## start helper functions #############################
1753448372974:## pick the file if need be, pick your nose, too!
1753448372974:chooseFile <- function()
1753448372974:{
1753448372974:## choose file or use path?
1753448372974:path <- readline(prompt = "enter path or 'enter' to search")
1753448372974:if (path == "")
1753448372975:{ path <- file.choose() }
1753448372975:if(!file.exists(path))
1753448372975:{
1753448372976:print("try again! file not found 404 SOS")
1753448372976:## try again
1753448372976:chooseFile()
1753448372976:} ## end while invalid file path
1753448372977:## and spit it out
1753448372977:return (path)
1753448372977:}
1753448372978:## clean the line, keep or remove hyphens and contractions
1753448372978:clean <- function(line, hyphens, contractions)
1753448372978:{
1753448372979:cat("into clean:", line)
1753448372979:cat("\n")
1753448372979:## does the line end in a hyphenated word? damn, work
1753448372979:partialWord <- FALSE
1753448372979:if (grepl("-$", line))
1753448372979:{ partialWord <- TRUE }
1753448372980:## no proper nouns allowed
1753448372980:line <- tolower(line)
1753448372980:## apropros keep hyphy chars
1753448372980:line <- gsub("[^a-z'-]", " ", line)
1753448372980:## okay WTF is going on here?
1753448372980:print("removed punctuation?")
1753448372981:print(line)
1753448372981:if (!contractions)
1753448372981:{ line <- gsub("'", " ", line) }
1753448372982:else
1753448372982:{
1753448372982:## it'll kill quotes and weird contractions ('bout)
1753448372982:line <- gsub("' ", " ", line)
1753448372982:line <- gsub(" '", " ", line)
1753448372982:}
1753448372983:if (!hyphens)
1753448372983:{ line <- gsub("-", " ", line) }
1753448372983:cat("out of clean:", line)
1753448372983:cat("\n\n")
1753448372983:return (c(line, partialWord))
1753448372984:}
1753448372984:######################### end helper functions ##############################
1753448372984:## finding a file or using a string input?
1753448372984:if(textIn == "file")
1753448372984:{
1753448372985:## pick the file and verify
1753448372985:path <- chooseFile()
1753448372985:## open the connection to the file
1753448372985:text <- file(path, open = "r")
1753448372985:} ## end if using file
1753448372985:else ## for readLines to work, textConnection the string input
1753448372986:{ text <- textConnection(textIn) }
1753448372986:## initialize the variable to hold hyphenated end-of-liners
1753448372986:last <- ""
1753448372986:## initialize a vector to hold the counts
1753448372986:wordCount <- c("word" = 0)
1753448372987:##while(TRUE)
1753448372987:for (i in 1:1)
1753448372987:{
1753448372987:line <- readLines(text, n = 1)
1753448372988:## if the last line ended with a hyphenated word, paste it on da start
1753448372988:line <- paste0(last, line)
1753448372988:cat("\n")
1753448372988:cat("this is line:" , line)
1753448372988:## but how does it know there are no more lines? MAGIC
1753448372989:if (length(line) == 0) { break }
1753448372989:else
1753448372989:{
1753448372989:## lines of code where line is on line as line for line (wanna line?)
1753448372989:wash <- clean(line, keepHyphens, keepContractions)
1753448372989:## wtf
1753448372990:print(wash)
1753448372990:line <- wash[1]
1753448372990:words <- unlist(strsplit(line,"\\s+"))
1753448372990:if (wash[2])
1753448372991:{
1753448372991:## store the last word frag
1753448372991:last <- words[length(words)]
1753448372991:## reset the line to not hold that part
1753448372991:words <- words[-length(words)]
1753448372992:} ## partial word saved for next line
1753448372992:for (word in words) ## word
1753448372992:{
1753448372992:if(word %in% names(wordCount))
1753448372993:{ wordCount <- c(word, 1)}
1753448372993:else ## wordCount[word]++, no? 'course not
1753448372993:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448372993:}
1753448372994:} ## end not empty line
1753448372994:} ## end while reading lines
1753448372994:## close the file, if it was a file
1753448372994:if (textIn == "file") { close(text) }
1753448372995:print(wordCount)
1753448372995:return (wordCount)
1753448372995:} ## end readTheText
1753448372996:wordCnt <- analyze()
1753448376870:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448418508:analyze <- function(textIn = "file",
1753448418509:keepHyphens = TRUE,
1753448418509:keepContractions = TRUE)
1753448418509:{
1753448418509:######################## start helper functions #############################
1753448418509:## pick the file if need be, pick your nose, too!
1753448418509:chooseFile <- function()
1753448418510:{
1753448418510:## choose file or use path?
1753448418510:path <- readline(prompt = "enter path or 'enter' to search")
1753448418510:if (path == "")
1753448418510:{ path <- file.choose() }
1753448418510:if(!file.exists(path))
1753448418510:{
1753448418511:print("try again! file not found 404 SOS")
1753448418511:## try again
1753448418511:chooseFile()
1753448418511:} ## end while invalid file path
1753448418511:## and spit it out
1753448418511:return (path)
1753448418512:}
1753448418512:## clean the line, keep or remove hyphens and contractions
1753448418512:clean <- function(line, hyphens, contractions)
1753448418512:{
1753448418513:cat("\n")
1753448418513:cat("into clean:", line)
1753448418513:cat("\n")
1753448418513:## does the line end in a hyphenated word? damn, work
1753448418513:partialWord <- FALSE
1753448418513:if (grepl("-$", line))
1753448418514:{ partialWord <- TRUE }
1753448418514:## no proper nouns allowed
1753448418514:line <- tolower(line)
1753448418514:## apropros keep hyphy chars
1753448418514:line <- gsub("[^a-z'-]", " ", line)
1753448418515:## okay WTF is going on here?
1753448418515:print("removed punctuation?")
1753448418515:print(line)
1753448418515:if (!contractions)
1753448418515:{ line <- gsub("'", " ", line) }
1753448418516:else
1753448418516:{
1753448418516:## it'll kill quotes and weird contractions ('bout)
1753448418516:line <- gsub("' ", " ", line)
1753448418516:line <- gsub(" '", " ", line)
1753448418516:}
1753448418517:if (!hyphens)
1753448418517:{ line <- gsub("-", " ", line) }
1753448418517:cat("out of clean:", line)
1753448418517:cat("\n\n")
1753448418518:return (c(line, partialWord))
1753448418518:}
1753448418518:######################### end helper functions ##############################
1753448418519:## finding a file or using a string input?
1753448418519:if(textIn == "file")
1753448418519:{
1753448418519:## pick the file and verify
1753448418520:path <- chooseFile()
1753448418520:## open the connection to the file
1753448418520:text <- file(path, open = "r")
1753448418520:} ## end if using file
1753448418520:else ## for readLines to work, textConnection the string input
1753448418521:{ text <- textConnection(textIn) }
1753448418521:## initialize the variable to hold hyphenated end-of-liners
1753448418521:last <- ""
1753448418521:## initialize a vector to hold the counts
1753448418522:wordCount <- c("word" = 0)
1753448418522:##while(TRUE)
1753448418522:for (i in 1:1)
1753448418523:{
1753448418523:line <- readLines(text, n = 1)
1753448418523:## if the last line ended with a hyphenated word, paste it on da start
1753448418523:line <- paste0(last, line)
1753448418524:cat("\n")
1753448418524:cat("this is line:" , line)
1753448418524:## but how does it know there are no more lines? MAGIC
1753448418524:if (length(line) == 0) { break }
1753448418525:else
1753448418525:{
1753448418525:## lines of code where line is on line as line for line (wanna line?)
1753448418525:wash <- clean(line, keepHyphens, keepContractions)
1753448418526:## wtf
1753448418526:print(wash)
1753448418526:line <- wash[1]
1753448418527:words <- unlist(strsplit(line,"\\s+"))
1753448418527:if (wash[2])
1753448418527:{
1753448418528:## store the last word frag
1753448418528:last <- words[length(words)]
1753448418528:## reset the line to not hold that part
1753448418528:words <- words[-length(words)]
1753448418529:} ## partial word saved for next line
1753448418529:for (word in words) ## word
1753448418529:{
1753448418529:if(word %in% names(wordCount))
1753448418530:{ wordCount <- c(word, 1)}
1753448418530:else ## wordCount[word]++, no? 'course not
1753448418530:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448418530:}
1753448418530:} ## end not empty line
1753448418531:} ## end while reading lines
1753448418532:## close the file, if it was a file
1753448418532:if (textIn == "file") { close(text) }
1753448418532:print(wordCount)
1753448418533:return (wordCount)
1753448418533:} ## end readTheText
1753448418533:wordCnt <- analyze()
1753448421983:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448467320:cat("final vector", wordCount)
1753448473053:analyze <- function(textIn = "file",
1753448473055:keepHyphens = TRUE,
1753448473055:keepContractions = TRUE)
1753448473055:{
1753448473055:######################## start helper functions #############################
1753448473056:## pick the file if need be, pick your nose, too!
1753448473056:chooseFile <- function()
1753448473060:{
1753448473060:## choose file or use path?
1753448473060:path <- readline(prompt = "enter path or 'enter' to search")
1753448473060:if (path == "")
1753448473060:{ path <- file.choose() }
1753448473061:if(!file.exists(path))
1753448473061:{
1753448473063:print("try again! file not found 404 SOS")
1753448473063:## try again
1753448473063:chooseFile()
1753448473063:} ## end while invalid file path
1753448473064:## and spit it out
1753448473064:return (path)
1753448473064:}
1753448473064:## clean the line, keep or remove hyphens and contractions
1753448473064:clean <- function(line, hyphens, contractions)
1753448473065:{
1753448473065:cat("\n")
1753448473065:cat("into clean:", line)
1753448473065:cat("\n")
1753448473065:## does the line end in a hyphenated word? damn, work
1753448473066:partialWord <- FALSE
1753448473066:if (grepl("-$", line))
1753448473066:{ partialWord <- TRUE }
1753448473066:## no proper nouns allowed
1753448473066:line <- tolower(line)
1753448473067:## apropros keep hyphy chars
1753448473067:line <- gsub("[^a-z'-]", " ", line)
1753448473067:## okay WTF is going on here?
1753448473067:print("removed punctuation?")
1753448473068:print(line)
1753448473068:if (!contractions)
1753448473068:{ line <- gsub("'", " ", line) }
1753448473068:else
1753448473068:{
1753448473069:## it'll kill quotes and weird contractions ('bout)
1753448473069:line <- gsub("' ", " ", line)
1753448473069:line <- gsub(" '", " ", line)
1753448473069:}
1753448473069:if (!hyphens)
1753448473070:{ line <- gsub("-", " ", line) }
1753448473070:cat("out of clean:", line)
1753448473070:cat("\n\n")
1753448473071:return (c(line, partialWord))
1753448473071:}
1753448473071:######################### end helper functions ##############################
1753448473072:## finding a file or using a string input?
1753448473072:if(textIn == "file")
1753448473072:{
1753448473072:## pick the file and verify
1753448473073:path <- chooseFile()
1753448473073:## open the connection to the file
1753448473073:text <- file(path, open = "r")
1753448473074:} ## end if using file
1753448473074:else ## for readLines to work, textConnection the string input
1753448473074:{ text <- textConnection(textIn) }
1753448473074:## initialize the variable to hold hyphenated end-of-liners
1753448473074:last <- ""
1753448473075:## initialize a vector to hold the counts
1753448473075:wordCount <- c("word" = 0)
1753448473075:##while(TRUE)
1753448473076:for (i in 1:1)
1753448473076:{
1753448473076:line <- readLines(text, n = 1)
1753448473076:## if the last line ended with a hyphenated word, paste it on da start
1753448473076:line <- paste0(last, line)
1753448473077:cat("\n")
1753448473077:cat("this is line:" , line)
1753448473077:## but how does it know there are no more lines? MAGIC
1753448473078:if (length(line) == 0) { break }
1753448473078:else
1753448473078:{
1753448473078:## lines of code where line is on line as line for line (wanna line?)
1753448473079:wash <- clean(line, keepHyphens, keepContractions)
1753448473079:## wtf
1753448473079:print(wash)
1753448473080:line <- wash[1]
1753448473080:words <- unlist(strsplit(line,"\\s+"))
1753448473080:if (wash[2])
1753448473081:{
1753448473081:## store the last word frag
1753448473081:last <- words[length(words)]
1753448473081:## reset the line to not hold that part
1753448473082:words <- words[-length(words)]
1753448473082:} ## partial word saved for next line
1753448473083:for (word in words) ## word
1753448473083:{
1753448473083:if(word %in% names(wordCount))
1753448473084:{ wordCount <- c(word, 1)}
1753448473084:else ## wordCount[word]++, no? 'course not
1753448473084:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448473084:}
1753448473085:} ## end not empty line
1753448473086:} ## end while reading lines
1753448473086:## close the file, if it was a file
1753448473086:if (textIn == "file") { close(text) }
1753448473087:print(wordCount)
1753448473087:return (wordCount)
1753448473088:} ## end readTheText
1753448473089:wordCnt <- analyze()
1753448477703:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448510063:analyze <- function(textIn = "file",
1753448510063:keepHyphens = TRUE,
1753448510063:keepContractions = TRUE)
1753448510063:{
1753448510064:######################## start helper functions #############################
1753448510064:## pick the file if need be, pick your nose, too!
1753448510064:chooseFile <- function()
1753448510064:{
1753448510064:## choose file or use path?
1753448510064:path <- readline(prompt = "enter path or 'enter' to search")
1753448510065:if (path == "")
1753448510065:{ path <- file.choose() }
1753448510065:if(!file.exists(path))
1753448510065:{
1753448510065:print("try again! file not found 404 SOS")
1753448510065:## try again
1753448510066:chooseFile()
1753448510066:} ## end while invalid file path
1753448510066:## and spit it out
1753448510066:return (path)
1753448510066:}
1753448510067:## clean the line, keep or remove hyphens and contractions
1753448510067:clean <- function(line, hyphens, contractions)
1753448510067:{
1753448510067:cat("\n")
1753448510067:cat("into clean:", line)
1753448510067:cat("\n")
1753448510068:## does the line end in a hyphenated word? damn, work
1753448510068:partialWord <- FALSE
1753448510068:if (grepl("-$", line))
1753448510068:{ partialWord <- TRUE }
1753448510068:## no proper nouns allowed
1753448510068:line <- tolower(line)
1753448510069:## apropros keep hyphy chars
1753448510069:line <- gsub("[^a-z'-]", " ", line)
1753448510069:## okay WTF is going on here?
1753448510069:print("removed punctuation?")
1753448510069:print(line)
1753448510070:if (!contractions)
1753448510070:{ line <- gsub("'", " ", line) }
1753448510070:else
1753448510070:{
1753448510070:## it'll kill quotes and weird contractions ('bout)
1753448510071:line <- gsub("' ", " ", line)
1753448510071:line <- gsub(" '", " ", line)
1753448510071:}
1753448510071:if (!hyphens)
1753448510072:{ line <- gsub("-", " ", line) }
1753448510072:cat("out of clean:", line)
1753448510072:cat("\n\n")
1753448510073:return (c(line, partialWord))
1753448510073:}
1753448510073:######################### end helper functions ##############################
1753448510074:## finding a file or using a string input?
1753448510074:if(textIn == "file")
1753448510074:{
1753448510074:## pick the file and verify
1753448510074:path <- chooseFile()
1753448510075:## open the connection to the file
1753448510075:text <- file(path, open = "r")
1753448510075:} ## end if using file
1753448510076:else ## for readLines to work, textConnection the string input
1753448510076:{ text <- textConnection(textIn) }
1753448510076:## initialize the variable to hold hyphenated end-of-liners
1753448510077:last <- ""
1753448510077:## initialize a vector to hold the counts
1753448510077:wordCount <- c("word" = 0)
1753448510078:##while(TRUE)
1753448510078:for (i in 1:1)
1753448510078:{
1753448510078:line <- readLines(text, n = 1)
1753448510079:## if the last line ended with a hyphenated word, paste it on da start
1753448510079:line <- paste0(last, line)
1753448510079:cat("\n")
1753448510080:cat("this is line:" , line)
1753448510080:## but how does it know there are no more lines? MAGIC
1753448510080:if (length(line) == 0) { break }
1753448510080:else
1753448510081:{
1753448510081:## lines of code where line is on line as line for line (wanna line?)
1753448510081:wash <- clean(line, keepHyphens, keepContractions)
1753448510081:## wtf
1753448510082:print(wash)
1753448510082:line <- wash[1]
1753448510082:words <- unlist(strsplit(line,"\\s+"))
1753448510083:if (wash[2])
1753448510083:{
1753448510083:## store the last word frag
1753448510083:last <- words[length(words)]
1753448510083:## reset the line to not hold that part
1753448510083:words <- words[-length(words)]
1753448510084:} ## partial word saved for next line
1753448510084:for (word in words) ## word
1753448510084:{
1753448510085:if(word %in% names(wordCount))
1753448510085:{ wordCount <- c(word, 1)}
1753448510085:else ## wordCount[word]++, no? 'course not
1753448510085:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448510085:}
1753448510086:} ## end not empty line
1753448510086:} ## end while reading lines
1753448510086:## close the file, if it was a file
1753448510086:if (textIn == "file") { close(text) }
1753448510087:cat("\n\nfinal vector", wordCount, "\n\n")
1753448510087:return (wordCount)
1753448510087:} ## end readTheText
1753448510088:wordCnt <- analyze()
1753448514960:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448571223:analyze <- function(textIn = "file",
1753448571224:keepHyphens = TRUE,
1753448571224:keepContractions = TRUE)
1753448571224:{
1753448571224:######################## start helper functions #############################
1753448571224:## pick the file if need be, pick your nose, too!
1753448571224:chooseFile <- function()
1753448571224:{
1753448571224:## choose file or use path?
1753448571224:path <- readline(prompt = "enter path or 'enter' to search")
1753448571225:if (path == "")
1753448571225:{ path <- file.choose() }
1753448571225:if(!file.exists(path))
1753448571226:{
1753448571227:print("try again! file not found 404 SOS")
1753448571227:## try again
1753448571228:chooseFile()
1753448571228:} ## end while invalid file path
1753448571228:## and spit it out
1753448571228:return (path)
1753448571229:}
1753448571229:## clean the line, keep or remove hyphens and contractions
1753448571230:clean <- function(line, hyphens, contractions)
1753448571230:{
1753448571230:cat("\n")
1753448571230:cat("into clean:", line)
1753448571230:cat("\n")
1753448571231:## does the line end in a hyphenated word? damn, work
1753448571231:partialWord <- FALSE
1753448571231:if (grepl("-$", line))
1753448571231:{ partialWord <- TRUE }
1753448571231:## no proper nouns allowed
1753448571231:line <- tolower(line)
1753448571232:## apropros keep hyphy chars
1753448571232:line <- gsub("[^a-z'-]", " ", line)
1753448571232:## okay WTF is going on here?
1753448571232:print("removed punctuation?")
1753448571233:print(line)
1753448571233:if (!contractions)
1753448571233:{ line <- gsub("'", " ", line) }
1753448571233:else
1753448571233:{
1753448571234:## it'll kill quotes and weird contractions ('bout)
1753448571234:line <- gsub("' ", " ", line)
1753448571234:line <- gsub(" '", " ", line)
1753448571234:}
1753448571234:if (!hyphens)
1753448571234:{ line <- gsub("-", " ", line) }
1753448571235:cat("out of clean:", line)
1753448571235:cat("\n\n")
1753448571235:return (c(line, partialWord))
1753448571235:}
1753448571236:######################### end helper functions ##############################
1753448571236:## finding a file or using a string input?
1753448571236:if(textIn == "file")
1753448571236:{
1753448571236:## pick the file and verify
1753448571236:path <- chooseFile()
1753448571237:## open the connection to the file
1753448571237:text <- file(path, open = "r")
1753448571237:} ## end if using file
1753448571237:else ## for readLines to work, textConnection the string input
1753448571237:{ text <- textConnection(textIn) }
1753448571238:## initialize the variable to hold hyphenated end-of-liners
1753448571238:last <- ""
1753448571238:## initialize a vector to hold the counts
1753448571238:wordCount <- c("word" = 0)
1753448571239:##while(TRUE)
1753448571239:for (i in 1:1)
1753448571239:{
1753448571239:line <- readLines(text, n = 1)
1753448571239:## if the last line ended with a hyphenated word, paste it on da start
1753448571240:line <- paste0(last, line)
1753448571240:cat("\n")
1753448571240:cat("this is line:" , line)
1753448571240:## but how does it know there are no more lines? MAGIC
1753448571240:if (length(line) == 0) { break }
1753448571241:else
1753448571241:{
1753448571241:## lines of code where line is on line as line for line (wanna line?)
1753448571241:wash <- clean(line, keepHyphens, keepContractions)
1753448571241:## wtf
1753448571241:cat("wash returned:", wash)
1753448571242:line <- wash[1]
1753448571242:words <- unlist(strsplit(line,"\\s+"))
1753448571242:if (wash[2])
1753448571243:{
1753448571243:## store the last word frag
1753448571243:last <- words[length(words)]
1753448571243:## reset the line to not hold that part
1753448571243:words <- words[-length(words)]
1753448571244:} ## partial word saved for next line
1753448571244:for (word in words) ## word
1753448571244:{
1753448571244:if(word %in% names(wordCount))
1753448571244:{ wordCount <- c(word, 1)}
1753448571245:else ## wordCount[word]++, no? 'course not
1753448571245:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448571245:}
1753448571245:} ## end not empty line
1753448571246:} ## end while reading lines
1753448571246:## close the file, if it was a file
1753448571246:if (textIn == "file") { close(text) }
1753448571247:cat("\n\nfinal vector", wordCount, "\n\n")
1753448571247:return (wordCount)
1753448571248:} ## end readTheText
1753448571248:wordCnt <- analyze()
1753448574450:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448631929:analyze <- function(textIn = "file",
1753448631929:keepHyphens = TRUE,
1753448631930:keepContractions = TRUE)
1753448631930:{
1753448631930:######################## start helper functions #############################
1753448631930:## pick the file if need be, pick your nose, too!
1753448631930:chooseFile <- function()
1753448631930:{
1753448631931:## choose file or use path?
1753448631931:path <- readline(prompt = "enter path or 'enter' to search")
1753448631931:if (path == "")
1753448631931:{ path <- file.choose() }
1753448631932:if(!file.exists(path))
1753448631932:{
1753448631932:print("try again! file not found 404 SOS")
1753448631932:## try again
1753448631932:chooseFile()
1753448631932:} ## end while invalid file path
1753448631933:## and spit it out
1753448631933:return (path)
1753448631933:}
1753448631933:## clean the line, keep or remove hyphens and contractions
1753448631933:clean <- function(line, hyphens, contractions)
1753448631934:{
1753448631934:cat("\n")
1753448631934:cat("into clean:", line)
1753448631934:cat("\n")
1753448631935:## does the line end in a hyphenated word? damn, work
1753448631935:partialWord <- FALSE
1753448631935:if (grepl("-$", line))
1753448631935:{ partialWord <- TRUE }
1753448631936:## no proper nouns allowed
1753448631936:line <- tolower(line)
1753448631936:## apropros keep hyphy chars
1753448631936:line <- gsub("[^a-z'-]", " ", line)
1753448631936:## okay WTF is going on here?
1753448631937:print("removed punctuation?")
1753448631937:print(line)
1753448631937:if (!contractions)
1753448631937:{ line <- gsub("'", " ", line) }
1753448631937:else
1753448631938:{
1753448631938:## it'll kill quotes and weird contractions ('bout)
1753448631938:line <- gsub("' ", " ", line)
1753448631938:line <- gsub(" '", " ", line)
1753448631939:}
1753448631939:if (!hyphens)
1753448631939:{ line <- gsub("-", " ", line) }
1753448631939:cat("out of clean:", line)
1753448631939:cat("\n\n")
1753448631940:return (c(line, partialWord))
1753448631940:}
1753448631940:######################### end helper functions ##############################
1753448631940:## finding a file or using a string input?
1753448631941:if(textIn == "file")
1753448631941:{
1753448631941:## pick the file and verify
1753448631941:path <- chooseFile()
1753448631941:## open the connection to the file
1753448631941:text <- file(path, open = "r")
1753448631942:} ## end if using file
1753448631942:else ## for readLines to work, textConnection the string input
1753448631942:{ text <- textConnection(textIn) }
1753448631942:## initialize the variable to hold hyphenated end-of-liners
1753448631942:last <- ""
1753448631943:## initialize a vector to hold the counts
1753448631943:wordCount <- c("word" = 0)
1753448631943:##while(TRUE)
1753448631943:for (i in 1:1)
1753448631943:{
1753448631943:line <- readLines(text, n = 1)
1753448631944:## if the last line ended with a hyphenated word, paste it on da start
1753448631944:line <- paste0(last, line)
1753448631944:cat("\n")
1753448631944:cat("this is line:" , line)
1753448631945:## but how does it know there are no more lines? MAGIC
1753448631945:if (length(line) == 0) { break }
1753448631945:else
1753448631945:{
1753448631945:## lines of code where line is on line as line for line (wanna line?)
1753448631945:wash <- clean(line, keepHyphens, keepContractions)
1753448631946:## wtf
1753448631946:cat("wash[1]:", wash[1])
1753448631946:cat("\nwash[2]:", wash[2])
1753448631946:line <- wash[1]
1753448631946:words <- unlist(strsplit(line,"\\s+"))
1753448631947:if (wash[2])
1753448631947:{
1753448631947:## store the last word frag
1753448631947:last <- words[length(words)]
1753448631947:## reset the line to not hold that part
1753448631948:words <- words[-length(words)]
1753448631948:} ## partial word saved for next line
1753448631948:for (word in words) ## word
1753448631949:{
1753448631949:if(word %in% names(wordCount))
1753448631949:{ wordCount <- c(word, 1)}
1753448631949:else ## wordCount[word]++, no? 'course not
1753448631949:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448631949:}
1753448631950:} ## end not empty line
1753448631950:} ## end while reading lines
1753448631950:## close the file, if it was a file
1753448631951:if (textIn == "file") { close(text) }
1753448631951:cat("\n\nfinal vector", wordCount, "\n\n")
1753448631952:return (wordCount)
1753448631952:} ## end readTheText
1753448631952:wordCnt <- analyze()
1753448636058:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448706858:analyze <- function(textIn = "file",
1753448706858:keepHyphens = TRUE,
1753448706858:keepContractions = TRUE)
1753448706858:{
1753448706858:######################## start helper functions #############################
1753448706858:## pick the file if need be, pick your nose, too!
1753448706858:chooseFile <- function()
1753448706858:{
1753448706859:## choose file or use path?
1753448706859:path <- readline(prompt = "enter path or 'enter' to search")
1753448706859:if (path == "")
1753448706859:{ path <- file.choose() }
1753448706859:if(!file.exists(path))
1753448706859:{
1753448706859:print("try again! file not found 404 SOS")
1753448706860:## try again
1753448706860:chooseFile()
1753448706860:} ## end while invalid file path
1753448706860:## and spit it out
1753448706860:return (path)
1753448706860:}
1753448706860:## clean the line, keep or remove hyphens and contractions
1753448706861:clean <- function(line, hyphens, contractions)
1753448706861:{
1753448706861:cat("\n")
1753448706861:cat("into clean:", line)
1753448706861:cat("\n")
1753448706861:## does the line end in a hyphenated word? damn, work
1753448706861:partialWord <- FALSE
1753448706862:if (grepl("-$", line))
1753448706862:{ partialWord <- TRUE }
1753448706862:## no proper nouns allowed
1753448706862:line <- tolower(line)
1753448706862:## apropros keep hyphy chars
1753448706862:line <- gsub("[^a-z'-]", " ", line)
1753448706863:## okay WTF is going on here?
1753448706863:print("removed punctuation?")
1753448706863:print(line)
1753448706863:if (!contractions)
1753448706863:{ line <- gsub("'", " ", line) }
1753448706864:else
1753448706864:{
1753448706864:## it'll kill quotes and weird contractions ('bout)
1753448706864:line <- gsub("' ", " ", line)
1753448706864:line <- gsub(" '", " ", line)
1753448706864:}
1753448706864:if (!hyphens)
1753448706865:{ line <- gsub("-", " ", line) }
1753448706865:cat("out of clean:", line)
1753448706865:cat("\n\n")
1753448706866:return (c(line, partialWord))
1753448706866:}
1753448706866:######################### end helper functions ##############################
1753448706867:## finding a file or using a string input?
1753448706867:if(textIn == "file")
1753448706867:{
1753448706867:## pick the file and verify
1753448706867:path <- chooseFile()
1753448706868:## open the connection to the file
1753448706868:text <- file(path, open = "r")
1753448706868:} ## end if using file
1753448706868:else ## for readLines to work, textConnection the string input
1753448706868:{ text <- textConnection(textIn) }
1753448706869:## initialize the variable to hold hyphenated end-of-liners
1753448706869:last <- ""
1753448706869:## initialize a vector to hold the counts
1753448706869:wordCount <- c("word" = 0)
1753448706870:##while(TRUE)
1753448706870:for (i in 1:1)
1753448706870:{
1753448706871:line <- readLines(text, n = 1)
1753448706871:## if the last line ended with a hyphenated word, paste it on da start
1753448706871:line <- paste0(last, line)
1753448706872:cat("\n")
1753448706872:cat("this is line:" , line)
1753448706872:## but how does it know there are no more lines? MAGIC
1753448706873:if (length(line) == 0) { break }
1753448706873:else
1753448706873:{
1753448706874:## lines of code where line is on line as line for line (wanna line?)
1753448706874:wash <- clean(line, keepHyphens, keepContractions)
1753448706874:## wtf
1753448706874:cat("wash[1]:", wash[1])
1753448706875:cat("\nwash[2]:", wash[2])
1753448706875:line <- wash[1]
1753448706876:words <- unlist(strsplit(line,"\\s+"))
1753448706876:if (wash[2])
1753448706876:{
1753448706876:## store the last word frag
1753448706877:last <- words[length(words)]
1753448706877:## reset the line to not hold that part
1753448706877:words <- words[-length(words)]
1753448706878:} ## partial word saved for next line
1753448706878:for (word in words) ## word
1753448706879:{
1753448706879:if(word %in% names(wordCount))
1753448706879:{ wordCount <- c(word, 1)}
1753448706879:else ## wordCount[word]++, no? 'course not
1753448706880:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448706880:print("\nadded word\n")
1753448706880:}
1753448706881:} ## end not empty line
1753448706882:} ## end while reading lines
1753448706882:## close the file, if it was a file
1753448706882:if (textIn == "file") { close(text) }
1753448706883:cat("\n\nfinal vector", wordCount, "\n\n")
1753448706884:return (wordCount)
1753448706885:} ## end readTheText
1753448706885:wordCnt <- analyze()
1753448710527:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448889067:analyze <- function(textIn = "file",
1753448889067:keepHyphens = TRUE,
1753448889067:keepContractions = TRUE)
1753448889067:{
1753448889067:######################## start helper functions #############################
1753448889068:## pick the file if need be, pick your nose, too!
1753448889068:chooseFile <- function()
1753448889068:{
1753448889068:## choose file or use path?
1753448889068:path <- readline(prompt = "enter path or 'enter' to search")
1753448889069:if (path == "")
1753448889069:{ path <- file.choose() }
1753448889069:if(!file.exists(path))
1753448889069:{
1753448889070:print("try again! file not found 404 SOS")
1753448889070:## try again
1753448889070:chooseFile()
1753448889070:} ## end while invalid file path
1753448889070:## and spit it out
1753448889071:return (path)
1753448889071:}
1753448889071:## clean the line, keep or remove hyphens and contractions
1753448889072:clean <- function(line, hyphens, contractions)
1753448889072:{
1753448889072:## super annoying
1753448889072:cat("\n")
1753448889072:cat("into clean:", line)
1753448889072:cat("\n")
1753448889073:## does the line end in a hyphenated word? damn, work
1753448889073:partialWord <- FALSE
1753448889073:if (grepl("-$", line))
1753448889073:{ partialWord <- TRUE }
1753448889073:## no proper nouns allowed
1753448889073:line <- tolower(line)
1753448889074:## apropros keep hyphy chars
1753448889074:line <- gsub("[^a-z'-]", " ", line)
1753448889074:## okay WTF is going on here?
1753448889074:print("removed punctuation?")
1753448889074:print(line)
1753448889074:if (!contractions)
1753448889074:{ line <- gsub("'", " ", line) }
1753448889075:else
1753448889075:{
1753448889075:## it'll kill quotes and weird contractions ('bout)
1753448889075:line <- gsub("' ", " ", line)
1753448889075:line <- gsub(" '", " ", line)
1753448889075:}
1753448889075:if (!hyphens)
1753448889076:{ line <- gsub("-", " ", line) }
1753448889076:## this is annoying
1753448889076:cat("out of clean:", line)
1753448889076:cat("\n\n")
1753448889076:return (c(line, partialWord))
1753448889076:}
1753448889077:######################### end helper functions ##############################
1753448889077:## finding a file or using a string input?
1753448889077:if(textIn == "file")
1753448889077:{
1753448889078:## pick the file and verify
1753448889078:path <- chooseFile()
1753448889078:## open the connection to the file
1753448889078:text <- file(path, open = "r")
1753448889078:} ## end if using file
1753448889078:else ## for readLines to work, textConnection the string input
1753448889079:{ text <- textConnection(textIn) }
1753448889079:## initialize the variable to hold hyphenated end-of-liners
1753448889079:last <- ""
1753448889079:## initialize a vector to hold the counts
1753448889079:wordCount <- c("word" = 0)
1753448889080:##while(TRUE)
1753448889080:for (i in 1:1)
1753448889080:{
1753448889080:line <- readLines(text, n = 1)
1753448889081:## if the last line ended with a hyphenated word, paste it on da start
1753448889081:line <- paste0(last, line)
1753448889081:cat("\n")
1753448889081:cat("this is line:" , line)
1753448889081:## but how does it know there are no more lines? MAGIC
1753448889082:if (length(line) == 0) { break }
1753448889082:else
1753448889082:{
1753448889082:## lines of code where line is on line as line for line (wanna line?)
1753448889082:wash <- clean(line, keepHyphens, keepContractions)
1753448889083:## wtf
1753448889083:cat("wash[1]:", wash[1])
1753448889083:cat("\nwash[2]:", wash[2])
1753448889083:line <- wash[1]
1753448889083:words <- unlist(strsplit(line,"\\s+"))
1753448889084:if (wash[2])
1753448889084:{
1753448889084:## store the last word frag
1753448889084:last <- words[length(words)]
1753448889084:## reset the line to not hold that part
1753448889085:words <- words[-length(words)]
1753448889085:} ## partial word saved for next line
1753448889085:for (word in words) ## word
1753448889086:{
1753448889086:if(word %in% names(wordCount))
1753448889086:{ wordCount[word] <- c(word, 1)}
1753448889086:else ## wordCount[word]++, no? 'course not
1753448889086:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753448889087:## print("added word")
1753448889087:}
1753448889087:} ## end not empty line
1753448889088:} ## end while reading lines
1753448889088:## close the file, if it was a file
1753448889088:if (textIn == "file") { close(text) }
1753448889089:## ....
1753448889089:cat("\n\nfinal vector", wordCount, "\n\n")
1753448889089:return (wordCount)
1753448889090:} ## end readTheText
1753448889090:wordCnt <- analyze()
1753448893119:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753448903269:wordCnt
1753449030100:analyze <- function(textIn = "file",
1753449030101:keepHyphens = TRUE,
1753449030101:keepContractions = TRUE)
1753449030101:{
1753449030101:######################## start helper functions #############################
1753449030101:## pick the file if need be, pick your nose, too!
1753449030101:chooseFile <- function()
1753449030101:{
1753449030101:## choose file or use path?
1753449030101:path <- readline(prompt = "enter path or 'enter' to search")
1753449030102:if (path == "")
1753449030102:{ path <- file.choose() }
1753449030102:if(!file.exists(path))
1753449030103:{
1753449030103:print("try again! file not found 404 SOS")
1753449030103:## try again
1753449030103:chooseFile()
1753449030103:} ## end while invalid file path
1753449030104:## and spit it out
1753449030104:return (path)
1753449030104:}
1753449030105:## clean the line, keep or remove hyphens and contractions
1753449030105:clean <- function(line, hyphens, contractions)
1753449030105:{
1753449030105:## super annoying
1753449030105:cat("\n")
1753449030106:cat("into clean:", line)
1753449030106:cat("\n")
1753449030106:## does the line end in a hyphenated word? damn, work
1753449030107:partialWord <- FALSE
1753449030107:if (grepl("-$", line))
1753449030107:{ partialWord <- TRUE }
1753449030108:## no proper nouns allowed
1753449030108:line <- tolower(line)
1753449030109:## apropros keep hyphy chars
1753449030109:line <- gsub("[^a-z'-]", " ", line)
1753449030109:## okay WTF is going on here?
1753449030109:print("removed punctuation?")
1753449030110:print(line)
1753449030110:if (!contractions)
1753449030110:{ line <- gsub("'", " ", line) }
1753449030110:else
1753449030110:{
1753449030110:## it'll kill quotes and weird contractions ('bout)
1753449030110:line <- gsub("' ", " ", line)
1753449030111:line <- gsub(" '", " ", line)
1753449030111:}
1753449030111:if (!hyphens)
1753449030111:{ line <- gsub("-", " ", line) }
1753449030111:## this is annoying
1753449030111:cat("out of clean:", line)
1753449030111:cat("\n\n")
1753449030112:return (c(line, partialWord))
1753449030112:}
1753449030112:######################### end helper functions ##############################
1753449030113:## finding a file or using a string input?
1753449030113:if(textIn == "file")
1753449030113:{
1753449030113:## pick the file and verify
1753449030113:path <- chooseFile()
1753449030113:## open the connection to the file
1753449030114:text <- file(path, open = "r")
1753449030114:} ## end if using file
1753449030114:else ## for readLines to work, textConnection the string input
1753449030114:{ text <- textConnection(textIn) }
1753449030114:## initialize the variable to hold hyphenated end-of-liners
1753449030115:last <- ""
1753449030115:## initialize a vector to hold the counts
1753449030115:wordCount <- c("word" = 0)
1753449030115:##while(TRUE)
1753449030115:for (i in 1:1)
1753449030116:{
1753449030116:line <- readLines(text, n = 1)
1753449030116:## if the last line ended with a hyphenated word, paste it on da start
1753449030116:line <- paste0(last, line)
1753449030116:cat("\n")
1753449030117:cat("this is line:" , line)
1753449030117:## but how does it know there are no more lines? MAGIC
1753449030117:if (length(line) == 0) { break }
1753449030117:else
1753449030117:{
1753449030117:## lines of code where line is on line as line for line (wanna line?)
1753449030118:wash <- clean(line, keepHyphens, keepContractions)
1753449030118:## wtf
1753449030118:cat("wash[1]:", wash[1])
1753449030118:cat("\nwash[2]:", wash[2])
1753449030119:line <- wash[1]
1753449030119:words <- unlist(strsplit(line,"\\s+"))
1753449030119:if (wash[2])
1753449030119:{
1753449030120:## store the last word frag
1753449030120:last <- words[length(words)]
1753449030120:## reset the line to not hold that part
1753449030120:words <- words[-length(words)]
1753449030120:} ## partial word saved for next line
1753449030121:for (word in words) ## word
1753449030121:{
1753449030121:if(word %in% names(wordCount))
1753449030121:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449030122:else ## wordCount[word]++, no? 'course not
1753449030122:{ wordCount[word] <- 1}
1753449030122:## print("added word")
1753449030122:}
1753449030123:} ## end not empty line
1753449030123:} ## end while reading lines
1753449030123:## close the file, if it was a file
1753449030124:if (textIn == "file") { close(text) }
1753449030124:## ....
1753449030124:cat("\n\nfinal vector", wordCount, "\n\n")
1753449030125:return (wordCount)
1753449030125:} ## end readTheText
1753449030125:wordCnt <- analyze()
1753449034247:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753449043872:wordCnt
1753449066717:analyze <- function(textIn = "file",
1753449066717:keepHyphens = TRUE,
1753449066717:keepContractions = TRUE)
1753449066717:{
1753449066718:######################## start helper functions #############################
1753449066718:## pick the file if need be, pick your nose, too!
1753449066718:chooseFile <- function()
1753449066718:{
1753449066718:## choose file or use path?
1753449066718:path <- readline(prompt = "enter path or 'enter' to search")
1753449066718:if (path == "")
1753449066718:{ path <- file.choose() }
1753449066718:if(!file.exists(path))
1753449066719:{
1753449066719:print("try again! file not found 404 SOS")
1753449066719:## try again
1753449066719:chooseFile()
1753449066719:} ## end while invalid file path
1753449066720:## and spit it out
1753449066720:return (path)
1753449066720:}
1753449066721:## clean the line, keep or remove hyphens and contractions
1753449066721:clean <- function(line, hyphens, contractions)
1753449066721:{
1753449066721:## super annoying
1753449066721:cat("\n")
1753449066721:cat("into clean:", line)
1753449066721:cat("\n")
1753449066722:## does the line end in a hyphenated word? damn, work
1753449066722:partialWord <- FALSE
1753449066722:if (grepl("-$", line))
1753449066723:{ partialWord <- TRUE }
1753449066723:## no proper nouns allowed
1753449066723:line <- tolower(line)
1753449066723:## apropros keep hyphy chars
1753449066723:line <- gsub("[^a-z'-]", " ", line)
1753449066723:## okay WTF is going on here?
1753449066723:print("removed punctuation?")
1753449066724:print(line)
1753449066724:if (!contractions)
1753449066724:{ line <- gsub("'", " ", line) }
1753449066724:else
1753449066724:{
1753449066724:## it'll kill quotes and weird contractions ('bout)
1753449066724:line <- gsub("' ", " ", line)
1753449066725:line <- gsub(" '", " ", line)
1753449066725:}
1753449066725:if (!hyphens)
1753449066725:{ line <- gsub("-", " ", line) }
1753449066725:## this is annoying
1753449066725:cat("out of clean:", line)
1753449066725:cat("\n\n")
1753449066726:return (c(line, partialWord))
1753449066726:}
1753449066726:######################### end helper functions ##############################
1753449066727:## finding a file or using a string input?
1753449066727:if(textIn == "file")
1753449066727:{
1753449066727:## pick the file and verify
1753449066727:path <- chooseFile()
1753449066727:## open the connection to the file
1753449066727:text <- file(path, open = "r")
1753449066728:} ## end if using file
1753449066728:else ## for readLines to work, textConnection the string input
1753449066728:{ text <- textConnection(textIn) }
1753449066728:## initialize the variable to hold hyphenated end-of-liners
1753449066729:last <- ""
1753449066729:## initialize a vector to hold the counts
1753449066729:wordCount <- c()
1753449066729:##while(TRUE)
1753449066729:for (i in 1:1)
1753449066729:{
1753449066730:line <- readLines(text, n = 1)
1753449066730:## if the last line ended with a hyphenated word, paste it on da start
1753449066730:line <- paste0(last, line)
1753449066730:cat("\n")
1753449066730:cat("this is line:" , line)
1753449066731:## but how does it know there are no more lines? MAGIC
1753449066731:if (length(line) == 0) { break }
1753449066731:else
1753449066731:{
1753449066731:## lines of code where line is on line as line for line (wanna line?)
1753449066732:wash <- clean(line, keepHyphens, keepContractions)
1753449066732:## wtf
1753449066732:cat("wash[1]:", wash[1])
1753449066732:cat("\nwash[2]:", wash[2])
1753449066732:line <- wash[1]
1753449066733:words <- unlist(strsplit(line,"\\s+"))
1753449066733:if (wash[2])
1753449066733:{
1753449066733:## store the last word frag
1753449066734:last <- words[length(words)]
1753449066734:## reset the line to not hold that part
1753449066734:words <- words[-length(words)]
1753449066734:} ## partial word saved for next line
1753449066735:for (word in words) ## word
1753449066735:{
1753449066735:if(word %in% names(wordCount))
1753449066735:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449066735:else ## wordCount[word]++, no? 'course not
1753449066736:{ wordCount[word] <- 1}
1753449066736:## print("added word")
1753449066736:}
1753449066737:} ## end not empty line
1753449066737:} ## end while reading lines
1753449066737:## close the file, if it was a file
1753449066737:if (textIn == "file") { close(text) }
1753449066738:## ....
1753449066738:cat("\n\nfinal vector", wordCount, "\n\n")
1753449066738:return (wordCount)
1753449066739:} ## end readTheText
1753449066739:wordCnt <- analyze()
1753449070696:####### final thoughts, c(word, 1) 1 != integer. fix that?
1753449076840:wordCnt
1753449357426:library(devtools)
1753449436637:analyze("this-is somethin' 'bout me isn't it? nothin-t- see-here")
1753449474373:analyze <- function(textIn = "file",
1753449474373:keepHyphens = TRUE,
1753449474373:keepContractions = TRUE)
1753449474373:{
1753449474374:######################## start helper functions #############################
1753449474374:## pick the file if need be, pick your nose, too!
1753449474374:chooseFile <- function()
1753449474374:{
1753449474374:## choose file or use path?
1753449474374:path <- readline(prompt = "enter path or 'enter' to search")
1753449474374:if (path == "")
1753449474374:{ path <- file.choose() }
1753449474375:if(!file.exists(path))
1753449474375:{
1753449474375:print("try again! file not found 404 SOS")
1753449474376:## try again
1753449474376:chooseFile()
1753449474376:} ## end while invalid file path
1753449474377:## and spit it out
1753449474377:return (path)
1753449474377:}
1753449474377:## clean the line, keep or remove hyphens and contractions
1753449474377:clean <- function(line, hyphens, contractions)
1753449474378:{
1753449474378:## super annoying
1753449474378:#cat("\n")
1753449474378:#cat("into clean:", line)
1753449474378:#cat("\n")
1753449474378:## does the line end in a hyphenated word? damn, work
1753449474378:partialWord <- FALSE
1753449474379:if (grepl("-$", line))
1753449474379:{ partialWord <- TRUE }
1753449474379:## no proper nouns allowed
1753449474379:line <- tolower(line)
1753449474380:## apropros keep hyphy chars
1753449474380:line <- gsub("[^a-z'-]", " ", line)
1753449474380:## okay WTF is going on here?
1753449474380:#print("removed punctuation?")
1753449474380:#print(line)
1753449474380:if (!contractions)
1753449474381:{ line <- gsub("'", " ", line) }
1753449474381:else
1753449474381:{
1753449474381:## it'll kill quotes and weird contractions ('bout)
1753449474381:line <- gsub("' ", " ", line)
1753449474382:line <- gsub(" '", " ", line)
1753449474382:}
1753449474382:if (!hyphens)
1753449474382:{ line <- gsub("-", " ", line) }
1753449474383:## this is annoying
1753449474383:#cat("out of clean:", line)
1753449474383:#cat("\n\n")
1753449474383:return (c(line, partialWord))
1753449474383:}
1753449474384:######################### end helper functions ##############################
1753449474384:## finding a file or using a string input?
1753449474385:if(textIn == "file")
1753449474385:{
1753449474385:## pick the file and verify
1753449474385:path <- chooseFile()
1753449474385:## open the connection to the file
1753449474386:text <- file(path, open = "r")
1753449474386:} ## end if using file
1753449474386:else ## for readLines to work, textConnection the string input
1753449474387:{ text <- textConnection(textIn) }
1753449474387:## initialize the variable to hold hyphenated end-of-liners
1753449474387:last <- ""
1753449474387:## initialize a vector to hold the counts
1753449474388:wordCount <- c()
1753449474388:##while(TRUE)
1753449474388:for (i in 1:1)
1753449474389:{
1753449474389:line <- readLines(text, n = 1)
1753449474389:## if the last line ended with a hyphenated word, paste it on da start
1753449474389:line <- paste0(last, line)
1753449474390:cat("\n")
1753449474390:cat("this is line:" , line)
1753449474391:## but how does it know there are no more lines? MAGIC
1753449474391:if (length(line) == 0) { break }
1753449474391:else
1753449474391:{
1753449474391:## lines of code where line is on line as line for line (wanna line?)
1753449474392:wash <- clean(line, keepHyphens, keepContractions)
1753449474392:## wtf
1753449474392:#cat("wash[1]:", wash[1])
1753449474393:#cat("\nwash[2]:", wash[2])
1753449474393:line <- wash[1]
1753449474393:words <- unlist(strsplit(line,"\\s+"))
1753449474394:if (wash[2])
1753449474394:{
1753449474394:## store the last word frag
1753449474395:last <- words[length(words)]
1753449474395:## reset the line to not hold that part
1753449474395:words <- words[-length(words)]
1753449474395:} ## partial word saved for next line
1753449474396:for (word in words) ## word
1753449474396:{
1753449474396:if(word %in% names(wordCount))
1753449474397:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449474397:else ## wordCount[word]++, no? 'course not
1753449474397:{ wordCount[word] <- 1}
1753449474398:## print("added word")
1753449474398:}
1753449474399:} ## end not empty line
1753449474399:} ## end while reading lines
1753449474400:## close the file, if it was a file
1753449474400:#if (textIn == "file") { close(text) }
1753449474400:close(text)
1753449474400:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753449474400:## cat("\n\nfinal vector", wordCount, "\n\n")
1753449474401:return (wordCount)
1753449474401:} ## end readTheText
1753449478292:analyze("this-is somethin' 'bout me isn't it? nothin-t- see-here")
1753449603101:wordCnt
1753449622824:new.word <- analyze("this-is somethin' 'bout me isn't it? nothin-t- see-here")
1753449626246:new.word
1753449692611:analyze <- function(textIn = "file",
1753449692611:keepHyphens = TRUE,
1753449692611:keepContractions = TRUE)
1753449692611:{
1753449692611:######################## start helper functions #############################
1753449692611:## pick the file if need be, pick your nose, too!
1753449692612:chooseFile <- function()
1753449692612:{
1753449692612:## choose file or use path?
1753449692612:path <- readline(prompt = "enter path or 'enter' to search")
1753449692612:if (path == "")
1753449692613:{ path <- file.choose() }
1753449692613:if(!file.exists(path))
1753449692613:{
1753449692613:print("try again! file not found 404 SOS")
1753449692613:## try again
1753449692614:chooseFile()
1753449692614:} ## end while invalid file path
1753449692614:## and spit it out
1753449692614:return (path)
1753449692614:}
1753449692615:## clean the line, keep or remove hyphens and contractions
1753449692615:clean <- function(line, hyphens, contractions)
1753449692615:{
1753449692615:## super annoying
1753449692615:#cat("\n")
1753449692615:#cat("into clean:", line)
1753449692615:#cat("\n")
1753449692616:## does the line end in a hyphenated word? damn, work
1753449692616:partialWord <- FALSE
1753449692616:if (grepl("-$", line))
1753449692616:{ partialWord <- TRUE }
1753449692616:## no proper nouns allowed
1753449692616:line <- tolower(line)
1753449692617:## apropros keep hyphy chars
1753449692617:line <- gsub("[^a-z'-]", " ", line)
1753449692617:## okay WTF is going on here?
1753449692617:#print("removed punctuation?")
1753449692617:#print(line)
1753449692618:if (!contractions)
1753449692618:{ line <- gsub("'", " ", line) }
1753449692618:else
1753449692618:{
1753449692618:## it'll kill quotes and weird contractions ('bout)
1753449692618:line <- gsub("' ", " ", line)
1753449692619:line <- gsub(" '", " ", line)
1753449692619:}
1753449692619:if (!hyphens)
1753449692619:{ line <- gsub("-", " ", line) }
1753449692620:## this is annoying
1753449692620:#cat("out of clean:", line)
1753449692620:#cat("\n\n")
1753449692620:return (c(line, partialWord))
1753449692620:}
1753449692621:######################### end helper functions ##############################
1753449692621:## finding a file or using a string input?
1753449692621:if(textIn == "file")
1753449692621:{
1753449692621:## pick the file and verify
1753449692621:path <- chooseFile()
1753449692622:## open the connection to the file
1753449692622:text <- file(path, open = "r")
1753449692622:} ## end if using file
1753449692622:else ## for readLines to work, textConnection the string input
1753449692622:{ text <- textConnection(textIn) }
1753449692623:## initialize the variable to hold hyphenated end-of-liners
1753449692623:last <- ""
1753449692623:## initialize a vector to hold the counts
1753449692623:wordCount <- c()
1753449692623:##while(TRUE)
1753449692624:for (i in 1:10)
1753449692624:{
1753449692624:line <- readLines(text, n = 1)
1753449692624:## if the last line ended with a hyphenated word, paste it on da start
1753449692624:line <- paste0(last, line)
1753449692625:##
1753449692625:#cat("\n")
1753449692625:#cat("this is line:" , line)
1753449692625:## but how does it know there are no more lines? MAGIC
1753449692625:if (length(line) == 0) { break }
1753449692625:else
1753449692626:{
1753449692626:## lines of code where line is on line as line for line (wanna line?)
1753449692626:wash <- clean(line, keepHyphens, keepContractions)
1753449692626:## wtf
1753449692626:#cat("wash[1]:", wash[1])
1753449692626:#cat("\nwash[2]:", wash[2])
1753449692627:line <- wash[1]
1753449692627:words <- unlist(strsplit(line,"\\s+"))
1753449692627:if (wash[2])
1753449692628:{
1753449692628:## store the last word frag
1753449692628:last <- words[length(words)]
1753449692628:## reset the line to not hold that part
1753449692628:words <- words[-length(words)]
1753449692628:} ## partial word saved for next line
1753449692629:for (word in words) ## word
1753449692629:{
1753449692629:if(word %in% names(wordCount))
1753449692629:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449692630:else ## wordCount[word]++, no? 'course not
1753449692630:{ wordCount[word] <- 1}
1753449692630:## print("added word")
1753449692630:}
1753449692631:} ## end not empty line
1753449692631:} ## end while reading lines
1753449692631:## close the file, if it was a file
1753449692631:#if (textIn == "file") { close(text) }
1753449692632:close(text)
1753449692632:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753449692632:## cat("\n\nfinal vector", wordCount, "\n\n")
1753449692633:return (wordCount)
1753449692633:} ## end readTheText
1753449698606:analyze <- function(textIn = "file",
1753449698606:keepHyphens = TRUE,
1753449698606:keepContractions = TRUE)
1753449698606:{
1753449698607:######################## start helper functions #############################
1753449698607:## pick the file if need be, pick your nose, too!
1753449698607:chooseFile <- function()
1753449698607:{
1753449698607:## choose file or use path?
1753449698607:path <- readline(prompt = "enter path or 'enter' to search")
1753449698608:if (path == "")
1753449698608:{ path <- file.choose() }
1753449698608:if(!file.exists(path))
1753449698608:{
1753449698608:print("try again! file not found 404 SOS")
1753449698609:## try again
1753449698609:chooseFile()
1753449698609:} ## end while invalid file path
1753449698610:## and spit it out
1753449698610:return (path)
1753449698610:}
1753449698610:## clean the line, keep or remove hyphens and contractions
1753449698610:clean <- function(line, hyphens, contractions)
1753449698610:{
1753449698610:## super annoying
1753449698611:#cat("\n")
1753449698611:#cat("into clean:", line)
1753449698611:#cat("\n")
1753449698612:## does the line end in a hyphenated word? damn, work
1753449698612:partialWord <- FALSE
1753449698612:if (grepl("-$", line))
1753449698613:{ partialWord <- TRUE }
1753449698613:## no proper nouns allowed
1753449698614:line <- tolower(line)
1753449698614:## apropros keep hyphy chars
1753449698614:line <- gsub("[^a-z'-]", " ", line)
1753449698615:## okay WTF is going on here?
1753449698615:#print("removed punctuation?")
1753449698615:#print(line)
1753449698616:if (!contractions)
1753449698616:{ line <- gsub("'", " ", line) }
1753449698616:else
1753449698616:{
1753449698616:## it'll kill quotes and weird contractions ('bout)
1753449698616:line <- gsub("' ", " ", line)
1753449698616:line <- gsub(" '", " ", line)
1753449698616:}
1753449698617:if (!hyphens)
1753449698617:{ line <- gsub("-", " ", line) }
1753449698617:## this is annoying
1753449698617:#cat("out of clean:", line)
1753449698617:#cat("\n\n")
1753449698618:return (c(line, partialWord))
1753449698618:}
1753449698618:######################### end helper functions ##############################
1753449698618:## finding a file or using a string input?
1753449698618:if(textIn == "file")
1753449698618:{
1753449698619:## pick the file and verify
1753449698619:path <- chooseFile()
1753449698619:## open the connection to the file
1753449698619:text <- file(path, open = "r")
1753449698619:} ## end if using file
1753449698620:else ## for readLines to work, textConnection the string input
1753449698620:{ text <- textConnection(textIn) }
1753449698620:## initialize the variable to hold hyphenated end-of-liners
1753449698620:last <- ""
1753449698620:## initialize a vector to hold the counts
1753449698620:wordCount <- c()
1753449698621:##while(TRUE)
1753449698621:for (i in 1:10)
1753449698621:{
1753449698621:line <- readLines(text, n = 1)
1753449698621:## if the last line ended with a hyphenated word, paste it on da start
1753449698622:line <- paste0(last, line)
1753449698622:##
1753449698622:#cat("\n")
1753449698622:#cat("this is line:" , line)
1753449698622:## but how does it know there are no more lines? MAGIC
1753449698623:if (length(line) == 0) { break }
1753449698623:else
1753449698623:{
1753449698623:## lines of code where line is on line as line for line (wanna line?)
1753449698623:wash <- clean(line, keepHyphens, keepContractions)
1753449698623:## wtf
1753449698624:#cat("wash[1]:", wash[1])
1753449698624:#cat("\nwash[2]:", wash[2])
1753449698624:line <- wash[1]
1753449698624:words <- unlist(strsplit(line,"\\s+"))
1753449698625:if (wash[2])
1753449698625:{
1753449698625:## store the last word frag
1753449698625:last <- words[length(words)]
1753449698625:## reset the line to not hold that part
1753449698625:words <- words[-length(words)]
1753449698626:} ## partial word saved for next line
1753449698626:for (word in words) ## word
1753449698626:{
1753449698627:if(word %in% names(wordCount))
1753449698627:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449698627:else ## wordCount[word]++, no? 'course not
1753449698627:{ wordCount[word] <- 1}
1753449698627:## print("added word")
1753449698627:}
1753449698628:} ## end not empty line
1753449698628:} ## end while reading lines
1753449698629:## close the file, if it was a file
1753449698629:#if (textIn == "file") { close(text) }
1753449698629:close(text)
1753449698629:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753449698629:## cat("\n\nfinal vector", wordCount, "\n\n")
1753449698630:return (wordCount)
1753449698630:} ## end readTheText
1753449706370:analyze()
1753449749549:analyze <- function(textIn = "file",
1753449749549:keepHyphens = TRUE,
1753449749550:keepContractions = TRUE)
1753449749551:{
1753449749551:######################## start helper functions #############################
1753449749552:## pick the file if need be, pick your nose, too!
1753449749552:chooseFile <- function()
1753449749552:{
1753449749553:## choose file or use path?
1753449749553:path <- readline(prompt = "enter path or 'enter' to search")
1753449749553:if (path == "")
1753449749553:{ path <- file.choose() }
1753449749553:if(!file.exists(path))
1753449749553:{
1753449749553:print("try again! file not found 404 SOS")
1753449749554:## try again
1753449749554:chooseFile()
1753449749554:} ## end while invalid file path
1753449749554:## and spit it out
1753449749554:return (path)
1753449749554:}
1753449749555:## clean the line, keep or remove hyphens and contractions
1753449749555:clean <- function(line, hyphens, contractions)
1753449749555:{
1753449749555:## super annoying
1753449749555:#cat("\n")
1753449749555:#cat("into clean:", line)
1753449749556:#cat("\n")
1753449749556:## does the line end in a hyphenated word? damn, work
1753449749556:partialWord <- FALSE
1753449749556:if (grepl("-$", line))
1753449749556:{ partialWord <- TRUE }
1753449749557:## no proper nouns allowed
1753449749557:line <- tolower(line)
1753449749557:## apropros keep hyphy chars
1753449749557:line <- gsub("[^a-z'-]", " ", line)
1753449749557:## okay WTF is going on here?
1753449749558:#print("removed punctuation?")
1753449749558:#print(line)
1753449749558:if (!contractions)
1753449749558:{ line <- gsub("'", " ", line) }
1753449749558:else
1753449749559:{
1753449749559:## it'll kill quotes and weird contractions ('bout)
1753449749559:line <- gsub("' ", " ", line)
1753449749559:line <- gsub(" '", " ", line)
1753449749559:}
1753449749560:if (!hyphens)
1753449749560:{ line <- gsub("-", " ", line) }
1753449749560:## this is annoying
1753449749560:#cat("out of clean:", line)
1753449749561:#cat("\n\n")
1753449749561:return (c(line, partialWord))
1753449749561:}
1753449749561:######################### end helper functions ##############################
1753449749562:## finding a file or using a string input?
1753449749562:if(textIn == "file")
1753449749562:{
1753449749562:## pick the file and verify
1753449749562:path <- chooseFile()
1753449749562:## open the connection to the file
1753449749563:text <- file(path, open = "r")
1753449749563:} ## end if using file
1753449749563:else ## for readLines to work, textConnection the string input
1753449749563:{ text <- textConnection(textIn) }
1753449749563:## initialize the variable to hold hyphenated end-of-liners
1753449749564:last <- ""
1753449749564:## initialize a vector to hold the counts
1753449749564:wordCount <- c()
1753449749564:while(TRUE)
1753449749564:##for (i in 1:10)
1753449749564:{
1753449749565:line <- readLines(text, n = 1)
1753449749565:## if the last line ended with a hyphenated word, paste it on da start
1753449749565:line <- paste0(last, line)
1753449749565:##
1753449749565:#cat("\n")
1753449749566:#cat("this is line:" , line)
1753449749566:## but how does it know there are no more lines? MAGIC
1753449749566:if (length(line) == 0) { break }
1753449749566:else
1753449749566:{
1753449749566:## lines of code where line is on line as line for line (wanna line?)
1753449749567:wash <- clean(line, keepHyphens, keepContractions)
1753449749567:## wtf
1753449749567:#cat("wash[1]:", wash[1])
1753449749567:#cat("\nwash[2]:", wash[2])
1753449749567:line <- wash[1]
1753449749568:words <- unlist(strsplit(line,"\\s+"))
1753449749568:if (wash[2])
1753449749568:{
1753449749568:## store the last word frag
1753449749569:last <- words[length(words)]
1753449749569:## reset the line to not hold that part
1753449749569:words <- words[-length(words)]
1753449749569:} ## partial word saved for next line
1753449749570:for (word in words) ## word
1753449749570:{
1753449749570:if(word %in% names(wordCount))
1753449749570:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449749570:else ## wordCount[word]++, no? 'course not
1753449749570:{ wordCount[word] <- 1}
1753449749571:## print("added word")
1753449749571:}
1753449749571:} ## end not empty line
1753449749572:} ## end while reading lines
1753449749572:## close the file, if it was a file
1753449749572:#if (textIn == "file") { close(text) }
1753449749572:close(text)
1753449749573:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753449749573:## cat("\n\nfinal vector", wordCount, "\n\n")
1753449749573:return (wordCount)
1753449749574:} ## end readTheText
1753449753288:analyze()
1753449777160:analyze <- function(textIn = "file",
1753449777160:keepHyphens = TRUE,
1753449777160:keepContractions = TRUE)
1753449777160:{
1753449777160:######################## start helper functions #############################
1753449777160:## pick the file if need be, pick your nose, too!
1753449777160:chooseFile <- function()
1753449777161:{
1753449777161:## choose file or use path?
1753449777161:path <- readline(prompt = "enter path or 'enter' to search")
1753449777161:if (path == "")
1753449777162:{ path <- file.choose() }
1753449777162:if(!file.exists(path))
1753449777162:{
1753449777162:print("try again! file not found 404 SOS")
1753449777162:## try again
1753449777163:chooseFile()
1753449777163:} ## end while invalid file path
1753449777163:## and spit it out
1753449777163:return (path)
1753449777164:}
1753449777164:## clean the line, keep or remove hyphens and contractions
1753449777164:clean <- function(line, hyphens, contractions)
1753449777164:{
1753449777165:## super annoying
1753449777165:#cat("\n")
1753449777165:#cat("into clean:", line)
1753449777165:#cat("\n")
1753449777166:## does the line end in a hyphenated word? damn, work
1753449777166:partialWord <- FALSE
1753449777166:if (grepl("-$", line))
1753449777166:{ partialWord <- TRUE }
1753449777167:## no proper nouns allowed
1753449777167:line <- tolower(line)
1753449777167:## apropros keep hyphy chars
1753449777167:line <- gsub("[^a-z'-]", " ", line)
1753449777167:## okay WTF is going on here?
1753449777168:#print("removed punctuation?")
1753449777168:#print(line)
1753449777168:if (!contractions)
1753449777168:{ line <- gsub("'", " ", line) }
1753449777168:else
1753449777169:{
1753449777169:## it'll kill quotes and weird contractions ('bout)
1753449777169:line <- gsub("' ", " ", line)
1753449777169:line <- gsub(" '", " ", line)
1753449777169:}
1753449777169:if (!hyphens)
1753449777169:{ line <- gsub("-", " ", line) }
1753449777170:## this is annoying
1753449777170:#cat("out of clean:", line)
1753449777170:#cat("\n\n")
1753449777170:return (c(line, partialWord))
1753449777170:}
1753449777171:######################### end helper functions ##############################
1753449777171:## finding a file or using a string input?
1753449777171:if(textIn == "file")
1753449777171:{
1753449777171:## pick the file and verify
1753449777171:path <- chooseFile()
1753449777172:## open the connection to the file
1753449777172:text <- file(path, open = "r")
1753449777172:} ## end if using file
1753449777172:else ## for readLines to work, textConnection the string input
1753449777173:{ text <- textConnection(textIn) }
1753449777173:## initialize the variable to hold hyphenated end-of-liners
1753449777173:last <- ""
1753449777173:## initialize a vector to hold the counts
1753449777174:wordCount <- c()
1753449777174:while(TRUE)
1753449777174:##for (i in 1:10)
1753449777175:{
1753449777175:line <- readLines(text, n = 1)
1753449777175:## if the last line ended with a hyphenated word, paste it on da start
1753449777175:line <- paste0(last, line)
1753449777176:##
1753449777176:#cat("\n")
1753449777176:#cat("this is line:" , line)
1753449777176:## but how does it know there are no more lines? MAGIC
1753449777177:if (length(line) == 0) { break }
1753449777177:else
1753449777177:{
1753449777177:## lines of code where line is on line as line for line (wanna line?)
1753449777177:wash <- clean(line, keepHyphens, keepContractions)
1753449777178:## wtf
1753449777178:#cat("wash[1]:", wash[1])
1753449777178:#cat("\nwash[2]:", wash[2])
1753449777178:line <- wash[1]
1753449777178:words <- unlist(strsplit(line,"\\s+"))
1753449777179:if (wash[2])
1753449777179:{
1753449777179:## store the last word frag
1753449777179:last <- words[length(words)]
1753449777179:## reset the line to not hold that part
1753449777179:words <- words[-length(words)]
1753449777180:} ## partial word saved for next line
1753449777180:for (word in words) ## word
1753449777180:{
1753449777180:if(word %in% names(wordCount))
1753449777181:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753449777181:else ## wordCount[word]++, no? 'course not
1753449777181:{ wordCount[word] <- 1}
1753449777181:## print("added word")
1753449777182:}
1753449777182:} ## end not empty line
1753449777182:} ## end while reading lines
1753449777183:## close the file, if it was a file
1753449777183:#if (textIn == "file") { close(text) }
1753449777183:close(text)
1753449777183:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753449777183:## cat("\n\nfinal vector", wordCount, "\n\n")
1753449777184:return (wordCount)
1753449777184:} ## end readTheText
1753449780764:analyze
1753449789816:analyze()
1753449908777:analyze()
1753450250870:analyze <- function(textIn = "file",
1753450250870:keepHyphens = TRUE,
1753450250870:keepContractions = TRUE)
1753450250870:{
1753450250870:######################## start helper functions #############################
1753450250870:## pick the file if need be, pick your nose, too!
1753450250870:chooseFile <- function()
1753450250871:{
1753450250871:## choose file or use path?
1753450250871:path <- readline(prompt = "enter path or 'enter' to search")
1753450250871:if (path == "")
1753450250872:{ path <- file.choose() }
1753450250872:if(!file.exists(path))
1753450250872:{
1753450250872:print("try again! file not found 404 SOS")
1753450250873:## try again
1753450250873:chooseFile()
1753450250873:} ## end while invalid file path
1753450250873:## and spit it out
1753450250873:return (path)
1753450250874:}
1753450250874:## clean the line, keep or remove hyphens and contractions
1753450250874:clean <- function(line, hyphens, contractions)
1753450250875:{
1753450250875:## super annoying
1753450250875:#cat("\n")
1753450250875:#cat("into clean:", line)
1753450250875:#cat("\n")
1753450250876:## does the line end in a hyphenated word? damn, work
1753450250876:partialWord <- FALSE
1753450250876:if (grepl("-$", line))
1753450250876:{
1753450250876:## remove that hyphen
1753450250877:sub("-$", "", line )
1753450250877:## declare a partial word
1753450250877:partialWord <- TRUE
1753450250877:}
1753450250878:## no proper nouns allowed
1753450250878:line <- tolower(line)
1753450250878:## apropros keep hyphy chars
1753450250879:line <- gsub("[^a-z'-]", " ", line)
1753450250879:## okay WTF is going on here?
1753450250879:#print("removed punctuation?")
1753450250879:#print(line)
1753450250880:if (!contractions)
1753450250880:{ line <- gsub("'", " ", line) }
1753450250880:else
1753450250880:{
1753450250881:## it'll kill quotes and weird contractions ('bout)
1753450250881:line <- gsub("' ", " ", line)
1753450250881:line <- gsub(" '", " ", line)
1753450250881:}
1753450250881:if (!hyphens)
1753450250881:{ line <- gsub("-", " ", line) }
1753450250882:## this is annoying
1753450250882:#cat("out of clean:", line)
1753450250882:#cat("\n\n")
1753450250882:return (c(line, partialWord))
1753450250882:}
1753450250883:######################### end helper functions ##############################
1753450250883:## finding a file or using a string input?
1753450250883:if(textIn == "file")
1753450250883:{
1753450250883:## pick the file and verify
1753450250883:path <- chooseFile()
1753450250884:## open the connection to the file
1753450250884:text <- file(path, open = "r")
1753450250884:} ## end if using file
1753450250884:else ## for readLines to work, textConnection the string input
1753450250884:{ text <- textConnection(textIn) }
1753450250885:## initialize the variable to hold hyphenated end-of-liners
1753450250885:last <- ""
1753450250885:## initialize a vector to hold the counts
1753450250885:wordCount <- c()
1753450250886:while(TRUE)
1753450250886:##for (i in 1:10)
1753450250886:{
1753450250886:line <- readLines(text, n = 1)
1753450250886:##
1753450250886:#cat("\n")
1753450250887:#cat("this is line:" , line)
1753450250887:## but how does it know there are no more lines? MAGIC
1753450250887:if (length(line) == 0) { break }
1753450250887:## if the last line ended with a hyphenated word, paste it on da start
1753450250887:line <- paste0(last, line)
1753450250888:else
1753450346886:analyze <- function(textIn = "file",
1753450346886:keepHyphens = TRUE,
1753450346887:keepContractions = TRUE)
1753450346887:{
1753450346887:######################## start helper functions #############################
1753450346887:## pick the file if need be, pick your nose, too!
1753450346887:chooseFile <- function()
1753450346887:{
1753450346887:## choose file or use path?
1753450346887:path <- readline(prompt = "enter path or 'enter' to search")
1753450346888:if (path == "")
1753450346888:{ path <- file.choose() }
1753450346888:if(!file.exists(path))
1753450346889:{
1753450346889:print("try again! file not found 404 SOS")
1753450346889:## try again
1753450346889:chooseFile()
1753450346889:} ## end while invalid file path
1753450346889:## and spit it out
1753450346889:return (path)
1753450346890:}
1753450346890:## clean the line, keep or remove hyphens and contractions
1753450346890:clean <- function(line, hyphens, contractions)
1753450346890:{
1753450346890:## super annoying
1753450346890:#cat("\n")
1753450346891:#cat("into clean:", line)
1753450346891:#cat("\n")
1753450346891:## does the line end in a hyphenated word? damn, work
1753450346891:partialWord <- FALSE
1753450346892:if (grepl("-$", line))
1753450346892:{
1753450346892:## remove that hyphen
1753450346892:sub("-$", "", line )
1753450346893:## declare a partial word
1753450346893:partialWord <- TRUE
1753450346893:}
1753450346893:## no proper nouns allowed
1753450346894:line <- tolower(line)
1753450346894:## apropros keep hyphy chars
1753450346894:line <- gsub("[^a-z'-]", " ", line)
1753450346895:## okay WTF is going on here?
1753450346895:#print("removed punctuation?")
1753450346895:#print(line)
1753450346896:if (!contractions)
1753450346896:{ line <- gsub("'", " ", line) }
1753450346896:else
1753450346896:{
1753450346896:## it'll kill quotes and weird contractions ('bout)
1753450346896:line <- gsub("' ", " ", line)
1753450346896:line <- gsub(" '", " ", line)
1753450346896:}
1753450346897:if (!hyphens)
1753450346897:{ line <- gsub("-", " ", line) }
1753450346897:## this is annoying
1753450346897:#cat("out of clean:", line)
1753450346897:#cat("\n\n")
1753450346898:return (c(line, partialWord))
1753450346898:}
1753450346898:######################### end helper functions ##############################
1753450346898:## finding a file or using a string input?
1753450346898:if(textIn == "file")
1753450346899:{
1753450346899:## pick the file and verify
1753450346899:path <- chooseFile()
1753450346899:## open the connection to the file
1753450346899:text <- file(path, open = "r")
1753450346900:} ## end if using file
1753450346900:else ## for readLines to work, textConnection the string input
1753450346900:{ text <- textConnection(textIn) }
1753450346900:## initialize the variable to hold hyphenated end-of-liners
1753450346900:last <- ""
1753450346901:## initialize a vector to hold the counts
1753450346901:wordCount <- c()
1753450346901:while(TRUE)
1753450346901:##for (i in 1:10)
1753450346901:{
1753450346901:line <- readLines(text, n = 1)
1753450346902:##
1753450346902:#cat("\n")
1753450346902:#cat("this is line:" , line)
1753450346902:## but how does it know there are no more lines? MAGIC
1753450346902:if (length(line) == 0) { break }
1753450346903:else
1753450346903:{
1753450346903:## if the last line ended with a hyphenated word, paste it on da start
1753450346903:line <- paste0(last, line)
1753450346903:## lines of code where line is on line as line for line (wanna line?)
1753450346903:wash <- clean(line, keepHyphens, keepContractions)
1753450346904:## wtf
1753450346904:#cat("wash[1]:", wash[1])
1753450346904:#cat("\nwash[2]:", wash[2])
1753450346904:line <- wash[1]
1753450346905:words <- unlist(strsplit(line,"\\s+"))
1753450346905:if (wash[2])
1753450346905:{
1753450346905:## store the last word frag
1753450346905:last <- words[length(words)]
1753450346906:## reset the line to not hold that part
1753450346906:words <- words[-length(words)]
1753450346906:} ## partial word saved for next line
1753450346907:for (word in words) ## word
1753450346907:{
1753450346907:if(word %in% names(wordCount))
1753450346907:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753450346907:else ## wordCount[word]++, no? 'course not
1753450346907:{ wordCount[word] <- 1}
1753450346908:## print("added word")
1753450346908:}
1753450346908:} ## end not empty line
1753450346909:} ## end while reading lines
1753450346909:## close the file, if it was a file
1753450346909:#if (textIn == "file") { close(text) }
1753450346909:close(text)
1753450346910:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753450346910:## cat("\n\nfinal vector", wordCount, "\n\n")
1753450346910:return (wordCount)
1753450346911:} ## end readTheText
1753450359831:words <- analyze()
1753450369049:words
1753450490521:analyze <- function(textIn = "file",
1753450490521:keepHyphens = TRUE,
1753450490521:keepContractions = TRUE)
1753450490521:{
1753450490521:######################## start helper functions #############################
1753450490521:## pick the file if need be, pick your nose, too!
1753450490522:chooseFile <- function()
1753450490522:{
1753450490522:## choose file or use path?
1753450490522:path <- readline(prompt = "enter path or 'enter' to search")
1753450490523:if (path == "")
1753450490523:{ path <- file.choose() }
1753450490523:if(!file.exists(path))
1753450490523:{
1753450490524:print("try again! file not found 404 SOS")
1753450490524:## try again
1753450490524:chooseFile()
1753450490524:} ## end while invalid file path
1753450490524:## and spit it out
1753450490525:return (path)
1753450490525:}
1753450490525:## clean the line, keep or remove hyphens and contractions
1753450490526:clean <- function(line, hyphens, contractions)
1753450490526:{
1753450490526:## super annoying
1753450490526:#cat("\n")
1753450490527:#cat("into clean:", line)
1753450490527:#cat("\n")
1753450490527:## does the line end in a hyphenated word? damn, work
1753450490528:partialWord <- FALSE
1753450490528:if (grepl("-$", line))
1753450490528:{
1753450490528:## remove that hyphen
1753450490528:gsub("-$", "", line )
1753450490529:## declare a partial word
1753450490529:partialWord <- TRUE
1753450490529:}
1753450490529:## no proper nouns allowed
1753450490529:line <- tolower(line)
1753450490530:## apropros keep hyphy chars
1753450490530:line <- gsub("[^a-z'-]", " ", line)
1753450490530:## okay WTF is going on here?
1753450490530:#print("removed punctuation?")
1753450490530:#print(line)
1753450490530:if (!contractions)
1753450490531:{ line <- gsub("'", " ", line) }
1753450490531:else
1753450490531:{
1753450490531:## it'll kill quotes and weird contractions ('bout)
1753450490531:line <- gsub("' ", " ", line)
1753450490531:line <- gsub(" '", " ", line)
1753450490531:}
1753450490532:if (!hyphens)
1753450490532:{ line <- gsub("-", " ", line) }
1753450490532:## this is annoying
1753450490532:#cat("out of clean:", line)
1753450490532:#cat("\n\n")
1753450490532:return (c(line, partialWord))
1753450490533:}
1753450490533:######################### end helper functions ##############################
1753450490533:## finding a file or using a string input?
1753450490533:if(textIn == "file")
1753450490533:{
1753450490534:## pick the file and verify
1753450490534:path <- chooseFile()
1753450490534:## open the connection to the file
1753450490534:text <- file(path, open = "r")
1753450490534:} ## end if using file
1753450490535:else ## for readLines to work, textConnection the string input
1753450490535:{ text <- textConnection(textIn) }
1753450490535:## initialize the variable to hold hyphenated end-of-liners
1753450490535:last <- ""
1753450490535:## initialize a vector to hold the counts
1753450490535:wordCount <- c()
1753450490536:while(TRUE)
1753450490536:##for (i in 1:10)
1753450490536:{
1753450490536:line <- readLines(text, n = 1)
1753450490537:##
1753450490537:#cat("\n")
1753450490537:#cat("this is line:" , line)
1753450490537:## but how does it know there are no more lines? MAGIC
1753450490537:if (length(line) == 0) { break }
1753450490537:else
1753450490538:{
1753450490538:## if the last line ended with a hyphenated word, paste it on da start
1753450490538:line <- paste0(last, line)
1753450490538:## lines of code where line is on line as line for line (wanna line?)
1753450490538:wash <- clean(line, keepHyphens, keepContractions)
1753450490539:## wtf
1753450490539:#cat("wash[1]:", wash[1])
1753450490539:#cat("\nwash[2]:", wash[2])
1753450490539:line <- wash[1]
1753450490539:words <- unlist(strsplit(line,"\\s+"))
1753450490540:if (wash[2])
1753450490540:{
1753450490540:## store the last word frag
1753450490540:last <- words[length(words)]
1753450490540:## reset the line to not hold that part
1753450490541:words <- words[-length(words)]
1753450490541:} ## partial word saved for next line
1753450490541:for (word in words) ## word
1753450490541:{
1753450490542:if(word %in% names(wordCount))
1753450490542:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753450490542:else ## wordCount[word]++, no? 'course not
1753450490542:{ wordCount[word] <- 1}
1753450490542:## print("added word")
1753450490543:}
1753450490543:} ## end not empty line
1753450490543:} ## end while reading lines
1753450490544:## close the file, if it was a file
1753450490544:#if (textIn == "file") { close(text) }
1753450490544:close(text)
1753450490544:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753450490545:## cat("\n\nfinal vector", wordCount, "\n\n")
1753450490545:return (wordCount)
1753450490545:} ## end readTheText
1753450495379:words <- analyze()
1753450504202:words
1753450608697:analyze <- function(textIn = "file",
1753450608697:keepHyphens = TRUE,
1753450608697:keepContractions = TRUE)
1753450608698:{
1753450608698:######################## start helper functions #############################
1753450608699:## pick the file if need be, pick your nose, too!
1753450608699:chooseFile <- function()
1753450608699:{
1753450608699:## choose file or use path?
1753450608699:path <- readline(prompt = "enter path or 'enter' to search")
1753450608700:if (path == "")
1753450608700:{ path <- file.choose() }
1753450608700:if(!file.exists(path))
1753450608700:{
1753450608700:print("try again! file not found 404 SOS")
1753450608700:## try again
1753450608700:chooseFile()
1753450608700:} ## end while invalid file path
1753450608701:## and spit it out
1753450608701:return (path)
1753450608701:}
1753450608701:## clean the line, keep or remove hyphens and contractions
1753450608701:clean <- function(line, hyphens, contractions)
1753450608702:{
1753450608702:## super annoying
1753450608702:#cat("\n")
1753450608702:#cat("into clean:", line)
1753450608702:#cat("\n")
1753450608702:## does the line end in a hyphenated word? damn, work
1753450608702:partialWord <- FALSE
1753450608703:if (grepl("-$", line))
1753450608703:{
1753450608703:## remove that hyphen
1753450608703:gsub("-$", " ", line )
1753450608703:## declare a partial word
1753450608703:partialWord <- TRUE
1753450608704:}
1753450608704:## no proper nouns allowed
1753450608704:line <- tolower(line)
1753450608704:## apropros keep hyphy chars
1753450608705:line <- gsub("[^a-z'-]", " ", line)
1753450608705:## okay WTF is going on here?
1753450608705:#print("removed punctuation?")
1753450608705:#print(line)
1753450608706:if (!contractions)
1753450608706:{ line <- gsub("'", " ", line) }
1753450608706:else
1753450608706:{
1753450608706:## it'll kill quotes and weird contractions ('bout)
1753450608706:line <- gsub("' ", " ", line)
1753450608706:line <- gsub(" '", " ", line)
1753450608707:}
1753450608707:if (!hyphens)
1753450608707:{ line <- gsub("-", " ", line) }
1753450608707:## this is annoying
1753450608707:#cat("out of clean:", line)
1753450608707:#cat("\n\n")
1753450608708:return (c(line, partialWord))
1753450608708:}
1753450608708:######################### end helper functions ##############################
1753450608708:## finding a file or using a string input?
1753450608709:if(textIn == "file")
1753450608709:{
1753450608709:## pick the file and verify
1753450608709:path <- chooseFile()
1753450608709:## open the connection to the file
1753450608709:text <- file(path, open = "r")
1753450608710:} ## end if using file
1753450608710:else ## for readLines to work, textConnection the string input
1753450608710:{ text <- textConnection(textIn) }
1753450608710:## initialize the variable to hold hyphenated end-of-liners
1753450608710:last <- ""
1753450608710:## initialize a vector to hold the counts
1753450608711:wordCount <- c()
1753450608711:while(TRUE)
1753450608711:##for (i in 1:10)
1753450608711:{
1753450608711:line <- readLines(text, n = 1)
1753450608712:##
1753450608712:#cat("\n")
1753450608712:#cat("this is line:" , line)
1753450608712:## but how does it know there are no more lines? MAGIC
1753450608712:if (length(line) == 0) { break }
1753450608713:else
1753450608713:{
1753450608713:## if the last line ended with a hyphenated word, paste it on da start
1753450608713:line <- paste0(last, line)
1753450608713:## lines of code where line is on line as line for line (wanna line?)
1753450608713:wash <- clean(line, keepHyphens, keepContractions)
1753450608714:## wtf
1753450608714:#cat("wash[1]:", wash[1])
1753450608714:#cat("\nwash[2]:", wash[2])
1753450608714:line <- wash[1]
1753450608715:words <- unlist(strsplit(line,"\\s+"))
1753450608715:if (wash[2])
1753450608715:{
1753450608715:## store the last word frag
1753450608715:last <- words[length(words)]
1753450608715:## reset the line to not hold that part
1753450608716:words <- words[-length(words)]
1753450608716:} ## partial word saved for next line
1753450608716:for (word in words) ## word
1753450608717:{
1753450608717:if(word %in% names(wordCount))
1753450608717:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753450608717:else ## wordCount[word]++, no? 'course not
1753450608717:{ wordCount[word] <- 1}
1753450608718:## print("added word")
1753450608718:}
1753450608718:} ## end not empty line
1753450608719:} ## end while reading lines
1753450608719:## close the file, if it was a file
1753450608719:#if (textIn == "file") { close(text) }
1753450608720:close(text)
1753450608720:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753450608720:## cat("\n\nfinal vector", wordCount, "\n\n")
1753450608720:return (wordCount)
1753450608721:} ## end readTheText
1753450612285:words <- analyze()
1753450621717:words
1753450671227:analyze <- function(textIn = "file",
1753450671227:keepHyphens = TRUE,
1753450671227:keepContractions = TRUE)
1753450671227:{
1753450671227:######################## start helper functions #############################
1753450671227:## pick the file if need be, pick your nose, too!
1753450671227:chooseFile <- function()
1753450671228:{
1753450671228:## choose file or use path?
1753450671228:path <- readline(prompt = "enter path or 'enter' to search")
1753450671229:if (path == "")
1753450671229:{ path <- file.choose() }
1753450671230:if(!file.exists(path))
1753450671230:{
1753450671230:print("try again! file not found 404 SOS")
1753450671230:## try again
1753450671230:chooseFile()
1753450671230:} ## end while invalid file path
1753450671231:## and spit it out
1753450671231:return (path)
1753450671231:}
1753450671232:## clean the line, keep or remove hyphens and contractions
1753450671232:clean <- function(line, hyphens, contractions)
1753450671232:{
1753450671232:## super annoying
1753450671232:#cat("\n")
1753450671232:#cat("into clean:", line)
1753450671232:#cat("\n")
1753450671233:## does the line end in a hyphenated word? damn, work
1753450671233:partialWord <- FALSE
1753450671233:if (grepl("-$", line))
1753450671233:{
1753450671233:## remove that hyphen
1753450671233:line <- gsub("-$", "", line )
1753450671234:## declare a partial word
1753450671234:partialWord <- TRUE
1753450671234:}
1753450671234:## no proper nouns allowed
1753450671235:line <- tolower(line)
1753450671235:## apropros keep hyphy chars
1753450671235:line <- gsub("[^a-z'-]", " ", line)
1753450671236:## okay WTF is going on here?
1753450671236:#print("removed punctuation?")
1753450671236:#print(line)
1753450671236:if (!contractions)
1753450671236:{ line <- gsub("'", " ", line) }
1753450671236:else
1753450671237:{
1753450671237:## it'll kill quotes and weird contractions ('bout)
1753450671237:line <- gsub("' ", " ", line)
1753450671237:line <- gsub(" '", " ", line)
1753450671237:}
1753450671237:if (!hyphens)
1753450671237:{ line <- gsub("-", " ", line) }
1753450671238:## this is annoying
1753450671238:#cat("out of clean:", line)
1753450671238:#cat("\n\n")
1753450671238:return (c(line, partialWord))
1753450671238:}
1753450671239:######################### end helper functions ##############################
1753450671239:## finding a file or using a string input?
1753450671239:if(textIn == "file")
1753450671239:{
1753450671239:## pick the file and verify
1753450671239:path <- chooseFile()
1753450671240:## open the connection to the file
1753450671240:text <- file(path, open = "r")
1753450671240:} ## end if using file
1753450671240:else ## for readLines to work, textConnection the string input
1753450671240:{ text <- textConnection(textIn) }
1753450671241:## initialize the variable to hold hyphenated end-of-liners
1753450671241:last <- ""
1753450671241:## initialize a vector to hold the counts
1753450671241:wordCount <- c()
1753450671242:while(TRUE)
1753450671242:##for (i in 1:10)
1753450671242:{
1753450671242:line <- readLines(text, n = 1)
1753450671242:##
1753450671242:#cat("\n")
1753450671243:#cat("this is line:" , line)
1753450671243:## but how does it know there are no more lines? MAGIC
1753450671243:if (length(line) == 0) { break }
1753450671243:else
1753450671243:{
1753450671243:## if the last line ended with a hyphenated word, paste it on da start
1753450671244:line <- paste0(last, line)
1753450671244:## lines of code where line is on line as line for line (wanna line?)
1753450671244:wash <- clean(line, keepHyphens, keepContractions)
1753450671244:## wtf
1753450671245:#cat("wash[1]:", wash[1])
1753450671245:#cat("\nwash[2]:", wash[2])
1753450671245:line <- wash[1]
1753450671245:words <- unlist(strsplit(line,"\\s+"))
1753450671246:if (wash[2])
1753450671246:{
1753450671246:## store the last word frag
1753450671246:last <- words[length(words)]
1753450671246:## reset the line to not hold that part
1753450671246:words <- words[-length(words)]
1753450671247:} ## partial word saved for next line
1753450671247:for (word in words) ## word
1753450671247:{
1753450671247:if(word %in% names(wordCount))
1753450671248:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753450671248:else ## wordCount[word]++, no? 'course not
1753450671248:{ wordCount[word] <- 1}
1753450671248:## print("added word")
1753450671248:}
1753450671249:} ## end not empty line
1753450671249:} ## end while reading lines
1753450671249:## close the file, if it was a file
1753450671250:#if (textIn == "file") { close(text) }
1753450671250:close(text)
1753450671250:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753450671250:## cat("\n\nfinal vector", wordCount, "\n\n")
1753450671251:return (wordCount)
1753450671251:} ## end readTheText
1753450675654:words <- analyze()
1753450681865:words
1753450797649:analyze <- function(textIn = "file",
1753450797649:keepHyphens = TRUE,
1753450797649:keepContractions = TRUE)
1753450797649:{
1753450797649:######################## start helper functions #############################
1753450797649:## pick the file if need be, pick your nose, too!
1753450797649:chooseFile <- function()
1753450797649:{
1753450797649:## choose file or use path?
1753450797650:path <- readline(prompt = "enter path or 'enter' to search")
1753450797650:if (path == "")
1753450797650:{ path <- file.choose() }
1753450797651:if(!file.exists(path))
1753450797651:{
1753450797651:print("try again! file not found 404 SOS")
1753450797651:## try again
1753450797651:chooseFile()
1753450797651:} ## end while invalid file path
1753450797652:## and spit it out
1753450797652:return (path)
1753450797652:}
1753450797653:## clean the line, keep or remove hyphens and contractions
1753450797653:clean <- function(line, hyphens, contractions)
1753450797653:{
1753450797653:## super annoying
1753450797654:#cat("\n")
1753450797654:#cat("into clean:", line)
1753450797654:#cat("\n")
1753450797654:## does the line end in a hyphenated word? damn, work
1753450797654:partialWord <- FALSE
1753450797655:if (grepl("-$", line))
1753450797655:{
1753450797655:## remove that hyphen
1753450797655:line <- gsub("-$", "", line )
1753450797656:## declare a partial word
1753450797656:partialWord <- TRUE
1753450797656:}
1753450797656:## no proper nouns allowed
1753450797657:line <- tolower(line)
1753450797657:## apropros keep hyphy chars
1753450797657:line <- gsub("[^a-z'-]", " ", line)
1753450797658:## okay WTF is going on here?
1753450797658:#print("removed punctuation?")
1753450797658:#print(line)
1753450797659:if (!contractions)
1753450797659:{ line <- gsub("'", " ", line) }
1753450797659:else
1753450797659:{
1753450797659:## it'll kill quotes and weird contractions ('bout)
1753450797659:line <- gsub("' ", " ", line)
1753450797659:line <- gsub(" '", " ", line)
1753450797659:}
1753450797660:if (!hyphens)
1753450797660:{ line <- gsub("-", " ", line) }
1753450797660:## this is annoying
1753450797660:#cat("out of clean:", line)
1753450797660:#cat("\n\n")
1753450797661:return (c(line, partialWord))
1753450797661:}
1753450797661:######################### end helper functions ##############################
1753450797661:## finding a file or using a string input?
1753450797661:if(textIn == "file")
1753450797662:{
1753450797662:## pick the file and verify
1753450797662:path <- chooseFile()
1753450797662:## open the connection to the file
1753450797662:text <- file(path, open = "r")
1753450797662:} ## end if using file
1753450797663:else ## for readLines to work, textConnection the string input
1753450797663:{ text <- textConnection(textIn) }
1753450797663:## initialize the variable to hold hyphenated end-of-liners
1753450797663:last <- ""
1753450797663:## initialize a vector to hold the counts
1753450797664:wordCount <- c()
1753450797664:while(TRUE)
1753450797664:##for (i in 1:10)
1753450797664:{
1753450797664:line <- readLines(text, n = 1)
1753450797665:##
1753450797665:#cat("\n")
1753450797665:#cat("this is line:" , line)
1753450797665:## but how does it know there are no more lines? MAGIC
1753450797665:if (length(line) == 0) { break }
1753450797665:else
1753450797666:{
1753450797666:## if the last line ended with a hyphenated word, paste it on da start
1753450797666:line <- paste0(last, line)
1753450797666:## lines of code where line is on line as line for line (wanna line?)
1753450797666:wash <- clean(line, keepHyphens, keepContractions)
1753450797667:## wtf
1753450797667:#cat("wash[1]:", wash[1])
1753450797667:#cat("\nwash[2]:", wash[2])
1753450797667:line <- wash[1]
1753450797668:words <- unlist(strsplit(line,"\\s+"))
1753450797668:if (wash[2])
1753450797668:{
1753450797668:## store the last word frag
1753450797668:last <- words[length(words)]
1753450797668:## reset the line to not hold that part
1753450797669:words <- words[-length(words)]
1753450797669:} ## partial word saved for next line
1753450797669:for (word in words) ## word
1753450797670:{
1753450797670:if(word %in% names(wordCount))
1753450797670:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753450797670:else ## wordCount[word]++, no? 'course not
1753450797670:{ wordCount[word] <- 1}
1753450797671:## print("added word")
1753450797671:}
1753450797671:} ## end not empty line
1753450797672:} ## end while reading lines
1753450797672:## close the file, if it was a file
1753450797672:#if (textIn == "file") { close(text) }
1753450797672:close(text)
1753450797672:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753450797673:## cat("\n\nfinal vector", wordCount, "\n\n")
1753450797673:return (wordCount)
1753450797673:} ## end readTheText
1753450800979:words <- analyze()
1753450808279:words
1753450918503:analyze <- function(textIn = "file",
1753450918503:keepHyphens = TRUE,
1753450918503:keepContractions = TRUE)
1753450918503:{
1753450918504:######################## start helper functions #############################
1753450918504:## pick the file if need be, pick your nose, too!
1753450918505:chooseFile <- function()
1753450918505:{
1753450918505:## choose file or use path?
1753450918505:path <- readline(prompt = "enter path or 'enter' to search")
1753450918506:if (path == "")
1753450918506:{ path <- file.choose() }
1753450918506:if(!file.exists(path))
1753450918506:{
1753450918506:print("try again! file not found 404 SOS")
1753450918506:## try again
1753450918506:chooseFile()
1753450918507:} ## end while invalid file path
1753450918507:## and spit it out
1753450918507:return (path)
1753450918508:}
1753450918509:## clean the line, keep or remove hyphens and contractions
1753450918509:clean <- function(line, hyphens, contractions)
1753450918509:{
1753450918510:## super annoying
1753450918510:#cat("\n")
1753450918510:#cat("into clean:", line)
1753450918510:#cat("\n")
1753450918510:## does the line end in a hyphenated word? damn, work
1753450918511:partialWord <- FALSE
1753450918511:if (grepl("-$", line))
1753450918511:{
1753450918511:## remove that hyphen
1753450918511:line <- gsub("-$", "", line )
1753450918511:## declare a partial word
1753450918512:partialWord <- TRUE
1753450918512:}
1753450918512:## no proper nouns allowed
1753450918512:line <- tolower(line)
1753450918512:## apropros keep hyphy chars
1753450918513:line <- gsub("[^a-z'-]", " ", line)
1753450918513:## okay WTF is going on here?
1753450918513:#print("removed punctuation?")
1753450918513:#print(line)
1753450918514:if (!contractions)
1753450918514:{ line <- gsub("'", " ", line) }
1753450918514:else
1753450918514:{
1753450918514:## it'll kill quotes and weird contractions ('bout)
1753450918514:line <- gsub("' ", " ", line)
1753450918514:line <- gsub(" '", " ", line)
1753450918515:}
1753450918515:if (!hyphens)
1753450918515:{ line <- gsub("-", " ", line) }
1753450918516:## this is annoying
1753450918516:#cat("out of clean:", line)
1753450918516:#cat("\n\n")
1753450918516:return (c(line, partialWord))
1753450918517:}
1753450918517:######################### end helper functions ##############################
1753450918517:## finding a file or using a string input?
1753450918518:if(textIn == "file")
1753450918518:{
1753450918518:## pick the file and verify
1753450918518:path <- chooseFile()
1753450918518:## open the connection to the file
1753450918518:text <- file(path, open = "r")
1753450918519:} ## end if using file
1753450918519:else ## for readLines to work, textConnection the string input
1753450918519:{ text <- textConnection(textIn) }
1753450918519:## initialize the variable to hold hyphenated end-of-liners
1753450918519:last <- ""
1753450918520:## initialize a vector to hold the counts
1753450918520:wordCount <- c()
1753450918520:while(TRUE)
1753450918520:##for (i in 1:10)
1753450918520:{
1753450918521:line <- readLines(text, n = 1)
1753450918521:##
1753450918521:#cat("\n")
1753450918521:#cat("this is line:" , line)
1753450918521:## but how does it know there are no more lines? MAGIC
1753450918522:if (length(line) == 0) { break }
1753450918522:else
1753450918522:{
1753450918522:## if the last line ended with a hyphenated word, paste it on da start
1753450918522:line <- paste0(last, line)
1753450918522:## don't forget to reset
1753450918522:last <- ""
1753450918523:## lines of code where line is on line as line for line (wanna line?)
1753450918523:wash <- clean(line, keepHyphens, keepContractions)
1753450918523:## wtf
1753450918523:#cat("wash[1]:", wash[1])
1753450918523:#cat("\nwash[2]:", wash[2])
1753450918524:line <- wash[1]
1753450918524:words <- unlist(strsplit(line,"\\s+"))
1753450918524:if (wash[2])
1753450918524:{
1753450918525:## store the last word frag
1753450918525:last <- words[length(words)]
1753450918525:## reset the line to not hold that part
1753450918525:words <- words[-length(words)]
1753450918525:} ## partial word saved for next line
1753450918526:for (word in words) ## word
1753450918526:{
1753450918526:if(word %in% names(wordCount))
1753450918526:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753450918526:else ## wordCount[word]++, no? 'course not
1753450918527:{ wordCount[word] <- 1}
1753450918527:## print("added word")
1753450918527:}
1753450918527:} ## end not empty line
1753450918528:} ## end while reading lines
1753450918528:## close the file, if it was a file
1753450918528:#if (textIn == "file") { close(text) }
1753450918528:close(text)
1753450918529:## .... (turns out... I had "wordCount<- wordCount[word] + 1" replacing the entire vector....)
1753450918529:## cat("\n\nfinal vector", wordCount, "\n\n")
1753450918529:return (wordCount)
1753450918530:} ## end readTheText
1753450922458:words <- analyze()
1753450930049:words
1753451923615:library(devtools)
1753451934158:use_testthat()
1753452016898:use_test()
1753452200252:length(words)
1753452556353:length(analyze("../../textFiles/someText.txt"))
1753452580118:words <- analyze("../../textFiles/someText.txt")
1753452581789:words
1753452645959:wrods <- analyze("here-\nforafter is some text")
1753452647756:wrods
1753452690897:d = analyze("here-\nforafter iS'nt some text", TRUE, FALSE)
1753452692154:d
1753452774284:library(devtools)
1753452829787:use_r(quotidian)
1753452837924:use_r("quotidian")
1753452927988:quotidian <- funtion(namedVector = analyze(), top = 10)
1753452937836:quotidian <- function(namedVector = analyze(), top = 10)
1753452937836:{
1753452937837:namedVector
1753452937837:}
1753452945471:quotidian()
1753452994615:quotidian()
1753453033032:analyze()
1753453070223:analyze <- function(textIn = "file",
1753453070223:keepHyphens = TRUE,
1753453070223:keepContractions = TRUE)
1753453070223:{
1753453070223:######################## start helper functions #############################
1753453070223:## pick the file if need be, pick your nose, too!
1753453070223:chooseFile <- function()
1753453070223:{
1753453070223:## choose file or use path?
1753453070224:path <- readline(prompt = "enter path or 'enter' to search: ")
1753453070224:if (path == "")
1753453070224:{ path <- file.choose() }
1753453070226:if(!file.exists(path))
1753453070226:{
1753453070226:print("try again! file not found 404 SOS")
1753453070227:## try again
1753453070227:chooseFile()
1753453070227:} ## end while invalid file path
1753453070228:## and spit it out
1753453070228:return (path)
1753453070228:}
1753453070229:## clean the line, keep or remove hyphens and contractions
1753453070229:clean <- function(line, hyphens, contractions)
1753453070229:{
1753453070229:## does the line end in a hyphenated word? damn, work
1753453070230:partialWord <- FALSE
1753453070230:if (grepl("-$", line))
1753453070230:{
1753453070230:## remove that hyphen
1753453070231:line <- gsub("-$", "", line )
1753453070231:## declare a partial word
1753453070231:partialWord <- TRUE
1753453070231:}
1753453070232:## no proper nouns allowed
1753453070232:line <- tolower(line)
1753453070232:## apropros keep hyphy chars
1753453070232:line <- gsub("[^a-z'-]", " ", line)
1753453070232:if (!contractions)
1753453070232:{ line <- gsub("'", " ", line) }
1753453070233:else
1753453070233:{
1753453070233:## it'll kill quotes and weird contractions ('bout)
1753453070233:line <- gsub("' ", " ", line)
1753453070233:line <- gsub(" '", " ", line)
1753453070233:}
1753453070233:if (!hyphens)
1753453070234:{ line <- gsub("-", " ", line) }
1753453070234:return (c(line, partialWord))
1753453070234:}
1753453070234:######################### end helper functions ##############################
1753453070235:## finding a file or using a string input?
1753453070235:if(textIn == "file")
1753453070235:{
1753453070235:## pick the file and verify
1753453070235:path <- chooseFile()
1753453070235:## open the connection to the file
1753453070235:text <- file(path, open = "r")
1753453070236:} ## end if using file
1753453070236:else ## for readLines to work, textConnection the string input
1753453070236:{ text <- textConnection(textIn) }
1753453070236:## initialize the variable to hold hyphenated end-of-liners
1753453070237:last <- ""
1753453070237:## initialize a vector to hold the counts
1753453070237:wordCount <- c()
1753453070237:while(TRUE)
1753453070237:##for (i in 1:10)
1753453070237:{
1753453070238:line <- readLines(text, n = 1)
1753453070238:## but how does it know there are no more lines? MAGIC
1753453070238:if (length(line) == 0) { break }
1753453070238:else
1753453070238:{
1753453070238:## if the last line ended with a hyphenated word, paste it on da start
1753453070239:line <- paste0(last, line)
1753453070239:## don't forget to reset
1753453070239:last <- ""
1753453070239:## lines of code where line is on line as line for line (wanna line?)
1753453070239:wash <- clean(line, keepHyphens, keepContractions)
1753453070239:## line is now the first part of the vector
1753453070240:line <- wash[1]
1753453070240:## make that it's own thing
1753453070240:words <- unlist(strsplit(line,"\\s+"))
1753453070240:## the second part -> hyphenated end-of-line? T/F
1753453070240:if (wash[2])
1753453070241:{
1753453070241:## store the last word frag
1753453070241:last <- words[length(words)]
1753453070241:## reset the line to not hold that part
1753453070241:words <- words[-length(words)]
1753453070241:} ## partial word saved for next line
1753453070242:for (word in words) ## word
1753453070242:{
1753453070242:if(word %in% names(wordCount))
1753453070242:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753453070243:else ## wordCount[word]++, no? 'course not
1753453070243:{ wordCount[word] <- 1}
1753453070243:} ## end add/update words
1753453070243:} ## end not empty line
1753453070244:} ## end while reading lines
1753453070244:## close the file (even text entry is considered a "file")
1753453070244:close(text)
1753453070244:return (wordCount)
1753453070245:} ## end readTheText
1753453074244:analyze()
1753453193960:analyze()
1753453502419:quotidian <- function(namedVector = analyze(), top = 10)
1753453502419:{
1753453502419:#namedVector
1753453502419:print("dun")
1753453502419:}
1753453510276:quotidian
1753453514553:quotidian()
1753453548164:x = analyze("this is something that I wanna analyze")
1753453553830:quotidian(x)
1753453565344:quotidian(x, 3)
1753453694992:x
1753453700877:x['this']
1753453703721:x[this\]
1753453707253:x[this]
1753453718284:x['this'] + 1
1753453723750:x['this']
1753453814909:quotidian <- function(namedVector = analyze(), top = 10)
1753453814909:{
1753453814909:## calls analyze for the all-in-one functionality
1753453814909:namedVector
1753453814909:orderly <- sort(namedVector, decreasing = TRUE)
1753453814909:for(i in 1:top)
1753453814909:{
1753453814910:print(orderly[i])
1753453814910:}
1753453814910:}
1753453818824:quotidian
1753453825091:quotidian()
1753453976420:quotidian <- function(namedVector = analyze(), top = 10)
1753453976420:{
1753453976420:## calls analyze for the all-in-one functionality
1753453976420:namedVector
1753453976421:orderly <- sort(namedVector, decreasing = TRUE)
1753453976421:orderly <- orderly[order(-orderly, names(orderly))]
1753453976422:for(i in 1:top)
1753453976422:{ print(orderly[i]) }
1753453976423:}
1753453976424:quotidian(top=20)
1753464747132:quotidian <- function(namedVector = analyze(), top = 10)
1753464747133:{
1753464747133:## calls analyze for the all-in-one functionality
1753464747133:namedVector
1753464747133:## most frequently used words
1753464747133:orderly <- sort(namedVector, decreasing = TRUE)
1753464747133:## and then alphebetize as a second sort
1753464747133:orderly <- orderly[order(-orderly, names(orderly))]
1753464747133:## needs some formatting!
1753464747133:for(i in 1:top)
1753464747134:{
1753464747134:cat("word:", orderly[i][key])
1753464747134:cat("count:", orderly[i][value])
1753464747135:cat("\n")
1753464747135:}
1753464747136:}
1753464747136:quotidian(top=20)
1753464839980:quotidian(top=20)
1753464891694:analyze <- function(textIn = "file",
1753464891694:keepHyphens = TRUE,
1753464891694:keepContractions = TRUE)
1753464891694:{
1753464891695:######################## start helper functions #############################
1753464891695:## pick the file if need be, pick your nose, too!
1753464891695:chooseFile <- function()
1753464891695:{
1753464891695:## choose file or use path?
1753464891695:path <- readline(prompt = "enter path or 'enter' to search: ")
1753464891695:if (path == "") ## else, give up.. never gotten the input line to work
1753464891695:{ path <- file.choose() }
1753464891697:## should likely just use file.choose() and obviate error handling
1753464891697:if(!file.exists(path))
1753464891697:{
1753464891697:print("try again! file not found 404 SOS")
1753464891698:## try again
1753464891698:chooseFile()
1753464891698:} ## end while invalid file path
1753464891699:## and spit it out
1753464891699:return (path)
1753464891699:}
1753464891699:## clean the line, keep or remove hyphens and contractions
1753464891700:clean <- function(line, hyphens, contractions)
1753464891700:{
1753464891700:## does the line end in a hyphenated word? damn, work
1753464891700:partialWord <- FALSE
1753464891700:if (grepl("-$", line))
1753464891701:{
1753464891701:## remove that hyphen
1753464891701:line <- gsub("-$", "", line )
1753464891702:## declare a partial word
1753464891702:partialWord <- TRUE
1753464891702:}
1753464891702:## no proper nouns allowed
1753464891703:line <- tolower(line)
1753464891703:## apropros keep hyphy chars
1753464891703:line <- gsub("[^a-z'-]", " ", line)
1753464891703:if (!contractions)
1753464891703:{ line <- gsub("'", " ", line) }
1753464891703:else
1753464891704:{
1753464891704:## it'll kill quotes and weird contractions ('bout)
1753464891704:line <- gsub("' ", " ", line)
1753464891704:line <- gsub(" '", " ", line)
1753464891705:}
1753464891705:if (!hyphens)
1753464891705:{ line <- gsub("-", " ", line) }
1753464891706:return (c(line, partialWord))
1753464891706:}
1753464891707:######################### end helper functions ##############################
1753464891707:## finding a file or using a string input?
1753464891708:if(textIn == "file")
1753464891708:{
1753464891708:## pick the file and verify
1753464891708:path <- chooseFile()
1753464891708:## open the connection to the file
1753464891708:text <- file(path, open = "r")
1753464891709:} ## end if using file
1753464891709:else ## for readLines to work, textConnection the string input
1753464891709:{ text <- textConnection(textIn) }
1753464891709:## initialize the variable to hold hyphenated end-of-liners
1753464891709:last <- ""
1753464891710:## initialize a vector to hold the counts
1753464891710:wordCount <- c()
1753464891710:while(TRUE)
1753464891710:##for (i in 1:10)
1753464891710:{
1753464891710:line <- readLines(text, n = 1)
1753464891711:## but how does it know there are no more lines? MAGIC
1753464891711:if (length(line) == 0) { break }
1753464891711:else
1753464891711:{
1753464891711:## if the last line ended with a hyphenated word, paste it on da start
1753464891711:line <- paste0(last, line)
1753464891712:## don't forget to reset
1753464891712:last <- ""
1753464891712:## lines of code where line is on line as line for line (wanna line?)
1753464891712:wash <- clean(line, keepHyphens, keepContractions)
1753464891712:## line is now the first part of the vector
1753464891712:line <- wash[1]
1753464891713:## make that it's own thing
1753464891713:words <- unlist(strsplit(line,"\\s+"))
1753464891713:## the second part -> hyphenated end-of-line? T/F
1753464891713:if (wash[2])
1753464891713:{
1753464891714:## store the last word frag
1753464891714:last <- words[length(words)]
1753464891714:## reset the line to not hold that part
1753464891714:words <- words[-length(words)]
1753464891714:} ## partial word saved for next line
1753464891715:for (word in words) ## word
1753464891715:{
1753464891715:if(word %in% names(wordCount))
1753464891715:{ wordCount[word] <- as.numeric(wordCount[word]) + 1}
1753464891715:else ## wordCount[word]++, no? 'course not
1753464891715:{ wordCount[word] <- 1}
1753464891716:} ## end add/update words
1753464891716:} ## end not empty line
1753464891716:} ## end while reading lines
1753464891717:## close the file (even text entry is considered a "file")
1753464891717:close(text)
1753464891717:return (wordCount)
1753464891717:} ## end readTheText
1753464896413:quotidian <- function(namedVector = analyze(), top = 10)
1753464896413:{
1753464896413:## calls analyze for the all-in-one functionality
1753464896413:namedVector
1753464896413:## most frequently used words
1753464896413:orderly <- sort(namedVector, decreasing = TRUE)
1753464896413:## and then alphebetize as a second sort
1753464896414:orderly <- orderly[order(-orderly, names(orderly))]
1753464896414:## needs some formatting!
1753464896414:for(i in 1:top)
1753464896414:{
1753464896414:cat("word:", orderly[i][key])
1753464896414:cat("count:", orderly[i][value])
1753464896414:cat("\n")
1753464896415:}
1753464896415:}
1753464896415:quotidian(top=20)
1753464926779:quotidian()
1753465046142:quotidian <- function(namedVector = analyze(), top = 10)
1753465046142:{
1753465046142:## calls analyze for the all-in-one functionality
1753465046142:namedVector
1753465046142:## most frequently used words
1753465046142:orderly <- sort(namedVector, decreasing = TRUE)
1753465046143:## and then alphebetize as a second sort
1753465046143:orderly <- orderly[order(-orderly, names(orderly))]
1753465046143:## needs some formatting!
1753465046143:for(i in 1:top)
1753465046143:{
1753465046143:key <- names(orderly)[i]
1753465046144:value <- orderly[i]
1753465046144:cat("word:", key, "\n")
1753465046144:cat("count:", value, "\n")
1753465046144:cat("\n")
1753465046144:}
1753465046145:}
1753465056336:quotidian(top=20)
1753465088925:quotidian <- function(namedVector = analyze(), top = 10)
1753465088926:{
1753465088926:## calls analyze for the all-in-one functionality
1753465088926:namedVector
1753465088926:## most frequently used words
1753465088926:orderly <- sort(namedVector, decreasing = TRUE)
1753465088927:## and then alphebetize as a second sort
1753465088927:orderly <- orderly[order(-orderly, names(orderly))]
1753465088927:## needs some formatting!
1753465088927:for(i in 1:top)
1753465088927:{
1753465088927:key <- names(orderly)[i]
1753465088928:value <- orderly[i]
1753465088928:cat("word:", key, "\n")
1753465088929:cat("count:", value, "\n")
1753465088929:cat("\n")
1753465088929:}
1753465088929:}
1753465096588:quotidian <- function(namedVector = analyze(), top = 10)
1753465096588:{
1753465096588:## calls analyze for the all-in-one functionality
1753465096588:namedVector
1753465096588:## most frequently used words
1753465096588:orderly <- sort(namedVector, decreasing = TRUE)
1753465096588:## and then alphebetize as a second sort
1753465096588:orderly <- orderly[order(-orderly, names(orderly))]
1753465096588:## needs some formatting!
1753465096589:for(i in 1:top)
1753465096589:{
1753465096589:key <- names(orderly)[i]
1753465096589:value <- orderly[i]
1753465096589:cat("word:", key, "\n")
1753465096589:cat("count:", value, "\n")
1753465096589:cat("\n")
1753465096589:}
1753465096589:}
1753465100570:quotidian(top=20)
1753465188553:quotidian <- function(namedVector = analyze(), top = 10)
1753465188553:{
1753465188553:## calls analyze for the all-in-one functionality
1753465188553:namedVector
1753465188553:## most frequently used words
1753465188553:orderly <- sort(namedVector, decreasing = TRUE)
1753465188553:## and then alphebetize as a second sort
1753465188553:orderly <- orderly[order(-orderly, names(orderly))]
1753465188554:## needs some formatting!
1753465188554:for(i in 1:top)
1753465188554:{
1753465188554:key <- names(orderly)[i]
1753465188554:value <- orderly[i]
1753465188554:cat("word ", i, ": ", key, "\n", sep = "")
1753465188554:cat("count:", value, "\n")
1753465188555:cat("\n")
1753465188555:}
1753465188555:}
1753465191811:quotidian(top=20)
1753465593115:library(devtools)
1753465865867:use_r(salient)
1753465872760:use_r("salient")
1753465919522:salient <- function(namedVector = analyze(), bottom = 10)
1753465919522:{
1753465919522:## calls analyze for the all-in-one functionality
1753465919522:namedVector
1753465919522:## most frequently used words
1753465919522:orderly <- sort(namedVector, decreasing = FALSE)
1753465919522:## and then alphebetize as a second sort
1753465919522:orderly <- orderly[order(-orderly, names(orderly))]
1753465919522:## needs some formatting!
1753465919523:for(i in 1:top)
1753465919523:{
1753465919523:key <- names(orderly)[i]
1753465919524:value <- orderly[i]
1753465919524:cat("word ", i, ": ", key, "\n", sep = "")
1753465919524:cat("count:", value, "\n")
1753465919524:cat("\n")
1753465919524:}
1753465919524:}
1753465923345:salient()
1753465950168:salient <- function(namedVector = analyze(), bottom = 10)
1753465950168:{
1753465950168:## calls analyze for the all-in-one functionality
1753465950168:namedVector
1753465950168:## most frequently used words
1753465950169:orderly <- sort(namedVector, decreasing = FALSE)
1753465950169:## and then alphebetize as a second sort
1753465950169:orderly <- orderly[order(-orderly, names(orderly))]
1753465950169:## needs some formatting!
1753465950170:for(i in 1:bottom)
1753465950170:{
1753465950170:key <- names(orderly)[i]
1753465950170:value <- orderly[i]
1753465950171:cat("word ", i, ": ", key, "\n", sep = "")
1753465950171:cat("count:", value, "\n")
1753465950171:cat("\n")
1753465950171:}
1753465950171:}
1753465959023:salient()
1753466016700:analyze()
1753467609424:use_r("viewStats")
1753468744409:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753468744409:{
1753468744409:## calls analyze for the all-in-one functionality
1753468744409:namedVector
1753468744409:## most/least frequently used words
1753468744410:orderly <- sort(namedVector, decreasing = common)
1753468744410:## and then alphabetize as a second sort
1753468744410:orderly <- orderly[order(-orderly, names(orderly))]
1753468744410:if(common)
1753468744410:{ cat(show, "most commonly used words:") }
1753468744410:else
1753468744410:{ cat(show, "least frequently used words:")}
1753468744411:## check your usage
1753468744411:for(i in 1:show)
1753468744411:{
1753468744411:key <- names(orderly)[i]
1753468744411:value <- orderly[i]
1753468744412:cat("word ", i, ": ", key, "\n", sep = "")
1753468744412:cat("count:", value, "\n")
1753468744412:cat("\n")
1753468744412:}
1753468744412:}
1753468747775:quotidian <- function(namedVector = analyze(), top = 10, bottom = 10, hapaxLegomena = TRUE)
1753468747775:{
1753468747775:## in case it needs to be established
1753468747776:namedVector
1753468747777:## show the most frequent words
1753468747777:salient(namedVector, show = top, common = TRUE)
1753468747777:cat("\n\n")
1753468747777:salient(namedVector, show = bottom, common = FALSE)
1753468747778:cat("\n\n")
1753468747778:if (hapaxLegomena)
1753468747779:{
1753468747779:## most frequently used words
1753468747779:orderly <- sort(namedVector, decreasing = FALSE)
1753468747779:## and then alphabetize as a second sort
1753468747779:orderly <- orderly[order(-orderly, names(orderly))]
1753468747779:## check your usage
1753468747780:for(i in 1:length(orderly))
1753468747780:{
1753468747780:key <- names(orderly)[i]
1753468747780:value <- orderly[i]
1753468747780:## done
1753468747780:if(value > 1){break}
1753468747780:cat("word ", i, ": ", key, "\n", sep = "")
1753468747781:cat("count:", value, "\n")
1753468747781:cat("\n")
1753468747781:}
1753468747781:} ## end show the hapax legomena
1753468747781:}
1753468754852:quotidian()
1753468792304:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753468792304:{
1753468792304:## calls analyze for the all-in-one functionality
1753468792304:namedVector
1753468792305:## most/least frequently used words
1753468792305:orderly <- sort(namedVector, decreasing = common)
1753468792305:## and then alphabetize as a second sort
1753468792305:orderly <- orderly[order(-orderly, names(orderly))]
1753468792305:if(common)
1753468792305:{ cat(show, "most commonly used words:\n") }
1753468792305:else
1753468792306:{ cat(show, "least frequently used words:")}
1753468792306:## check your usage
1753468792306:for(i in 1:show)
1753468792306:{
1753468792307:key <- names(orderly)[i]
1753468792307:value <- orderly[i]
1753468792307:cat("word ", i, ": ", key, "\n", sep = "")
1753468792307:cat("count:", value, "\n")
1753468792307:cat("\n")
1753468792307:}
1753468792308:}
1753468803778:quotidian()
1753468901160:salient(common = TRUE)
1753468925505:salient(common = FALSE)
1753468989887:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753468989887:{
1753468989887:## calls analyze for the all-in-one functionality
1753468989887:namedVector
1753468989888:## most/least frequently used words
1753468989888:#orderly <- sort(namedVector, decreasing = common)
1753468989888:## and then alphabetize as a second sort
1753468989888:orderly <- orderly[order(-orderly, names(orderly))]
1753468989888:if(common)
1753468989888:{ cat(show, "most commonly used words:\n") }
1753468989888:else
1753468989888:{ cat(show, "least frequently used words:")}
1753468989890:## check your usage
1753468989890:for(i in 1:show)
1753468989890:{
1753468989891:key <- names(orderly)[i]
1753468989891:value <- orderly[i]
1753468989892:cat("word ", i, ": ", key, "\n", sep = "")
1753468989892:cat("count:", value, "\n")
1753468989892:cat("\n")
1753468989893:}
1753468989893:}
1753468993727:salient(common = FALSE)
1753469071777:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753469071777:{
1753469071777:## calls analyze for the all-in-one functionality
1753469071777:namedVector
1753469071777:## most/least frequently used words
1753469071777:orderly <- sort(namedVector, decreasing = TRUE)
1753469071778:## and then alphabetize as a second sort
1753469071778:orderly <- orderly[order(-orderly, names(orderly))]
1753469071778:if(common)
1753469071778:{
1753469071778:cat(show, "most commonly used words:\n")
1753469071778:## most/least frequently used words
1753469071778:orderly <- sort(namedVector, decreasing = TRUE)
1753469071778:## and then alphabetize as a second sort
1753469071779:orderly <- orderly[order(-orderly, names(orderly))]
1753469071779:}
1753469071780:else
1753469071780:{
1753469071780:cat(show, "least frequently used words:")
1753469071780:## most/least frequently used words
1753469071780:orderly <- sort(namedVector, decreasing = FALSE)
1753469071781:## and then alphabetize as a second sort
1753469071781:orderly <- orderly[order(-orderly, names(orderly))]
1753469071781:}
1753469071781:## check your usage
1753469071781:for(i in 1:show)
1753469071781:{
1753469071782:key <- names(orderly)[i]
1753469071782:value <- orderly[i]
1753469071782:cat("word ", i, ": ", key, "\n", sep = "")
1753469071782:cat("count:", value, "\n")
1753469071782:cat("\n")
1753469071783:}
1753469071783:}
1753469077804:salient()
1753469097406:salient(common=TRUE)
1753469201201:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753469201201:{
1753469201201:## calls analyze for the all-in-one functionality
1753469201201:namedVector
1753469201202:## most/least frequently used words
1753469201202:orderly <- sort(namedVector, decreasing = TRUE)
1753469201202:## and then alphabetize as a second sort
1753469201202:orderly <- orderly[order(-orderly, names(orderly))]
1753469201203:if(common)
1753469201203:{
1753469201203:cat(show, "most commonly used words:\n")
1753469201203:## most/least frequently used words
1753469201203:orderly <- sort(namedVector, decreasing = TRUE)
1753469201203:## and then alphabetize as a second sort
1753469201203:orderly <- orderly[order(-orderly, names(orderly))]
1753469201204:}
1753469201204:else
1753469201204:{
1753469201204:cat(show, "least frequently used words:\n")
1753469201204:## most/least frequently used words
1753469201204:orderly <- sort(namedVector)
1753469201204:## and then alphabetize as a second sort
1753469201204:orderly <- orderly[order(-orderly, names(orderly))]
1753469201205:}
1753469201205:## check your usage
1753469201205:for(i in 1:show)
1753469201205:{
1753469201206:key <- names(orderly)[i]
1753469201206:value <- orderly[i]
1753469201206:cat("word ", i, ": ", key, "\n", sep = "")
1753469201206:cat("count:", value, "\n")
1753469201207:cat("\n")
1753469201207:}
1753469201207:}
1753469217387:salient(common = TRUE)
1753469228086:salient()
1753469262441:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753469262441:{
1753469262441:## calls analyze for the all-in-one functionality
1753469262443:namedVector
1753469262443:if(common)
1753469262444:{
1753469262444:cat(show, "most commonly used words:\n")
1753469262445:## most/least frequently used words
1753469262445:orderly <- sort(namedVector, decreasing = TRUE)
1753469262445:## and then alphabetize as a second sort
1753469262446:orderly <- orderly[order(-orderly, names(orderly))]
1753469262446:}
1753469262446:else
1753469262446:{
1753469262446:cat(show, "least frequently used words:\n")
1753469262446:## most/least frequently used words
1753469262446:orderly <- sort(namedVector)
1753469262447:## and then alphabetize as a second sort
1753469262447:orderly <- orderly[order(-orderly, names(orderly))]
1753469262447:}
1753469262447:## check your usage
1753469262447:for(i in 1:show)
1753469262447:{
1753469262447:key <- names(orderly)[i]
1753469262447:value <- orderly[i]
1753469262448:cat("word ", i, ": ", key, "\n", sep = "")
1753469262448:cat("count:", value, "\n")
1753469262448:cat("\n")
1753469262449:}
1753469262449:}
1753469268856:salient(common=TRUE)
1753469280530:salient(common=FALSE)
1753469339661:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753469339661:{
1753469339661:## calls analyze for the all-in-one functionality
1753469339661:namedVector
1753469339661:if(common)
1753469339661:{
1753469339661:cat(show, "most commonly used words:\n")
1753469339662:## most/least frequently used words
1753469339662:orderly <- sort(namedVector, decreasing = TRUE)
1753469339662:## and then alphabetize as a second sort
1753469339663:orderly <- orderly[order(-orderly, names(orderly))]
1753469339663:}
1753469339663:else
1753469339664:{
1753469339664:cat(show, "least frequently used words:\n")
1753469339664:## most/least frequently used words
1753469339665:orderly <- sort(namedVector, decreasing = FALSE)
1753469339665:## and then alphabetize as a second sort
1753469339665:orderly <- orderly[order(-orderly, names(orderly))]
1753469339665:}
1753469339665:## check your usage
1753469339666:for(i in 1:show)
1753469339666:{
1753469339666:key <- names(orderly)[i]
1753469339666:value <- orderly[i]
1753469339666:cat("word ", i, ": ", key, "\n", sep = "")
1753469339666:cat("count:", value, "\n")
1753469339666:cat("\n")
1753469339667:}
1753469339667:}
1753469343182:salient(common=FALSE)
1753469350251:salient(common=FALSE)
1753469362665:salient(common=TRUE)
1753469613771:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753469613771:{
1753469613771:## calls analyze for the all-in-one functionality
1753469613771:namedVector
1753469613772:if(common)
1753469613772:{ cat(show, "most commonly used words:\n")
1753469613772:## most/least frequently used words
1753469613773:orderly <- sort(namedVector, decreasing = TRUE)
1753469613773:## and then alphabetize as a second sort
1753469613773:orderly <- orderly[order(-orderly, names(orderly))]
1753469613773:}
1753469613773:else
1753469613774:{ cat(show, "least frequently used words:\n")
1753469613774:## most/least frequently used words
1753469613774:orderly <- sort(namedVector, decreasing = FALSE)
1753469613774:## and then alphabetize as a second sort
1753469613774:orderly <- orderly[order(-orderly, names(orderly))]
1753469613774:}
1753469613775:## check your usage
1753469613775:for(i in 1:min(show, length(orderly))
1753469613775:{
1753469634105:salient <- function(namedVector = analyze(), show = 10, common = FALSE)
1753469634106:{
1753469634106:## calls analyze for the all-in-one functionality
1753469634106:namedVector
1753469634106:if(common)
1753469634107:{ cat(show, "most commonly used words:\n")
1753469634107:## most/least frequently used words
1753469634107:orderly <- sort(namedVector, decreasing = TRUE)
1753469634107:## and then alphabetize as a second sort
1753469634108:orderly <- orderly[order(-orderly, names(orderly))]
1753469634108:}
1753469634108:else
1753469634109:{ cat(show, "least frequently used words:\n")
1753469634109:## most/least frequently used words
1753469634110:orderly <- sort(namedVector, decreasing = FALSE)
1753469634110:## and then alphabetize as a second sort
1753469634110:orderly <- orderly[order(-orderly, names(orderly))]
1753469634110:}
1753469634111:## check your usage
1753469634111:for(i in 1:min(show, length(orderly)))
1753469634111:{
1753469634111:key <- names(orderly)[i]
1753469634111:value <- orderly[i]
1753469634111:cat("word ", i, ": ", key, "\n", sep = "")
1753469634112:cat("count:", value, "\n")
1753469634112:cat("\n")
1753469634113:}
1753469634113:}
1753469640066:salient(common=TRUE)
1753469650843:salient(common=FALSE)
1753469836070:salient <- function(namedVector = analyze(), show = 10, common = "most")
1753469836070:{
1753469836070:## calls analyze for the all-in-one functionality
1753469836071:namedVector
1753469836071:if(common == "most")
1753469836071:{ cat(show, "most commonly used words:\n")
1753469836071:## most/least frequently used words
1753469836071:orderly <- sort(namedVector, decreasing = TRUE)
1753469836071:## and then alphabetize as a second sort
1753469836071:orderly <- orderly[order(-orderly, names(orderly))]
1753469836071:}
1753469836071:else
1753469836073:{ cat(show, "least frequently used words:\n")
1753469836073:## most/least frequently used words
1753469836073:orderly <- sort(namedVector, decreasing = FALSE)
1753469836073:## and then alphabetize as a second sort
1753469836073:orderly <- orderly[order(-orderly, names(orderly))]
1753469836074:}
1753469836074:## check your usage
1753469836074:for(i in 1:min(show, length(orderly)))
1753469836074:{
1753469836074:key <- names(orderly)[i]
1753469836074:value <- orderly[i]
1753469836076:cat("word ", i, ": ", key, "\n", sep = "")
1753469836076:cat("count:", value, "\n")
1753469836076:cat("\n")
1753469836076:}
1753469836076:}
1753469839318:salient(common=FALSE)
1753469857772:salient()
1753469897120:salient <- function(namedVector = analyze(), show = 10, common = TRUE)
1753469897120:{
1753469897120:## calls analyze for the all-in-one functionality
1753469897120:namedVector
1753469897120:if(common == TRUE)
1753469897120:{ cat(show, "most commonly used words:\n")
1753469897120:## most/least frequently used words
1753469897120:orderly <- sort(namedVector, decreasing = TRUE)
1753469897120:## and then alphabetize as a second sort
1753469897121:orderly <- orderly[order(-orderly, names(orderly))]
1753469897122:}
1753469897122:else
1753469897122:{ cat(show, "least frequently used words:\n")
1753469897122:## most/least frequently used words
1753469897122:orderly <- sort(namedVector, decreasing = FALSE)
1753469897123:## and then alphabetize as a second sort
1753469897123:orderly <- orderly[order(-orderly, names(orderly))]
1753469897123:}
1753469897123:## check your usage
1753469897123:for(i in 1:min(show, length(orderly)))
1753469897124:{
1753469897124:key <- names(orderly)[i]
1753469897124:value <- orderly[i]
1753469897125:cat("word ", i, ": ", key, "\n", sep = "")
1753469897125:cat("count:", value, "\n")
1753469897125:cat("\n")
1753469897126:}
1753469897126:}
1753469901373:salient()
1753469913791:salient(common = FALSE)
1753470059335:vec <- analyze()
1753470156339:top <- sort(vec, decreasing = TRUE)
1753470167266:bottom <- sort(vec, decreasing = FALSE)
1753470170208:top
1753470174574:bottom
1753470237890:salient <- function(namedVector = analyze(), show = 10, common = TRUE)
1753470237890:{
1753470237890:## calls analyze for the all-in-one functionality
1753470237890:use <- namedVector
1753470237891:if(common == TRUE)
1753470237891:{
1753470237891:cat(show, "most commonly used words:\n")
1753470237891:## most/least frequently used words
1753470237891:orderly <- sort(use, decreasing = TRUE)
1753470237891:}
1753470237891:else
1753470237891:{
1753470237891:cat(show, "least frequently used words:\n")
1753470237891:## most/least frequently used words
1753470237892:orderly <- sort(use, decreasing = FALSE)
1753470237892:}
1753470237892:## and then alphabetize as a second sort
1753470237893:orderly <- orderly[order(-orderly, names(orderly))]
1753470237893:## check usage for up to length of the vector
1753470237894:for(i in 1:min(show, length(orderly)))
1753470237894:{
1753470237895:key <- names(orderly)[i]
1753470237895:value <- orderly[i]
1753470237896:cat("word ", i, ": ", key, "\n", sep = "")
1753470237896:cat("count:", value, "\n")
1753470237897:cat("\n")
1753470237897:}
1753470237897:}
1753470251720:salient(common = TRUE)
1753470262504:salient(common = FALSE)
1753470405153:salient(common = FALSE)
1753470456529:salient <- function(namedVector = analyze(), show = 10, common = TRUE)
1753470456529:{
1753470456529:## calls analyze for the all-in-one functionality
1753470456529:namedVector
1753470456530:if(common == TRUE)
1753470456530:{
1753470456530:cat(show, "most commonly used words:\n")
1753470456530:## most/least frequently used words
1753470456530:orderly <- sort(namedVector, decreasing = TRUE)
1753470456530:}
1753470456530:else
1753470456530:{
1753470456530:cat(show, "least frequently used words:\n")
1753470456530:## most/least frequently used words
1753470456530:orderly <- sort(namedVector, decreasing = TRUE)
1753470456531:}
1753470456532:## and then alphabetize as a second sort
1753470456532:#orderly <- orderly[order(-orderly, names(orderly))]
1753470456532:## check usage for up to length of the vector
1753470456532:for(i in 1:min(show, length(orderly)))
1753470456532:{
1753470456533:key <- names(orderly)[i]
1753470456533:value <- orderly[i]
1753470456533:cat("word ", i, ": ", key, "\n", sep = "")
1753470456533:cat("count:", value, "\n")
1753470456533:cat("\n")
1753470456533:}
1753470456533:}
1753470459673:salient(common = FALSE)
1753470489034:salient <- function(namedVector = analyze(), show = 10, common = TRUE)
1753470489034:{
1753470489034:## calls analyze for the all-in-one functionality
1753470489034:namedVector
1753470489035:if(common == TRUE)
1753470489035:{
1753470489035:cat(show, "most commonly used words:\n")
1753470489035:## most/least frequently used words
1753470489035:orderly <- sort(namedVector, decreasing = TRUE)
1753470489035:}
1753470489035:else
1753470489035:{
1753470489035:cat(show, "least frequently used words:\n")
1753470489036:## most/least frequently used words
1753470489036:orderly <- sort(namedVector)
1753470489036:}
1753470489036:## and then alphabetize as a second sort
1753470489036:#orderly <- orderly[order(-orderly, names(orderly))]
1753470489037:## check usage for up to length of the vector
1753470489037:for(i in 1:min(show, length(orderly)))
1753470489037:{
1753470489037:key <- names(orderly)[i]
1753470489037:value <- orderly[i]
1753470489038:cat("word ", i, ": ", key, "\n", sep = "")
1753470489038:cat("count:", value, "\n")
1753470489038:cat("\n")
1753470489038:}
1753470489038:}
1753470491705:salient(common = FALSE)
1753470538787:salient <- function(namedVector = analyze(), show = 10, common = TRUE)
1753470538787:{
1753470538787:## calls analyze for the all-in-one functionality
1753470538788:namedVector
1753470538789:if(common == TRUE)
1753470538789:{
1753470538790:cat(show, "most commonly used words:\n")
1753470538790:## most/least frequently used words
1753470538790:orderly <- sort(namedVector, decreasing = TRUE)
1753470538791:## and then alphabetize as a second sort
1753470538791:orderly <- orderly[order(-orderly, names(orderly))]
1753470538792:}
1753470538792:else
1753470538792:{
1753470538792:cat(show, "least frequently used words:\n")
1753470538792:## most/least frequently used words
1753470538792:orderly <- sort(namedVector)
1753470538792:## and then alphabetize as a second sort
1753470538792:orderly <- orderly[order(orderly, names(orderly))]
1753470538793:}
1753470538793:## check usage for up to length of the vector
1753470538793:for(i in 1:min(show, length(orderly)))
1753470538793:{
1753470538793:key <- names(orderly)[i]
1753470538793:value <- orderly[i]
1753470538793:cat("word ", i, ": ", key, "\n", sep = "")
1753470538794:cat("count:", value, "\n")
1753470538794:cat("\n")
1753470538794:}
1753470538794:}
1753470541711:salient(common = FALSE)
1753470571075:salient(common = TRUE)
1753470706449:quotidian <- function(namedVector = analyze(), top = 10, bottom = 10, hapaxLegomena = TRUE)
1753470706449:{
1753470706450:## in case it needs to be established
1753470706450:namedVector
1753470706450:## show the most frequent words
1753470706450:salient(namedVector, show = top, common = TRUE)
1753470706450:cat("\n\n")
1753470706450:salient(namedVector, show = bottom, common = FALSE)
1753470706450:cat("\n\n")
1753470706451:if (hapaxLegomena)
1753470706451:{
1753470706451:## most frequently used words
1753470706451:orderly <- sort(namedVector, decreasing = FALSE)
1753470706452:## and then alphabetize as a second sort
1753470706452:orderly <- orderly[order(orderly, names(orderly))]
1753470706452:## check your usage
1753470706452:for(i in 1:length(orderly))
1753470706453:{
1753470706453:key <- names(orderly)[i]
1753470706453:value <- orderly[i]
1753470706453:## done
1753470706454:if(value > 1){break}
1753470706454:cat("word ", i, ": ", key, "\n", sep = "")
1753470706454:cat("count:", value, "\n")
1753470706454:cat("\n")
1753470706455:}
1753470706455:} ## end show the hapax legomena
1753470706455:}
1753470710663:quotidian()
1753471219944:use_r("infoGraph")
1753471518799:library(ggplot2)
1753471544553:# Sample named vector
1753471544553:word_vector <- c("apple" = 10, "banana" = 5, "cherry" = 8, "date" = 12, "elderberry" = 3)
1753471544553:# Specify the number of top words you want
1753471544554:n <- 3
1753471544554:# Sort the vector in descending order and select the top n words
1753471544554:top_words <- head(sort(word_vector, decreasing = TRUE), n)
1753471544554:# Create a bar chart
1753471544555:barplot(top_words, main = "Top N Words", xlab = "Words", ylab = "Frequency", col = "blue")
