library(MASS)
## first part, use the RGB file
rgb <- read.csv(file.choose(), header=T)

columns <- names(rgb)
columns
## [1] "ColorID"   "ColorName" "RA"        "GA"        "BA"        "R1"        "G1"        "B1"
## [9] "R2"        "G2"        "B2"

## so the regression line is there on one of them, but it looks WAY off, and
## thus it's out of frame for most of the plots
## (actually, turns out I forgot that the LM takes y, x and the plot takes x, y)

## lm for the linear regression
rr1 <- lm(rgb$RA~rgb$R1, data = rgb)
summary(rr1)
## see what it looks like
plot(rgb$R1, rgb$RA)
abline(rr1, col = "red")

## lm for the linear regression
rr2 <- lm(rgb$RA~rgb$R2, data = rgb)
summary(rr2)
## see what it looks like
plot(rgb$R2,  rgb$RA)
abline(rr2, col = "red")

## lm for the linear regression
r1r2 <- lm(rgb$R1~rgb$R2, data = rgb)
summary(r1r2)
## see what it looks like
plot(y=rgb$R1,x=rgb$R2)
abline(r1r2, col = "red")


## lm for the linear regression
gg1 <- lm(rgb$GA~rgb$G1, data = rgb)
summary(gg1)
## see what it looks like
plot(y=rgb$GA,x=rgb$G1)
abline(gg1, col = "green")

## lm for the linear regression
gg2 <- lm(rgb$GA~rgb$G2, data = rgb)
summary(gg2)
## see what it looks like
plot(y=rgb$RA,x=rgb$R1)
abline(rr1, col = "green")

## lm for the linear regression
g1g2 <- lm(rgb$G1~rgb$G2, data = rgb)
summary(g1g2)
## see what it looks like
plot(y=rgb$G1,x=rgb$G2)
abline(g1g2, col = "green")


## lm for the linear regression
bb1 <- lm(rgb$BA~rgb$B1, data = rgb)
summary(bb1)
## see what it looks like
plot(y=rgb$BA,x=rgb$B1)
abline(bb1, col = "blue")

## lm for the linear regression
bb2 <- lm(rgb$BA~rgb$B2, data = rgb)
summary(bb2)
## see what it looks like
plot(y=rgb$BA,x=rgb$B2)
abline(bb2, col = "blue")

## lm for the linear regression
b1b2 <- lm(rgb$B1~rgb$B2, data = rgb)
summary(b1b2)
## see what it looks like
plot(y=rgb$B1,x=rgb$B2)
abline(b1b2, col = "blue")

## polynomial regressions
## model <- lm(y ~ poly(x, degree), data)
polyRR1 <- lm(R1 ~ poly(RA, 2), data = rgb)

## plot the points
plot(rgb$RA, rgb$R1, main = "RA ~ R1", xlab = "RA", ylab = "R1", pch = 14)

# Create a sequence of values for R1 to predict RA
x_seq <- seq(min(rgb$RA), max(rgb$RA), length.out = 100)

# Predict RA values using the polynomial regression model
predicted_y <- predict(polyRR1, newdata = data.frame(RA = x_seq))

# Add the polynomial fit to the plot
lines(x_seq, predicted_y, col = "red", lwd = 2)


## my attempt (and the subsequent prompt)
## set the colors and make a vector to iterate over those vectors
reds = c('RA', 'R1', 'R2')
grns = c('GA', 'G1', 'G2')
blus = c('BA', 'B1', 'B2')
clrs = c(reds, grns, blus)

## loop over the vectors in the clrs matrix thingy
for(color in clrs)
{
  ## set up the pairs of colors
  one = c(color[1], color[2])
  two = c(color[1], color[3])
  thr = c(color[2], color[3])
  pairs = c(one, two, thr) ## I feel like I'm going too many levels deep here
  for(pair in pairs)
  {
    ## do the poly-fit
    poly <- lm(pair[1] ~ poly(pair[2], 2), data = rgb)
    ## plot the poitns
    plot(rgb[[pair[1]]], rgb[[pair[2]]], main = cat(pair[1], " ~ ", pair[2]),
         xlab = pair[1], ylab = pair[2], pch = 18)

    ## sequence a bunch of points along the x
    x_seq <- seq(min(rgb[[pair[1]]]), max(rgb[[pair[1]]]), length.out = 100)
    ## fit the curve
    predicted_y <- predict(poly, newdata = data.frame(pair[2] = x_seq))

    if(color == reds){use <- "red"}
    else if (color == grns){use <- "green"}
    else {use <- "blue"}
    lines(x_seq, predicted_y, col = use, lwd = 2)

  }


}

## AI-augmented using my prompt as feed
## a couple iterations later, the syntax fits better.(and it flipped my intended x and y... wtf)
# Define color groups
reds = c('RA', 'R1', 'R2')
grns = c('GA', 'G1', 'G2')
blus = c('BA', 'B1', 'B2')
clrs = list(reds, grns, blus)  # List to hold color groups

# Loop over the color groups
for(color_group in clrs) {
  # Set up pairs of colors
  one = c(color_group[1], color_group[2])
  two = c(color_group[1], color_group[3])
  thr = c(color_group[2], color_group[3])
  pairs = list(one, two, thr)  # Store pairs in a list

  for(pair in pairs) {
    # Perform polynomial fit
    poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = rgb)

    # Plot the points
    plot(rgb[[pair[2]]], rgb[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
         xlab = pair[2], ylab = pair[1], pch = 18)

    # Generate sequence of x values for prediction
    x_seq <- seq(min(rgb[[pair[2]]]), max(rgb[[pair[2]]]), length.out = 100)

    # Create a data frame for prediction with named columns
    new_data <- data.frame(setNames(list(x_seq), pair[2]))

    # Predict y values based on polynomial fit
    predicted_y <- predict(poly, newdata = new_data)

    # Set color based on the group
    if (all(color_group == reds)) {
      use <- "red"
    } else if (all(color_group == grns)) {
      use <- "green"
    } else {
      use <- "blue"
    }

    # Add polynomial line to the plot
    lines(x_seq, predicted_y, col = use, lwd = 2)
  }
}


## logistic regressions (this doesn't look logrithmic but we'll try it out)
## model <- glm(dependent_variable ~ independent_variable, family = binomial, data = your_data)
 ## (this doesn't work since it's continuous not binary data)

## all of these require other libraries and it feels like more work than this is worth

## ridge regression
#library(glmnet)
#model <- glmnet(as.matrix(your_data[, -1]), your_data$dependent_variable, alpha = 0)
## lasso regression
#model <- glmnet(as.matrix(your_data[, -1]), your_data$dependent_variable, alpha = 1)
## elastic net
#model <- glmnet(as.matrix(your_data[, -1]), your_data$dependent_variable, alpha = 0.5)
## generalized additive models (GAM)
#library(mgcv)
#model <- gam(dependent_variable ~ s(independent_variable), data = your_data)
## survival regression
#library(mgcv)
#model <- gam(dependent_variable ~ s(independent_variable), data = your_data)
## quantile regression
#library(quantreg)
#model <- rq(dependent_variable ~ independent_variable, data = your_data)


##################################################################################
###################    PART    ONE.TWO           #################################
##################################################################################

## use color calibration file
clr <- read.csv(file.choose())

## correlate from C.LED.on. -> C.CLR.
## from ACTUAL to the COLORED light, and from LED to the appropriate color...
## ... (hardest part in this is figuring out what that means)
## R ~ R.RED. && R ~ R.LED.on.


## same as above, really
rred <- lm(clr$R~clr$R.Red., data = clr)
summary(rred)
plot(clr$R.Red., clr$R)
abline(rred,col = "red")


bblu <- lm(clr$B~clr$B.Blue., data = clr)
summary(bblu)
plot(clr$B.Blue., clr$B)
abline(bblu, col = "blue")

ggrn <- lm(clr$G~clr$G.Green., data = clr)
summary(ggrn)
plot(clr$G.Green., clr$G)
abline(ggrn, col = 'green')

## and the LED ~ color
## same as above, really
rled <- lm(clr$R~clr$R.LED.on., data = clr)
summary(rled)
plot(clr$R.LED.on., clr$R)
abline(rled,col = "red")

bled <- lm(clr$B~clr$B.LED.on., data = clr)
summary(bled)
plot(clr$B.LED.on., clr$B)
abline(bled, col = "blue")

gled <- lm(clr$G~clr$G.LED.on., data = clr)
summary(gled)
plot(clr$G.LED.on., clr$G)
abline(gled, col = 'green')


## this plot makes no sense to me
fitVals <- fitted(gled)
residuals <- residuals(gled)
plot( fitVals, residuals)
abline(h = 0, col = "magenta")
## and this is included in summary already...
summary(gled)$r.squared

## Compare the models, which model is bettter at predicting the separate color markers?
## Comparing R~R.Red. leaves much more variance than R~R.LED.on.
## and the R^2 value is much more reliable to me
## I guess the residuals suggest if the model should include a higher degree polynomial?
## I think the color plots would do better on a polynomial fit (degree 2 would work)
## since all of the plots appear to have a majority of points under the line at the ends and
## over the line in the middle

# Define color groups
reds = c('R', 'R.LED.on.', 'R.Red.')
grns = c('G', 'G.LED.on.', 'G.Green.')
blus = c('B', 'B.LED.on.', 'B.Blue.')
clrs = list(reds, grns, blus)  # List to hold color groups

# Loop over the color groups
for(color_group in clrs) {
  # Set up pairs of colors
  one = c(color_group[1], color_group[2])
  two = c(color_group[1], color_group[3])
  thr = c(color_group[2], color_group[3])
  pairs = list(one, two, thr)  # Store pairs in a list

  for(pair in pairs) {
    # Perform polynomial fit
    poly <- lm(as.formula(paste(pair[1], "~ poly(", pair[2], ", 2)")), data = clr)

    # Plot the points
    plot(clr[[pair[2]]], clr[[pair[1]]], main = paste(pair[1], " ~ ", pair[2]),
         xlab = pair[2], ylab = pair[1], pch = 18)

    # Generate sequence of x values for prediction
    x_seq <- seq(min(clr[[pair[2]]]), max(clr[[pair[2]]]), length.out = 100)

    # Create a data frame for prediction with named columns
    new_data <- data.frame(setNames(list(x_seq), pair[2]))

    # Predict y values based on polynomial fit
    predicted_y <- predict(poly, newdata = new_data)

    # Set color based on the group
    if (all(color_group == reds)) {
      use <- "red"
    } else if (all(color_group == grns)) {
      use <- "green"
    } else {
      use <- "blue"
    }

    # Add polynomial line to the plot
    lines(x_seq, predicted_y, col = use, lwd = 2)
  }
}

## (yay for object oriented programming!)

###############################################################################
#################   PART    TWO    (PART ONLY)   ##############################
###############################################################################

## used boob-cancer thingy
B <- read.csv(file.choose()) ## (cause B looks like uneven, sideways boobs)
names(B)
## [1] "ID"                   "ClumpThickness"       "CellSizeUniformity"   "CellShapeUniformity"
## [5] "MarginalAdhesion"     "SingleEpithelialCell" "BareNuclei"           "BlandChromatin"
## [9] "NormalNucleoli"       "Mitoses"              "BenignMalignant"

## BenignMalignant has two values, 2 & 4
## (perhaps it's better for unbiased analysis if we don't know what the numbers mean)
columns <- names(B)
## a little syntax help from ecosia chat
columns[-c(1,11)]

## says we'll need to treat this as factors... I don't imagine this makes much difference, ultimately
B$BenignMalignant <- factor(B$BenignMalignant, levels = c(2,4))
## doublecheck the structure took
str(B)


install.packages("ggplot2")


